{"task_id": "Rust/0", "prompt": "/// Check if in given vector of numbers, are any two numbers closer to each other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0, 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64) -> bool {\n", "canonical_solution": "\n    for i in 0..numbers.len(){\n        for j in 1..numbers.len(){\n\n            if i != j {\n                let distance:f32 = numbers[i] - numbers[j];\n\n            if distance.abs() < threshold{\n                return true;\n            }\n\n            }\n            \n        }\n    }\n\n    return false;\n\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_has_close_elements() {\n        let candidate = has_close_elements;\n        assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n        assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n        assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n        assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n        assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n        assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n        assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);\n\n    }\n}\n", "entry_point": "has_close_elements", "instruction": "Write an idiomatic Rust function `has_close_elements(numbers: Vec<f64>, threshold: f64) -> bool` to solve the following problem:\nCheck if in given vector of numbers, are any two numbers closer to each other than given threshold. \n\nIn the following are some examples of how to use the function:\n>>> has_close_elements(vec![1.0, 2.0, 3.0], 0.5)\nfalse\n>>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\ntrue\n"}
{"task_id": "Rust/1", "prompt": "/// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n/// separate those group into separate strings and return the vector of those.\n/// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n/// Ignore any spaces in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( )) (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"(()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n", "canonical_solution": "\n    let mut result:Vec<String> = vec![];\n    let mut current_string:String = String::new();\n    let mut current_depth:u32 = 0;\n\n    for c in paren_string.chars(){\n        if c == '('{\n            current_depth += 1;\n            current_string.push(c);\n        }\n        else if c == ')' {\n            current_depth -= 1;\n            current_string.push(c);\n\n            if current_depth == 0{\n                result.push(current_string.clone());\n                current_string.clear()\n            }\n            \n        }\n\n\n    }\n    return result;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_separate_paren_groups() {\n        let candidate = separate_paren_groups;\n        assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![String::from(\"(()())\"), String::from(\"((()))\"), String::from(\"()\"), String::from(\"((())()())\")]);\n        assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\")), vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"((()))\"), String::from(\"(((())))\")]);\n        assert_eq!(candidate(String::from(\"(()(())((())))\")), vec![String::from(\"(()(())((())))\")]);\n        assert_eq!(candidate(String::from(\"( ) (( )) (( )( ))\")), vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"(()())\")]);\n\n    }\n}\n", "entry_point": "separate_paren_groups", "instruction": "Write an idiomatic Rust function `separate_paren_groups(paren_string: String) -> Vec<String>` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to separate those group into separate strings and return the vector of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other Ignore any spaces in the input string. \n\nIn the following are some examples of how to use the function:\n>>> separate_paren_groups(String::from(\"( ) (( )) (( )( ))\"))\nvec![String::from(\"()\"), String::from(\"(())\"), String::from(\"(()())\")]\n"}
{"task_id": "Rust/2", "prompt": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n", "canonical_solution": "\n    return number % 1.0;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_truncate_number() {\n        let candidate = truncate_number;\n        assert_eq!(candidate(3.5), 0.5);\n        assert_eq!(candidate(1.25), 0.25);\n        assert_eq!(candidate(123.0), 0.0);\n\n    }\n}\n", "entry_point": "truncate_number", "instruction": "Write an idiomatic Rust function `truncate_number(number: f64) -> f64` to solve the following problem:\nGiven a positive floating point number, it can be decomposed into and integer part (largest integer smaller than given number) and decimals (leftover part always smaller than 1). Return the decimal part of the number. \n\nIn the following are some examples of how to use the function:\n>>> truncate_number(3.5)\n0.5\n"}
{"task_id": "Rust/3", "prompt": "/// You're given a vector of deposit and withdrawal operations on a bank account that starts with\n/// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n/// at that point function should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1, 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations: Vec<isize>) -> bool {\n", "canonical_solution": "\n\nlet mut balance:i32 = 0;\nfor op in operations {\n    balance = balance + op;\n    if balance < 0 {\n        return true;\n        }\n    }\n    return false;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_below_zero() {\n        let candidate = below_zero;\n        assert_eq!(candidate(Vec::<isize>::new()), false);\n        assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n        assert_eq!(candidate(vec![1, 2, -4, 5, 6]), true);\n        assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n        assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n        assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n\n    }\n}\n", "entry_point": "below_zero", "instruction": "Write an idiomatic Rust function `below_zero(operations: Vec<isize>) -> bool` to solve the following problem:\nYou're given a vector of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account fallls below zero, and at that point function should return true. Otherwise it should return false. \n\nIn the following are some examples of how to use the function:\n>>> below_zero(vec![1, 2, 3])\nfalse\n>>> below_zero(vec![1, 2, -4, 5])\ntrue\n"}
{"task_id": "Rust/4", "prompt": "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64 {\n", "canonical_solution": "\n    let mean:f32 = numbers.iter().fold(0.0,|acc:f32, x:&f32| acc + x) / numbers.len() as f32;\n    return numbers.iter().map(|x:&f32| (x - mean).abs()).sum::<f32>() / numbers.len() as f32;\n}\n\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_mean_absolute_deviation() {\n        let candidate = mean_absolute_deviation;\n        assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n        assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n        assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n\n    }\n}\n", "entry_point": "mean_absolute_deviation", "instruction": "Write an idiomatic Rust function `mean_absolute_deviation(numbers: Vec<f64>) -> f64` to solve the following problem:\nFor a given vector of input numbers, calculate Mean Absolute Deviation around the mean of this dataset. Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case): MAD = average | x - x_mean | \n\nIn the following are some examples of how to use the function:\n>>> mean_absolute_deviation(vec![1.0, 2.0, 3.0, 4.0])\n1.0\n"}
{"task_id": "Rust/5", "prompt": "/// Insert a number 'delimeter' between every two consecutive elements of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n/// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n", "canonical_solution": "\n    let mut res:Vec<u32> = vec![];\n    numbers.iter().for_each(|item:&u32| {res.push(*item); res.push(delimeter);});\n    res.pop();\n    return res;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_intersperse() {\n        let candidate = intersperse;\n        assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n        assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n        assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n\n    }\n}\n", "entry_point": "intersperse", "instruction": "Write an idiomatic Rust function `intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>` to solve the following problem:\nInsert a number 'delimeter' between every two consecutive elements of input vector `numbers' \n\nIn the following are some examples of how to use the function:\n>>> intersperse(vec![], 4)\nVec::<isize>::new()\n>>> intersperse(vec![1, 2, 3], 4)\nvec![1, 4, 2, 4, 3]\n"}
{"task_id": "Rust/6", "prompt": "/// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n/// For each of the group, output the deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"(()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string: String) -> Vec<isize> {\n", "canonical_solution": "\n    let mut result:Vec<i32> = vec![];\n    let mut depth:i32 = 0;\n    let mut max_depth:i32 = 0;\n\n    for splits in paren_string.split(' '){\n        for c in splits.chars(){ \n        if c == '('{\n        depth = depth + 1;\n        max_depth = max(depth, max_depth);\n        }\n        else{\n        depth = depth - 1;\n        }\n    }\n    \n    if depth == 0 {\n        result.push(max_depth);\n        max_depth = 0;\n        }\n    }\n\n    return result;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_parse_nested_parens() {\n        let candidate = parse_nested_parens;\n        assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n        assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n        assert_eq!(candidate(String::from(\"(()(())((())))\")), vec![4]);\n\n    }\n}\n", "entry_point": "parse_nested_parens", "instruction": "Write an idiomatic Rust function `parse_nested_parens(paren_string: String) -> Vec<isize>` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three. \n\nIn the following are some examples of how to use the function:\n>>> parse_nested_parens(String::from(\"(()()) ((())) () ((())()())\"))\nvec![2, 3, 1, 3]\n"}
{"task_id": "Rust/7", "prompt": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n", "canonical_solution": "\n    return strings.iter().filter(|x:&&String| x.contains(&substring)).map(String::from).collect();\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_filter_by_substring() {\n        let candidate = filter_by_substring;\n        assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n        assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n        assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n        assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n\n    }\n}\n", "entry_point": "filter_by_substring", "instruction": "Write an idiomatic Rust function `filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>` to solve the following problem:\nFilter an input vector of strings only for ones that contain given substring \n\nIn the following are some examples of how to use the function:\n>>> filter_by_substring(vec![], String::from(\"a\"))\nVec::<String>::new()\n>>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\nvec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n"}
{"task_id": "Rust/8", "prompt": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n", "canonical_solution": "\n    let sum = |xs: &Vec<i32>| xs.iter()\n    .fold(0, |mut sum, &val| { sum += val; \n                                                 sum }\n    );\n    let product = |xs: &Vec<i32>| xs.iter()\n    .fold(1, |mut prod, &val| { prod *= val; \n                                                 prod }\n    );\n    return (sum(&numbers),product(&numbers));\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_sum_product() {\n        let candidate = sum_product;\n        assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n        assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n        assert_eq!(candidate(vec![100, 0]), (100, 0));\n        assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n        assert_eq!(candidate(vec![10]), (10, 10));\n\n    }\n}\n", "entry_point": "sum_product", "instruction": "Write an idiomatic Rust function `sum_product(numbers: Vec<isize>) -> (isize, isize)` to solve the following problem:\nFor a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector. Empty sum should be equal to 0 and empty product should be equal to 1. \n\nIn the following are some examples of how to use the function:\n>>> sum_product(vec![])\n(0, 1)\n>>> sum_product(vec![1, 2, 3, 4])\n(10, 24)\n"}
{"task_id": "Rust/9", "prompt": "/// From a given vector of integers, generate a vector of rolling maximum element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1, 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n", "canonical_solution": "\n    let mut running_max :Option<i32> = None;\n    let mut result:Vec<i32> = vec![];\n\n    for n in numbers{\n        if running_max == None {\n            running_max = Some(n);\n\n        }else{\n            running_max = max(running_max, Some(n));\n        }\n\n        result.push(running_max.unwrap());\n    }\n    return result;\n\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_rolling_max() {\n        let candidate = rolling_max;\n        assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n        assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n        assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n        assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n\n    }\n}\n", "entry_point": "rolling_max", "instruction": "Write an idiomatic Rust function `rolling_max(numbers: Vec<isize>) -> Vec<isize>` to solve the following problem:\nFrom a given vector of integers, generate a vector of rolling maximum element found until given moment in the sequence. \n\nIn the following are some examples of how to use the function:\n>>> rolling_max(vec![1, 2, 3, 2, 3, 4, 2])\nvec![1, 2, 3, 3, 3, 4, 4]\n"}
{"task_id": "Rust/10", "prompt": "/// Find the shortest palindrome that begins with a supplied string.\n/// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string that is a palindrome.\n/// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n/// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n/// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n", "canonical_solution": "\n        let mut i: usize = 0;\n        for i in 0..str.len() {\n            let rstr: &str = &str[i..];\n            if is_palindrome_10(rstr) {\n                let nstr: &str = &str[0..i];\n                let n2str: String = nstr.chars().rev().collect();\n                return str.to_string()+&n2str;\n            }\n        }\n        let n2str: String = str.chars().rev().collect();\n        return str.to_string()+&n2str;\n    }\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_make_palindrome() {\n        let candidate = make_palindrome;\n        assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n        assert_eq!(candidate(String::from(\"x\")), String::from(\"x\"));\n        assert_eq!(candidate(String::from(\"xyz\")), String::from(\"xyzyx\"));\n        assert_eq!(candidate(String::from(\"xyx\")), String::from(\"xyx\"));\n        assert_eq!(candidate(String::from(\"jerry\")), String::from(\"jerryrrej\"));\n\n    }\n}\n", "entry_point": "make_palindrome", "instruction": "Write an idiomatic Rust function `make_palindrome(string: String) -> String` to solve the following problem:\nFind the shortest palindrome that begins with a supplied string. Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix. \n\nIn the following are some examples of how to use the function:\n>>> make_palindrome(String::from(\"\"))\nString::from(\"\")\n>>> make_palindrome(String::from(\"cat\"))\nString::from(\"catac\")\n>>> make_palindrome(String::from(\"cata\"))\nString::from(\"catac\")\n"}
{"task_id": "Rust/11", "prompt": "/// Input are two strings a and b consisting only of 1s and 0s.\n/// Perform binary XOR on these inputs and return result also as a string.\n/// >>> string_xor(String::from(\"010\"), String::from(\"110\"))\n/// String::from(\"100\")\nfn string_xor(a: String, b: String) -> String {\n", "canonical_solution": "\n\n    let xor = |i:char, j:char| {if i == j{return \"0\".to_string()}else{return \"1\".to_string()}};\n    return a.chars().into_iter().zip(b.chars().into_iter()).map(|(i,j)| \"\".to_string() + &xor(i,j)).collect();   \n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_string_xor() {\n        let candidate = string_xor;\n        assert_eq!(candidate(String::from(\"111000\"), String::from(\"101010\")), String::from(\"010010\"));\n        assert_eq!(candidate(String::from(\"1\"), String::from(\"1\")), String::from(\"0\"));\n        assert_eq!(candidate(String::from(\"0101\"), String::from(\"0000\")), String::from(\"0101\"));\n\n    }\n}\n", "entry_point": "string_xor", "instruction": "Write an idiomatic Rust function `string_xor(a: String, b: String) -> String` to solve the following problem:\nInput are two strings a and b consisting only of 1s and 0s. Perform binary XOR on these inputs and return result also as a string. \n\nIn the following are some examples of how to use the function:\n>>> string_xor(String::from(\"010\"), String::from(\"110\"))\nString::from(\"100\")\n"}
{"task_id": "Rust/12", "prompt": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n", "canonical_solution": "\n    if strings.is_empty(){\n        return None;\n    }\n    let mut max:i32 = 0;\n    let mut res:String = String::new();\n\n    for s in strings{\n        if s.len() as i32 > max {\n            res = s;\n            max = res.len() as i32;\n        }    \n    }\n     return Some(res);\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_longest() {\n        let candidate = longest;\n        assert_eq!(candidate(Vec::<String>::new()), None);\n        assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n        assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n\n    }\n}\n", "entry_point": "longest", "instruction": "Write an idiomatic Rust function `longest(strings: Vec<String>) -> Option<String>` to solve the following problem:\nOut of vector of strings, return the longest one. Return the first one in case of multiple strings of the same length. Return None in case the input vector is empty. \n\nIn the following are some examples of how to use the function:\n>>> longest(vec![])\nNone\n>>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\nSome(String::from(\"a\"))\n>>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\nSome(String::from(\"ccc\"))\n"}
{"task_id": "Rust/13", "prompt": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n", "canonical_solution": "\n    while b > 0 {\n        (a, b) = (b, a % b);\n    }\n    return a;\n}\n\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_greatest_common_divisor() {\n        let candidate = greatest_common_divisor;\n        assert_eq!(candidate(3, 7), 1);\n        assert_eq!(candidate(10, 15), 5);\n        assert_eq!(candidate(49, 14), 7);\n        assert_eq!(candidate(144, 60), 12);\n\n    }\n}\n", "entry_point": "greatest_common_divisor", "instruction": "Write an idiomatic Rust function `greatest_common_divisor(a: isize, b: isize) -> isize` to solve the following problem:\nReturn a greatest common divisor of two integers a and b \n\nIn the following are some examples of how to use the function:\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n"}
{"task_id": "Rust/14", "prompt": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n", "canonical_solution": "\n   let mut res:Vec<String> = vec![];\n   let mut res_str:String = String::new();\n\nfor c in string.chars(){\n    res_str.push(c);\n    res.push(res_str.clone());\n}\nreturn res;\n}\n\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_all_prefixes() {\n        let candidate = all_prefixes;\n        assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n        assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n        assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n\n    }\n}\n", "entry_point": "all_prefixes", "instruction": "Write an idiomatic Rust function `all_prefixes(string: String) -> Vec<String>` to solve the following problem:\nReturn vector of all prefixes from shortest to longest of the input string \n\nIn the following are some examples of how to use the function:\n>>> all_prefixes(String::from(\"abc\"))\nvec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\n"}
{"task_id": "Rust/15", "prompt": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n", "canonical_solution": "\n    let mut res:String = String::new();\n\n    for number in 0..n + 1{\n        res = res + &number.to_string() + \" \";\n    }\n    \n    return res.trim_end().to_string();\n\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_string_sequence() {\n        let candidate = string_sequence;\n        assert_eq!(candidate(0), String::from(\"0\"));\n        assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n        assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\n    }\n}\n", "entry_point": "string_sequence", "instruction": "Write an idiomatic Rust function `string_sequence(n: isize) -> String` to solve the following problem:\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive. \n\nIn the following are some examples of how to use the function:\n>>> string_sequence(0)\nString::from(\"0\")\n>>> string_sequence(5)\nString::from(\"0 1 2 3 4 5\")\n"}
{"task_id": "Rust/16", "prompt": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n", "canonical_solution": "\n    let res:HashSet<char> = str.chars().into_iter().map(|x:char| x.to_ascii_lowercase()).collect();\n    return res.len() as i32;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_count_distinct_characters() {\n        let candidate = count_distinct_characters;\n        assert_eq!(candidate(String::from(\"\")), 0);\n        assert_eq!(candidate(String::from(\"abcde\")), 5);\n        assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n        assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n        assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\n    }\n}\n", "entry_point": "count_distinct_characters", "instruction": "Write an idiomatic Rust function `count_distinct_characters(string: String) -> isize` to solve the following problem:\nGiven a string, find out how many distinct characters (regardless of case) does it consist of \n\nIn the following are some examples of how to use the function:\n>>> count_distinct_characters(String::from(\"xyzXYZ\"))\n3\n>>> count_distinct_characters(String::from(\"Jerry\"))\n4\n"}
{"task_id": "Rust/17", "prompt": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n", "canonical_solution": "\n\n    let map = |x:&str| {match x {\n        \"o\" => 4,\n        \"o|\" => 2,\n        \".|\" =>  1,\n        _ => 0\n    } \n};\n    return music_string.split(\" \").map(|x:&str| map(&x.to_string())).filter(|x:&i32| x != &0).collect();\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_parse_music() {\n        let candidate = parse_music;\n        assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n        assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n        assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n        assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n        assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n\n    }\n}\n", "entry_point": "parse_music", "instruction": "Write an idiomatic Rust function `parse_music(music_string: String) -> Vec<isize>` to solve the following problem:\nInput to this function is a string representing musical notes in a special ASCII format. Your task is to parse this string and return vector of integers corresponding to how many beats does each not last. Here is a legend: 'o' - whole note, lasts four beats 'o|' - half note, lasts two beats '.|' - quater note, lasts one beat \n\nIn the following are some examples of how to use the function:\n>>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\nvec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n"}
{"task_id": "Rust/18", "prompt": "/// Find how many times a given substring can be found in the original string. Count overlaping cases.\n/// >>> how_many_times(String::from(\"\"), String::from(\"a\"))\n/// 0\n/// >>> how_many_times(String::from(\"aaa\"), String::from(\"a\"))\n/// 3\n/// >>> how_many_times(String::from(\"aaaa\"), String::from(\"aa\"))\n/// 3\nfn how_many_times(string: String, substring: String) -> isize {\n", "canonical_solution": "\n    let mut times:i32 = 0;\n\n    for i in 0..(string.len() as i32 - substring.len() as i32 + 1){\n        if string.get(i as usize..(i + substring.len() as i32) as usize).unwrap().to_string() == substring {\n            times += 1;\n        }    \n    }\n    return times;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_how_many_times() {\n        let candidate = how_many_times;\n        assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n        assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"x\")), 4);\n        assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"cac\")), 4);\n        assert_eq!(candidate(String::from(\"john doe\"), String::from(\"john\")), 1);\n\n    }\n}\n", "entry_point": "how_many_times", "instruction": "Write an idiomatic Rust function `how_many_times(string: String, substring: String) -> isize` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases. \n\nIn the following are some examples of how to use the function:\n>>> how_many_times(String::from(\"\"), String::from(\"a\"))\n0\n>>> how_many_times(String::from(\"aaa\"), String::from(\"a\"))\n3\n>>> how_many_times(String::from(\"aaaa\"), String::from(\"aa\"))\n3\n"}
{"task_id": "Rust/19", "prompt": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n", "canonical_solution": "\n    let str_to_i32 = |x:&str| {match x{\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ => 1000\n    }};\n\n    let i32_to_str = |x:&i32| {match x{\n        0 => \"zero\".to_string(),\n        1 => \"one\".to_string(),\n        2 => \"two\".to_string(),\n        3 => \"three\".to_string(),\n        4 => \"four\".to_string(),\n        5 => \"five\".to_string(),\n        6 => \"six\".to_string(),\n        7 => \"seven\".to_string(),\n        8 => \"eight\".to_string(),\n        9 => \"nine\".to_string(),\n        _ => \"none\".to_string()\n}};\n\n    let mut nmbrs:Vec<i32> = numbers.split_ascii_whitespace().map(|x:&str| str_to_i32(x)).collect(); \n    nmbrs.sort();\n    let res:String = nmbrs.iter().map(|x:&i32| i32_to_str(x) + \" \").collect();\n    return res.trim_end().to_string();\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_sort_numbers() {\n        let candidate = sort_numbers;\n        assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n        assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n        assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n        assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n        assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n\n    }\n}\n", "entry_point": "sort_numbers", "instruction": "Write an idiomatic Rust function `sort_numbers(numbers: String) -> String` to solve the following problem:\nInput is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest \n\nIn the following are some examples of how to use the function:\n>>> sort_numbers(String::from(\"three one five\"))\nString::from(\"one three five\")\n"}
{"task_id": "Rust/20", "prompt": "/// From a supplied vector of numbers (of length at least two) select and return two that are the closest to each\n/// other and return them in order (smaller number, larger number).\n/// >>> find_closest_elements(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfn find_closest_elements(numbers: Vec<f64>) -> (f64, f64) {\n", "canonical_solution": "\n    let mut closest_pair = (0.0,0.0);\n    let mut distance:Option<f32> = None;\n\n    for (idx, elem) in numbers.iter().enumerate(){\n        for (idx2, elem2) in  numbers.iter().enumerate() {\n            if idx != idx2 {\n                if distance == None {\n                    distance = Some((elem - elem2).abs());\n                    if *elem < *elem2{\n                        closest_pair = (*elem, *elem2);\n                    }else{\n                        closest_pair = (*elem2, *elem);\n                    }\n\n                }else{\n                    let new_distance:f32= (elem - elem2).abs();\n                    if new_distance < distance.unwrap(){\n                        distance = Some(new_distance);\n\n                        if *elem < *elem2{\n                            closest_pair = (*elem, *elem2);\n                        }else{\n                            closest_pair = (*elem2, *elem);\n                        }\n                        \n    \n                    }\n                }\n            }\n        }\n    }\n    return closest_pair;\n\n\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_find_closest_elements() {\n        let candidate = find_closest_elements;\n        assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2]), (3.9, 4.0));\n        assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0]), (5.0, 5.9));\n        assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.2]), (2.0, 2.2));\n        assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0]), (2.0, 2.0));\n        assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1]), (2.2, 3.1));\n\n    }\n}\n", "entry_point": "find_closest_elements", "instruction": "Write an idiomatic Rust function `find_closest_elements(numbers: Vec<f64>) -> (f64, f64)` to solve the following problem:\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number). \n\nIn the following are some examples of how to use the function:\n>>> find_closest_elements(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n"}
{"task_id": "Rust/21", "prompt": "/// Given vector of numbers (of at least two elements), apply a linear transform to that vector,\n/// such that the smallest number will become 0 and the largest will become 1\n/// >>> rescale_to_unit(vec![1.0, 2.0, 3.0, 4.0, 5.0])\n/// vec![0.0, 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n", "canonical_solution": "\n    let min_number= *numbers.iter().min_by(|a, b| a.partial_cmp(b).unwrap()).unwrap();\n    let max_number=  *numbers.iter().max_by(|a, b| a.partial_cmp(b).unwrap()).unwrap();\n    return numbers.iter().map(|x:&f32| (x-min_number) / (max_number - min_number)).collect();\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_rescale_to_unit() {\n        let candidate = rescale_to_unit;\n        assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n        assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0, 0.0]);\n        assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n        assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n        assert_eq!(candidate(vec![12.0, 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n\n    }\n}\n", "entry_point": "rescale_to_unit", "instruction": "Write an idiomatic Rust function `rescale_to_unit(numbers: Vec<f64>) -> Vec<f64>` to solve the following problem:\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector, such that the smallest number will become 0 and the largest will become 1 \n\nIn the following are some examples of how to use the function:\n>>> rescale_to_unit(vec![1.0, 2.0, 3.0, 4.0, 5.0])\nvec![0.0, 0.25, 0.5, 0.75, 1.0]\n"}
{"task_id": "Rust/23", "prompt": "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n/// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String) -> isize {\n", "canonical_solution": "\n    return strings.len() as i32;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_strlen() {\n        let candidate = strlen;\n        assert_eq!(candidate(String::from(\"\")), 0);\n        assert_eq!(candidate(String::from(\"x\")), 1);\n        assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n\n    }\n}\n", "entry_point": "strlen", "instruction": "Write an idiomatic Rust function `strlen(string: String) -> isize` to solve the following problem:\nReturn length of given string \n\nIn the following are some examples of how to use the function:\n>>> strlen(String::from(\"\"))\n0\n>>> strlen(String::from(\"abc\"))\n3\n"}
{"task_id": "Rust/24", "prompt": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n", "canonical_solution": "\n    let mut res:i32 = 0;\n    let sqn = 1..n;\n    \n    for i in sqn.rev(){\n        if n % i == 0 {\n            res = i;\n            break;\n        }\n    }\n\n    return res;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_largest_divisor() {\n        let candidate = largest_divisor;\n        assert_eq!(candidate(3), 1);\n        assert_eq!(candidate(7), 1);\n        assert_eq!(candidate(10), 5);\n        assert_eq!(candidate(100), 50);\n        assert_eq!(candidate(49), 7);\n\n    }\n}\n", "entry_point": "largest_divisor", "instruction": "Write an idiomatic Rust function `largest_divisor(n: isize) -> isize` to solve the following problem:\nFor a given number n, find the largest number that divides n evenly, smaller than n \n\nIn the following are some examples of how to use the function:\n>>> largest_divisor(15)\n5\n"}
{"task_id": "Rust/25", "prompt": "/// Return vector of prime factors of given integer in the order from smallest to largest.\n/// Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n/// Input number should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2, 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2, 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n", "canonical_solution": "\n    let mut n = n;\n    let mut factors = vec![];\n    let mut divisor = 2;\n    while divisor * divisor <= n {\n        while n % divisor == 0 {\n            factors.push(divisor);\n            n = n / divisor;\n        }\n        divisor = divisor + 1;\n    }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_factorize() {\n        let candidate = factorize;\n        assert_eq!(candidate(2), vec![2]);\n        assert_eq!(candidate(4), vec![2, 2]);\n        assert_eq!(candidate(8), vec![2, 2, 2]);\n        assert_eq!(candidate(57), vec![3, 19]);\n        assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n        assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19, 19]);\n        assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n        assert_eq!(candidate(18), vec![2, 3, 3]);\n\n    }\n}\n", "entry_point": "factorize", "instruction": "Write an idiomatic Rust function `factorize(n: isize) -> Vec<isize>` to solve the following problem:\nReturn vector of prime factors of given integer in the order from smallest to largest. Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization. Input number should be equal to the product of all factors \n\nIn the following are some examples of how to use the function:\n>>> factorize(8)\nvec![2, 2, 2]\n>>> factorize(25)\nvec![5, 5]\n>>> factorize(70)\nvec![2, 5, 7]\n"}
{"task_id": "Rust/26", "prompt": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n", "canonical_solution": "\n    let mut m: HashMap<i32, i32> = HashMap::new();\n\n    for n in &numbers {\n        *m.entry(*n).or_default() += 1;\n    }\n    let res:Vec<i32> = numbers.into_iter().filter(|x| m.get(x) == Some(&1)).collect();\n    return res;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_remove_duplicates() {\n        let candidate = remove_duplicates;\n        assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n        assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n        assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\n    }\n}\n", "entry_point": "remove_duplicates", "instruction": "Write an idiomatic Rust function `remove_duplicates(numbers: Vec<isize>) -> Vec<isize>` to solve the following problem:\nFrom a vector of integers, remove all elements that occur more than once. Keep order of elements left the same as in the input. \n\nIn the following are some examples of how to use the function:\n>>> remove_duplicates(vec![1, 2, 3, 2, 4])\nvec![1, 3, 4]\n"}
{"task_id": "Rust/27", "prompt": "/// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"hELLO\")\nfn flip_case(string: String) -> String {\n", "canonical_solution": "\n    return string.chars().into_iter().fold(String::new(), |res:String, c:char| {if c.is_ascii_lowercase(){return res + &c.to_uppercase().to_string();}else{return res + &c.to_ascii_lowercase().to_string();}});\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_flip_case() {\n        let candidate = flip_case;\n        assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n        assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"));\n        assert_eq!(candidate(String::from(\"These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n\n    }\n}\n", "entry_point": "flip_case", "instruction": "Write an idiomatic Rust function `flip_case(string: String) -> String` to solve the following problem:\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase. \n\nIn the following are some examples of how to use the function:\n>>> flip_case(String::from(\"Hello\"))\nString::from(\"hELLO\")\n"}
{"task_id": "Rust/28", "prompt": "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n/// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings: Vec<String>) -> String {\n", "canonical_solution": "\n    return strings.iter().fold(String::new(),|res: String, x:&String| res + &x.to_string());\n\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_concatenate() {\n        let candidate = concatenate;\n        assert_eq!(candidate(Vec::<String>::new()), String::from(\"\"));\n        assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), String::from(\"xyz\"));\n        assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"k\")]), String::from(\"xyzwk\"));\n\n    }\n}\n", "entry_point": "concatenate", "instruction": "Write an idiomatic Rust function `concatenate(strings: Vec<String>) -> String` to solve the following problem:\nConcatenate vector of strings into a single string \n\nIn the following are some examples of how to use the function:\n>>> concatenate(vec![])\nString::from(\"\")\n>>> concatenate(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\nString::from(\"abc\")\n"}
{"task_id": "Rust/29", "prompt": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n", "canonical_solution": "\n    return strings.into_iter().filter(|s| s.starts_with(&prefix)).collect();\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_filter_by_prefix() {\n        let candidate = filter_by_prefix;\n        assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n        assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n\n    }\n}\n", "entry_point": "filter_by_prefix", "instruction": "Write an idiomatic Rust function `filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>` to solve the following problem:\nFilter an input vector of strings only for ones that start with a given prefix. \n\nIn the following are some examples of how to use the function:\n>>> filter_by_prefix(vec![], String::from(\"a\"))\nVec::<String>::new()\n>>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\nvec![String::from(\"abc\"), String::from(\"array\")]\n"}
{"task_id": "Rust/30", "prompt": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n", "canonical_solution": "\n    return numbers.into_iter().filter(|n| n.is_positive()).collect();\n\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_get_positive() {\n        let candidate = get_positive;\n        assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n        assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n        assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n        assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\n    }\n}\n", "entry_point": "get_positive", "instruction": "Write an idiomatic Rust function `get_positive(l: Vec<isize>) -> Vec<isize>` to solve the following problem:\nReturn only positive numbers in the vector. \n\nIn the following are some examples of how to use the function:\n>>> get_positive(vec![-1, 2, -4, 5, 6])\nvec![2, 5, 6]\n>>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\nvec![5, 3, 2, 3, 9, 123, 1]\n"}
{"task_id": "Rust/31", "prompt": "/// Return true if a given number is prime, and false otherwise.\n/// >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n/// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n/// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n: isize) -> bool {\n", "canonical_solution": "\n    if n < 2{\n    return false;\n}\nfor k in 2..n-1 {\n    if n % k == 0{\n        return false;\n    }\n}\nreturn true;\n\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_is_prime() {\n        let candidate = is_prime;\n        assert_eq!(candidate(6), false);\n        assert_eq!(candidate(101), true);\n        assert_eq!(candidate(11), true);\n        assert_eq!(candidate(13441), true);\n        assert_eq!(candidate(61), true);\n        assert_eq!(candidate(4), false);\n        assert_eq!(candidate(1), false);\n        assert_eq!(candidate(5), true);\n        assert_eq!(candidate(11), true);\n        assert_eq!(candidate(17), true);\n        assert_eq!(candidate(85), false);\n        assert_eq!(candidate(77), false);\n        assert_eq!(candidate(255379), false);\n\n    }\n}\n", "entry_point": "is_prime", "instruction": "Write an idiomatic Rust function `is_prime(n: isize) -> bool` to solve the following problem:\nReturn true if a given number is prime, and false otherwise. \n\nIn the following are some examples of how to use the function:\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n"}
{"task_id": "Rust/33", "prompt": "/// This function takes a vector l and returns a vector l' such that\n/// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n/// to the values of the corresponding indicies of l, but sorted.\n/// >>> sort_third(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_third(vec![5, 6, 3, 4, 8, 9, 2])\n/// vec![2, 6, 3, 4, 8, 9, 5]\nfn sort_third(l: Vec<isize>) -> Vec<isize> {\n", "canonical_solution": "\n    let mut third = vec![];\n    let mut out:Vec<i32> = vec![];\n\n    for (indx,elem) in l.iter().enumerate(){\n        if indx%3 == 0 && indx != 0{\n            third.push(elem)\n        }\n    }\n    third.sort();\n    let mut indx_t:usize = 0;\n\n    for i in 0..l.len() {\n        if i%3 == 0 && i != 0{\n            if indx_t < third.len(){\n                out.push(*third[indx_t]);\n                indx_t += 1;\n        }\n        }else{\n            out.push(l[i]);\n        }\n        \n    }\n    return out;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_sort_third() {\n        let candidate = sort_third;\n        assert_eq!(candidate(vec![5, 6, 3, 4, 8, 9, 2]), vec![2, 6, 3, 4, 8, 9, 5]);\n        assert_eq!(candidate(vec![5, 8, 3, 4, 6, 9, 2]), vec![2, 8, 3, 4, 6, 9, 5]);\n        assert_eq!(candidate(vec![5, 6, 9, 4, 8, 3, 2]), vec![2, 6, 9, 4, 8, 3, 5]);\n        assert_eq!(candidate(vec![5, 6, 3, 4, 8, 9, 2, 1]), vec![2, 6, 3, 4, 8, 9, 5, 1]);\n\n    }\n}\n", "entry_point": "sort_third", "instruction": "Write an idiomatic Rust function `sort_third(l: Vec<isize>) -> Vec<isize>` to solve the following problem:\nThis function takes a vector l and returns a vector l' such that l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal to the values of the corresponding indicies of l, but sorted. \n\nIn the following are some examples of how to use the function:\n>>> sort_third(vec![1, 2, 3])\nvec![1, 2, 3]\n>>> sort_third(vec![5, 6, 3, 4, 8, 9, 2])\nvec![2, 6, 3, 4, 8, 9, 5]\n"}
{"task_id": "Rust/34", "prompt": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n", "canonical_solution": "\n    let mut res:Vec<i32> = nmbs.clone();\n    res.sort();\n    res.dedup();\n    return res;\n }\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_unique() {\n        let candidate = unique;\n        assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n\n    }\n}\n", "entry_point": "unique", "instruction": "Write an idiomatic Rust function `unique(l: Vec<isize>) -> Vec<isize>` to solve the following problem:\nReturn sorted unique elements in a vector \n\nIn the following are some examples of how to use the function:\n>>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\nvec![0, 2, 3, 5, 9, 123]\n"}
{"task_id": "Rust/35", "prompt": "/// Return maximum element in the vector.\n/// >>> max_element(vec![1, 2, 3])\n/// 3\n/// >>> max_element(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\nfn max_element(l: Vec<isize>) -> isize {\n", "canonical_solution": "\n    return *nmbs.iter().max().unwrap();\n }\n\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_max_element() {\n        let candidate = max_element;\n        assert_eq!(candidate(vec![1, 2, 3]), 3);\n        assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n\n    }\n}\n", "entry_point": "max_element", "instruction": "Write an idiomatic Rust function `max_element(l: Vec<isize>) -> isize` to solve the following problem:\nReturn maximum element in the vector. \n\nIn the following are some examples of how to use the function:\n>>> max_element(vec![1, 2, 3])\n3\n>>> max_element(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n"}
{"task_id": "Rust/36", "prompt": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n", "canonical_solution": "\n    let mut ns:Vec<i32> = vec![];\n\n    for i in 0..n{\n        if i % 11 == 0 || i % 13 == 0{\n            ns.push(i);\n        }\n    }\n\n    let s:String = ns.into_iter().fold(String::new(),|s:String, n:i32| {s + &n.to_string()});\n    let mut ans:i32 = 0;\n\n    for c in s.chars(){\n        if c == '7'{\n        ans += 1;\n        }\n    }\n    return ans;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_fizz_buzz() {\n        let candidate = fizz_buzz;\n        assert_eq!(candidate(50), 0);\n        assert_eq!(candidate(78), 2);\n        assert_eq!(candidate(79), 3);\n        assert_eq!(candidate(100), 3);\n        assert_eq!(candidate(200), 6);\n        assert_eq!(candidate(4000), 192);\n        assert_eq!(candidate(10000), 639);\n        assert_eq!(candidate(100000), 8026);\n\n    }\n}\n", "entry_point": "fizz_buzz", "instruction": "Write an idiomatic Rust function `fizz_buzz(n: isize) -> isize` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13. \n\nIn the following are some examples of how to use the function:\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n"}
{"task_id": "Rust/37", "prompt": "/// This function takes a vector l and returns a vector l' such that\n/// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>> sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3, 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n", "canonical_solution": "\n    let mut even = vec![];\n    let mut out:Vec<i32> = vec![];\n\n    for (indx,elem) in nmbs.iter().enumerate(){\n        if indx%2 == 0{\n            even.push(elem)\n        }\n    }\n    even.sort();\n    let mut indx_t:usize = 0;\n\n    for i in 0..nmbs.len() {\n        if i%2 == 0{\n            if indx_t < even.len(){\n                out.push(*even[indx_t]);\n                indx_t += 1;\n        }\n        }else{\n            out.push(nmbs[i]);\n        }\n        \n    }\n    return out;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_sort_even() {\n        let candidate = sort_even;\n        assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n        assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n        assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\n    }\n}\n", "entry_point": "sort_even", "instruction": "Write an idiomatic Rust function `sort_even(l: Vec<isize>) -> Vec<isize>` to solve the following problem:\nThis function takes a vector l and returns a vector l' such that l' is identical to l in the odd indicies, while its values at the even indicies are equal to the values of the even indicies of l, but sorted. \n\nIn the following are some examples of how to use the function:\n>>> sort_even(vec![1, 2, 3])\nvec![1, 2, 3]\n>>> sort_even(vec![5, 6, 3, 4])\nvec![3, 6, 5, 4]\n"}
{"task_id": "Rust/39", "prompt": "/// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n/// >>> prime_fib(1)\n/// 2\n/// >>> prime_fib(2)\n/// 3\n/// >>> prime_fib(3)\n/// 5\n/// >>> prime_fib(4)\n/// 13\n/// >>> prime_fib(5)\n/// 89\nfn prime_fib(n: isize) -> isize {\n", "canonical_solution": "\n    let mut f1 = 1;\n    let mut f2 = 2;\n    let mut count = 0;\n    while count < n {\n        f1 = f1 + f2;\n        let m = f1;\n        f1 = f2;\n        f2 = m;\n        let mut isprime = true;\n        for w in 2..(f1 as f32).sqrt() as i32 + 1 {\n            if f1 % w == 0 {\n                isprime = false;\n                break;\n            }\n        }\n        if isprime {\n            count += 1;\n        }\n        if count == n {\n            return f1;\n        }\n    }\n    0\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_prime_fib() {\n        let candidate = prime_fib;\n        assert_eq!(candidate(1), 2);\n        assert_eq!(candidate(2), 3);\n        assert_eq!(candidate(3), 5);\n        assert_eq!(candidate(4), 13);\n        assert_eq!(candidate(5), 89);\n        assert_eq!(candidate(6), 233);\n        assert_eq!(candidate(7), 1597);\n        assert_eq!(candidate(8), 28657);\n        assert_eq!(candidate(9), 514229);\n        assert_eq!(candidate(10), 433494437);\n\n    }\n}\n", "entry_point": "prime_fib", "instruction": "Write an idiomatic Rust function `prime_fib(n: isize) -> isize` to solve the following problem:\nprime_fib returns n-th number that is a Fibonacci number and it's also prime. \n\nIn the following are some examples of how to use the function:\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n"}
{"task_id": "Rust/40", "prompt": "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it returns true if there are three distinct elements in the vector that\n/// sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n/// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l: Vec<isize>) -> bool {\n", "canonical_solution": "\n    for i in 0.. nmbs.len(){\n        for j in i + 1.. nmbs.len(){\n            for k in j + 1.. nmbs.len(){\n                if *nmbs.get(i).unwrap() + *nmbs.get(j).unwrap() + *nmbs.get(k).unwrap() == 0{\n                    return true;\n                }\n            }\n        }\n    }\nreturn false;\n\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_triples_sum_to_zero() {\n        let candidate = triples_sum_to_zero;\n        assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n        assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n        assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n        assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n        assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n        assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n        assert_eq!(candidate(vec![1]), false);\n        assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n        assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\n    }\n}\n", "entry_point": "triples_sum_to_zero", "instruction": "Write an idiomatic Rust function `triples_sum_to_zero(l: Vec<isize>) -> bool` to solve the following problem:\ntriples_sum_to_zero takes a vector of integers as an input. it returns true if there are three distinct elements in the vector that sum to zero, and false otherwise. \n\nIn the following are some examples of how to use the function:\n>>> triples_sum_to_zero(vec![1, 3, 5, 0])\nfalse\n>>> triples_sum_to_zero(vec![1, 3, -2, 1])\ntrue\n>>> triples_sum_to_zero(vec![1, 2, 3, 7])\nfalse\n>>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\ntrue\n>>> triples_sum_to_zero(vec![1])\nfalse\n"}
{"task_id": "Rust/41", "prompt": "/// Imagine a road that's a perfectly straight infinitely long line.\n/// n cars are driving left to right;  simultaneously, a different set of n cars\n/// are driving right to left.   The two sets of cars start out being very far from\n/// each other.  All cars move in the same speed.  Two cars are said to collide\n/// when a car that's moving left to right hits a car that's moving right to left.\n/// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n/// in their trajectory as if they did not collide.\n/// This function outputs the number of such collisions.\nfn car_race_collision(n: isize) -> isize {\n", "canonical_solution": "\n    return n*n;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_car_race_collision() {\n        let candidate = car_race_collision;\n        assert_eq!(candidate(2), 4);\n        assert_eq!(candidate(3), 9);\n        assert_eq!(candidate(4), 16);\n        assert_eq!(candidate(8), 64);\n        assert_eq!(candidate(10), 100);\n\n    }\n}\n", "entry_point": "car_race_collision", "instruction": "Write an idiomatic Rust function `car_race_collision(n: isize) -> isize` to solve the following problem:\nImagine a road that's a perfectly straight infinitely long line. n cars are driving left to right;  simultaneously, a different set of n cars are driving right to left.   The two sets of cars start out being very far from each other.  All cars move in the same speed.  Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left. However, the cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory as if they did not collide. This function outputs the number of such collisions. "}
{"task_id": "Rust/42", "prompt": "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1, 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n", "canonical_solution": "\n    return l.into_iter().map(|n:i32| n + 1).collect();\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_incr_list() {\n        let candidate = incr_list;\n        assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n        assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n        assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n\n    }\n}\n", "entry_point": "incr_list", "instruction": "Write an idiomatic Rust function `incr_list(l: Vec<isize>) -> Vec<isize>` to solve the following problem:\nReturn vector with elements incremented by 1. \n\nIn the following are some examples of how to use the function:\n>>> incr_list(vec![1, 2, 3])\nvec![2, 3, 4]\n>>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\nvec![6, 4, 6, 3, 4, 4, 10, 1, 124]\n"}
{"task_id": "Rust/43", "prompt": "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it returns true if there are two distinct elements in the vector that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n", "canonical_solution": "\n    for (i, l1) in l.iter().enumerate(){\n        for j in i + 1.. l.len(){\n            if l1 + l[j] == 0{\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_pairs_sum_to_zero() {\n        let candidate = pairs_sum_to_zero;\n        assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n        assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n        assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n        assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n        assert_eq!(candidate(vec![1]), false);\n        assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n        assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]), true);\n        assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n        assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n\n    }\n}\n", "entry_point": "pairs_sum_to_zero", "instruction": "Write an idiomatic Rust function `pairs_sum_to_zero(l: Vec<isize>) -> bool` to solve the following problem:\npairs_sum_to_zero takes a vector of integers as an input. it returns true if there are two distinct elements in the vector that sum to zero, and false otherwise. \n\nIn the following are some examples of how to use the function:\n>>> pairs_sum_to_zero(vec![1, 3, 5, 0])\nfalse\n>>> pairs_sum_to_zero(vec![1, 3, -2, 1])\nfalse\n>>> pairs_sum_to_zero(vec![1, 2, 3, 7])\nfalse\n>>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\ntrue\n>>> pairs_sum_to_zero(vec![1])\nfalse\n"}
{"task_id": "Rust/44", "prompt": "/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n/// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\")\nfn change_base(x: isize, base: isize) -> String {\n", "canonical_solution": "\n    let mut ret:String = \"\".to_string();\n    let mut x1 = x;\n\n    while  x1 > 0{\n        ret = (x1 % base).to_string() + &ret;\n        x1 = x1 / base;\n    }\n    return ret;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_change_base() {\n        let candidate = change_base;\n        assert_eq!(candidate(8, 3), String::from(\"22\"));\n        assert_eq!(candidate(9, 3), String::from(\"100\"));\n        assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n        assert_eq!(candidate(16, 2), String::from(\"10000\"));\n        assert_eq!(candidate(8, 2), String::from(\"1000\"));\n        assert_eq!(candidate(7, 2), String::from(\"111\"));\n        assert_eq!(candidate(2, 3), String::from(\"2\"));\n        assert_eq!(candidate(3, 4), String::from(\"3\"));\n        assert_eq!(candidate(4, 5), String::from(\"4\"));\n        assert_eq!(candidate(5, 6), String::from(\"5\"));\n        assert_eq!(candidate(6, 7), String::from(\"6\"));\n        assert_eq!(candidate(7, 8), String::from(\"7\"));\n\n    }\n}\n", "entry_point": "change_base", "instruction": "Write an idiomatic Rust function `change_base(x: isize, base: isize) -> String` to solve the following problem:\nChange numerical base of input number x to base. return string representation after the conversion. base numbers are less than 10. \n\nIn the following are some examples of how to use the function:\n>>> change_base(8, 3)\nString::from(\"22\")\n>>> change_base(8, 2)\nString::from(\"1000\")\n>>> change_base(7, 2)\nString::from(\"111\")\n"}
{"task_id": "Rust/45", "prompt": "/// Given length of a side and high return area for a triangle.\n/// >>> triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n", "canonical_solution": "\n    return (a * h) as f64 / 2.0;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_triangle_area() {\n        let candidate = triangle_area;\n        assert_eq!(candidate(5, 3), 7.5);\n        assert_eq!(candidate(2, 2), 2.0);\n        assert_eq!(candidate(10, 8), 40.0);\n\n    }\n}\n", "entry_point": "triangle_area", "instruction": "Write an idiomatic Rust function `triangle_area(a: isize, h: isize) -> f64` to solve the following problem:\nGiven length of a side and high return area for a triangle. \n\nIn the following are some examples of how to use the function:\n>>> triangle_area(5, 3)\n7.5\n"}
{"task_id": "Rust/46", "prompt": "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n", "canonical_solution": "\n    let mut results:Vec<i32> = vec![0, 0, 2, 0];\n\n    if n < 4 {\n        return *results.get(n as usize).unwrap();\n    }\n\n    for _ in 4.. n + 1{\n        results.push(results.get(results.len()-1).unwrap() + results.get(results.len()-2).unwrap()\n         + results.get(results.len()-3).unwrap() + results.get(results.len()-4).unwrap());\n        results.remove(0);\n    }\n\n    return *results.get(results.len()-1).unwrap();\n\n    \n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_fib4() {\n        let candidate = fib4;\n        assert_eq!(candidate(5), 4);\n        assert_eq!(candidate(8), 28);\n        assert_eq!(candidate(10), 104);\n        assert_eq!(candidate(12), 386);\n\n    }\n}\n", "entry_point": "fib4", "instruction": "Write an idiomatic Rust function `fib4(n: isize) -> isize` to solve the following problem:\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion. \n\nIn the following are some examples of how to use the function:\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n"}
{"task_id": "Rust/47", "prompt": "/// Return median of elements in the vector l.\n/// >>> median(vec![3, 1, 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l: Vec<isize>) -> f64 {\n", "canonical_solution": "\n    let mut res:Vec<i32> = l.clone();\n    res.sort();\n    if res.len() % 2 == 1{\n        return *res.get(res.len() / 2).unwrap() as f64;\n    }else{      \n        return (res.get(res.len() / 2 -1).unwrap() + res.get(res.len() / 2).unwrap()) as f64/ 2.0;\n    }\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_median() {\n        let candidate = median;\n        assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n        assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n        assert_eq!(candidate(vec![5]), 5.0);\n        assert_eq!(candidate(vec![6, 5]), 5.5);\n        assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n\n    }\n}\n", "entry_point": "median", "instruction": "Write an idiomatic Rust function `median(l: Vec<isize>) -> f64` to solve the following problem:\nReturn median of elements in the vector l. \n\nIn the following are some examples of how to use the function:\n>>> median(vec![3, 1, 2, 4, 5])\n3.0\n>>> median(vec![-10, 4, 6, 1000, 10, 20])\n15.0\n"}
{"task_id": "Rust/48", "prompt": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n", "canonical_solution": "\n    let pr: String = text.chars().rev().collect();\n    return pr == text;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_is_palindrome() {\n        let candidate = is_palindrome;\n        assert_eq!(candidate(String::from(\"\")), true);\n        assert_eq!(candidate(String::from(\"aba\")), true);\n        assert_eq!(candidate(String::from(\"aaaaa\")), true);\n        assert_eq!(candidate(String::from(\"zbcd\")), false);\n        assert_eq!(candidate(String::from(\"xywyx\")), true);\n        assert_eq!(candidate(String::from(\"xywyz\")), false);\n        assert_eq!(candidate(String::from(\"xywzx\")), false);\n\n    }\n}\n", "entry_point": "is_palindrome", "instruction": "Write an idiomatic Rust function `is_palindrome(text: String) -> bool` to solve the following problem:\nChecks if given string is a palindrome \n\nIn the following are some examples of how to use the function:\n>>> is_palindrome(String::from(\"\"))\ntrue\n>>> is_palindrome(String::from(\"aba\"))\ntrue\n>>> is_palindrome(String::from(\"aaaaa\"))\ntrue\n>>> is_palindrome(String::from(\"zbcd\"))\nfalse\n"}
{"task_id": "Rust/49", "prompt": "/// Return 2^n modulo p (be aware of numerics).\n/// >>> modp(3, 5)\n/// 3\n/// >>> modp(1101, 101)\n/// 2\n/// >>> modp(0, 101)\n/// 1\n/// >>> modp(3, 11)\n/// 8\n/// >>> modp(100, 101)\n/// 1\nfn modp(n: isize, p: isize) -> isize {\n", "canonical_solution": "\n    if n == 0 {\n        return 1;\n    } else {\n        return (modp(n - 1, p) * 2) % p;\n    }\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_modp() {\n        let candidate = modp;\n        assert_eq!(candidate(3, 5), 3);\n        assert_eq!(candidate(1101, 101), 2);\n        assert_eq!(candidate(0, 101), 1);\n        assert_eq!(candidate(3, 11), 8);\n        assert_eq!(candidate(100, 101), 1);\n        assert_eq!(candidate(30, 5), 4);\n        assert_eq!(candidate(31, 5), 3);\n\n    }\n}\n", "entry_point": "modp", "instruction": "Write an idiomatic Rust function `modp(n: isize, p: isize) -> isize` to solve the following problem:\nReturn 2^n modulo p (be aware of numerics). \n\nIn the following are some examples of how to use the function:\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n"}
{"task_id": "Rust/51", "prompt": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n", "canonical_solution": "\n    let vowels = \"AEIOUaeiou\";\n    let mut out = String::new();\n    for c in text.chars() {\n        if !vowels.contains(c) {\n            out.push(c);\n        }\n    }\n    out\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_remove_vowels() {\n        let candidate = remove_vowels;\n        assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n        assert_eq!(candidate(String::from(\"abcdef\n    ghijklm\")), String::from(\"bcdf\n    ghjklm\"));\n        assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n        assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n        assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n        assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n        assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n\n    }\n}\n", "entry_point": "remove_vowels", "instruction": "Write an idiomatic Rust function `remove_vowels(text: String) -> String` to solve the following problem:\nremove_vowels is a function that takes string and returns string without vowels. \n\nIn the following are some examples of how to use the function:\n>>> remove_vowels(String::from(\"\"))\nString::from(\"\")\n>>> remove_vowels(String::from(\"abcdef\"))\nString::from(\"bcdf\")\n>>> remove_vowels(String::from(\"aaaaa\"))\nString::from(\"\")\n>>> remove_vowels(String::from(\"aaBAA\"))\nString::from(\"B\")\n>>> remove_vowels(String::from(\"zbcd\"))\nString::from(\"zbcd\")\n"}
{"task_id": "Rust/52", "prompt": "/// Return true if all numbers in the vector l are below threshold t.\n/// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1, 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool {\n", "canonical_solution": "\n    for i in l {\n        if i >= t {\n            return false;\n        }\n    }\n    return true;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_below_threshold() {\n        let candidate = below_threshold;\n        assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n        assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n        assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n        assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n        assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n        assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\n    }\n}\n", "entry_point": "below_threshold", "instruction": "Write an idiomatic Rust function `below_threshold(l: Vec<isize>, t: isize) -> bool` to solve the following problem:\nReturn true if all numbers in the vector l are below threshold t. \n\nIn the following are some examples of how to use the function:\n>>> below_threshold(vec![1, 2, 4, 10], 100)\ntrue\n>>> below_threshold(vec![1, 20, 4, 10], 5)\nfalse\n"}
{"task_id": "Rust/53", "prompt": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n", "canonical_solution": "\n    return x + y;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_add() {\n        let candidate = add;\n        assert_eq!(candidate(0, 1), 1);\n        assert_eq!(candidate(1, 0), 1);\n        assert_eq!(candidate(2, 3), 5);\n        assert_eq!(candidate(5, 7), 12);\n        assert_eq!(candidate(7, 5), 12);\n\n    }\n}\n", "entry_point": "add", "instruction": "Write an idiomatic Rust function `add(x: isize, y: isize) -> isize` to solve the following problem:\nAdd two numbers x and y \n\nIn the following are some examples of how to use the function:\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n"}
{"task_id": "Rust/54", "prompt": "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0: String, s1: String) -> bool {\n", "canonical_solution": "\n    let mut v1:Vec<char> = str1.chars().into_iter().collect();\n    v1.sort();\n    v1.dedup();\n\n    let mut v2:Vec<char> = str2.chars().into_iter().collect();\n    v2.sort();\n    v2.dedup();\n\n    return v1 == v2;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_same_chars() {\n        let candidate = same_chars;\n        assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n        assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabc\")), true);\n        assert_eq!(candidate(String::from(\"dddddddabc\"), String::from(\"abcd\")), true);\n        assert_eq!(candidate(String::from(\"eabcd\"), String::from(\"dddddddabc\")), false);\n        assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabcf\")), false);\n        assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n        assert_eq!(candidate(String::from(\"aabb\"), String::from(\"aaccc\")), false);\n\n    }\n}\n", "entry_point": "same_chars", "instruction": "Write an idiomatic Rust function `same_chars(s0: String, s1: String) -> bool` to solve the following problem:\nCheck if two words have the same characters. \n\nIn the following are some examples of how to use the function:\n>>> same_chars(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\ntrue\n>>> same_chars(String::from(\"abcd\"), String::from(\"dddddddabc\"))\ntrue\n>>> same_chars(String::from(\"dddddddabc\"), String::from(\"abcd\"))\ntrue\n>>> same_chars(String::from(\"eabcd\"), String::from(\"dddddddabc\"))\nfalse\n>>> same_chars(String::from(\"abcd\"), String::from(\"dddddddabce\"))\nfalse\n>>> same_chars(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\nfalse\n"}
{"task_id": "Rust/55", "prompt": "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n/// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n", "canonical_solution": "\n    if n == 0{\n        return 0;\n    }\n    if n == 1{\n        return 1;\n    }\n\n    return fib(n-1) + fib(n-2);\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_fib() {\n        let candidate = fib;\n        assert_eq!(candidate(10), 55);\n        assert_eq!(candidate(1), 1);\n        assert_eq!(candidate(8), 21);\n        assert_eq!(candidate(11), 89);\n        assert_eq!(candidate(12), 144);\n\n    }\n}\n", "entry_point": "fib", "instruction": "Write an idiomatic Rust function `fib(n: isize) -> isize` to solve the following problem:\nReturn n-th Fibonacci number. \n\nIn the following are some examples of how to use the function:\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n"}
{"task_id": "Rust/56", "prompt": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n", "canonical_solution": "\n    let mut level:i32=0;\n\n    for i in 0..bkts.len(){\n\n        if bkts.chars().nth(i).unwrap()== '<' {level+=1;}\n        \n        if bkts.chars().nth(i).unwrap() == '>' {  level-=1;}\n      \n        if level<0 {return false;} \n    }\n    if level!=0 {return false;}\n    return true;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_correct_bracketing() {\n        let candidate = correct_bracketing;\n        assert_eq!(candidate(String::from(\"<>\")), true);\n        assert_eq!(candidate(String::from(\"<<><>>\")), true);\n        assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n        assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n        assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n        assert_eq!(candidate(String::from(\"><<>\")), false);\n        assert_eq!(candidate(String::from(\"<\")), false);\n        assert_eq!(candidate(String::from(\"<<<<\")), false);\n        assert_eq!(candidate(String::from(\">\")), false);\n        assert_eq!(candidate(String::from(\"<<>\")), false);\n        assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n        assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n\n    }\n}\n", "entry_point": "correct_bracketing", "instruction": "Write an idiomatic Rust function `correct_bracketing(brackets: String) -> bool` to solve the following problem:\nbrackets is a string of \"<\" and \">\". return true if every opening bracket has a corresponding closing bracket. \n\nIn the following are some examples of how to use the function:\n>>> correct_bracketing(String::from(\"<\"))\nfalse\n>>> correct_bracketing(String::from(\"<>\"))\ntrue\n>>> correct_bracketing(String::from(\"<<><>>\"))\ntrue\n>>> correct_bracketing(String::from(\"><<>\"))\nfalse\n"}
{"task_id": "Rust/57", "prompt": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n", "canonical_solution": "\n    let mut l1:Vec<i32> = l.clone();\n    let mut l2:Vec<i32> = l.clone();\n    l2.sort(); l2.reverse();\n    l1.sort();\n\n    if  l == l1 || l == l2 {return true}\n    return false;\n\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_monotonic() {\n        let candidate = monotonic;\n        assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n        assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n        assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n        assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n        assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n        assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n        assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n        assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\n    }\n}\n", "entry_point": "monotonic", "instruction": "Write an idiomatic Rust function `monotonic(l: Vec<isize>) -> bool` to solve the following problem:\nReturn true is vector elements are monotonically increasing or decreasing. \n\nIn the following are some examples of how to use the function:\n>>> monotonic(vec![1, 2, 4, 20])\ntrue\n>>> monotonic(vec![1, 20, 4, 10])\nfalse\n>>> monotonic(vec![4, 1, 0, -10])\ntrue\n"}
{"task_id": "Rust/58", "prompt": "/// Return sorted unique common elements for two vectors.\n/// >>> common(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121])\n/// vec![1, 5, 653]\n/// >>> common(vec![5, 3, 2, 8], vec![3, 2])\n/// vec![2, 3]\nfn common(l1: Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n", "canonical_solution": "\nlet mut res:Vec<i32> = l1.into_iter().filter(|n:&i32| l2.contains(n)).collect();\nres.sort();\nreturn res;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_common() {\n        let candidate = common;\n        assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n        assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n        assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n        assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n\n    }\n}\n", "entry_point": "common", "instruction": "Write an idiomatic Rust function `common(l1: Vec<isize>, l2: Vec<isize>) -> Vec<isize>` to solve the following problem:\nReturn sorted unique common elements for two vectors. \n\nIn the following are some examples of how to use the function:\n>>> common(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121])\nvec![1, 5, 653]\n>>> common(vec![5, 3, 2, 8], vec![3, 2])\nvec![2, 3]\n"}
{"task_id": "Rust/59", "prompt": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n", "canonical_solution": "\n    let mut n1 = n.clone();\n    for i in 2.. n1{\n        while n1%i == 0 && n1>i{n1 = n1/i;}\n    }\n    return n1;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_largest_prime_factor() {\n        let candidate = largest_prime_factor;\n        assert_eq!(candidate(15), 5);\n        assert_eq!(candidate(27), 3);\n        assert_eq!(candidate(63), 7);\n        assert_eq!(candidate(330), 11);\n        assert_eq!(candidate(13195), 29);\n\n    }\n}\n", "entry_point": "largest_prime_factor", "instruction": "Write an idiomatic Rust function `largest_prime_factor(n: isize) -> isize` to solve the following problem:\nReturn the largest prime factor of n. Assume n > 1 and is not a prime. \n\nIn the following are some examples of how to use the function:\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n"}
{"task_id": "Rust/60", "prompt": "/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30)\n/// 465\n/// >>> sum_to_n(100)\n/// 5050\n/// >>> sum_to_n(5)\n/// 15\n/// >>> sum_to_n(10)\n/// 55\n/// >>> sum_to_n(1)\n/// 1\nfn sum_to_n(n: isize) -> isize {\n", "canonical_solution": "\n    n*(n+1)/2\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_sum_to_n() {\n        let candidate = sum_to_n;\n        assert_eq!(candidate(1), 1);\n        assert_eq!(candidate(6), 21);\n        assert_eq!(candidate(11), 66);\n        assert_eq!(candidate(30), 465);\n        assert_eq!(candidate(100), 5050);\n\n    }\n}\n", "entry_point": "sum_to_n", "instruction": "Write an idiomatic Rust function `sum_to_n(n: isize) -> isize` to solve the following problem:\nsum_to_n is a function that sums numbers from 1 to n. \n\nIn the following are some examples of how to use the function:\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n"}
{"task_id": "Rust/61", "prompt": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n", "canonical_solution": "\n    let mut level:i32=0;\n\n    for i in 0..bkts.len(){\n\n        if bkts.chars().nth(i).unwrap()== '(' {level+=1;}\n        \n        if bkts.chars().nth(i).unwrap() == ')' {  level-=1;}\n        \n        if level<0 {return false;} \n    }\n    if level!=0 {return false;}\n    return true;\n    }\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_correct_bracketing() {\n        let candidate = correct_bracketing;\n        assert_eq!(candidate(String::from(\"()\")), true);\n        assert_eq!(candidate(String::from(\"(()())\")), true);\n        assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n        assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n        assert_eq!(candidate(String::from(\"((()())))\")), false);\n        assert_eq!(candidate(String::from(\")(()\")), false);\n        assert_eq!(candidate(String::from(\"(\")), false);\n        assert_eq!(candidate(String::from(\"((((\")), false);\n        assert_eq!(candidate(String::from(\")\")), false);\n        assert_eq!(candidate(String::from(\"(()\")), false);\n        assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n        assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n\n    }\n}\n", "entry_point": "correct_bracketing", "instruction": "Write an idiomatic Rust function `correct_bracketing(brackets: String) -> bool` to solve the following problem:\nbrackets is a string of \"(\" and \")\". return true if every opening bracket has a corresponding closing bracket. \n\nIn the following are some examples of how to use the function:\n>>> correct_bracketing(String::from(\"(\"))\nfalse\n>>> correct_bracketing(String::from(\"()\"))\ntrue\n>>> correct_bracketing(String::from(\"(()())\"))\ntrue\n>>> correct_bracketing(String::from(\")(()\"))\nfalse\n"}
{"task_id": "Rust/62", "prompt": "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n/// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1, 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n", "canonical_solution": "\n    let mut res:Vec<i32> =vec![];\n    for i in 1..xs.len(){\n        res.push(i as i32 * xs.get(i).unwrap());\n    }\n    return res;\n\n} \n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_derivative() {\n        let candidate = derivative;\n        assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n        assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n        assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n        assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n        assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\n    }\n}\n", "entry_point": "derivative", "instruction": "Write an idiomatic Rust function `derivative(xs: Vec<isize>) -> Vec<isize>` to solve the following problem:\nxs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same form. \n\nIn the following are some examples of how to use the function:\n>>> derivative(vec![3, 1, 2, 4, 5])\nvec![1, 4, 12, 20]\n>>> derivative(vec![1, 2, 3])\nvec![2, 6]\n"}
{"task_id": "Rust/63", "prompt": "/// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n/// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n/// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>> fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n", "canonical_solution": "\n    if n == 0 || n == 1{\n        return 0;\n    }\n    if n == 2{\n        return 1;\n    }\n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_fibfib() {\n        let candidate = fibfib;\n        assert_eq!(candidate(2), 1);\n        assert_eq!(candidate(1), 0);\n        assert_eq!(candidate(5), 4);\n        assert_eq!(candidate(8), 24);\n        assert_eq!(candidate(10), 81);\n        assert_eq!(candidate(12), 274);\n        assert_eq!(candidate(14), 927);\n\n    }\n}\n", "entry_point": "fibfib", "instruction": "Write an idiomatic Rust function `fibfib(n: isize) -> isize` to solve the following problem:\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Please write a function to efficiently compute the n-th element of the fibfib number sequence. \n\nIn the following are some examples of how to use the function:\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n"}
{"task_id": "Rust/64", "prompt": "/// Write a function vowels_count which takes a string representing\n/// a word as input and returns the number of vowels in the string.\n/// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s: String) -> isize {\n", "canonical_solution": "\n    let vowels:&str = \"aeiouAEIOU\";\n    let mut count:i32 = 0;\n\n    for i in 0..s.len() {\n       let c:char = s.chars().nth(i).unwrap();\n       if vowels.contains(c){\n        count += 1;\n       } \n    }\n    if s.chars().nth(s.len() -1).unwrap() == 'y' || s.chars().nth(s.len() -1).unwrap() == 'Y' {count+=1;}\n\n    return count;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_vowels_count() {\n        let candidate = vowels_count;\n        assert_eq!(candidate(String::from(\"abcde\")), 2);\n        assert_eq!(candidate(String::from(\"Alone\")), 3);\n        assert_eq!(candidate(String::from(\"key\")), 2);\n        assert_eq!(candidate(String::from(\"bye\")), 1);\n        assert_eq!(candidate(String::from(\"keY\")), 2);\n        assert_eq!(candidate(String::from(\"bYe\")), 1);\n        assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n\n    }\n}\n", "entry_point": "vowels_count", "instruction": "Write an idiomatic Rust function `vowels_count(s: String) -> isize` to solve the following problem:\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the end of the given word. Example: \n\nIn the following are some examples of how to use the function:\n>>> vowels_count(String::from(\"abcde\"))\n2\n>>> vowels_count(String::from(\"ACEDY\"))\n3\n"}
{"task_id": "Rust/65", "prompt": "/// Circular shift the digits of the integer x, shift the digits right by shift\n/// and return the result as a string.\n/// If shift > number of digits, return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x: isize, shift: isize) -> String {\n", "canonical_solution": "\n    let mut xcp:Vec<char> = x.to_string().chars().into_iter().collect();\n    let mut res:Vec<char> = x.to_string().chars().into_iter().collect();\n\n    for (indx,c) in xcp.iter().enumerate(){\n    let despl =  (indx as i32 + shift) % x.to_string().len() as i32;\n    replace(&mut res[despl as usize], *c);\n    }\n\n   return res.into_iter().collect();\n\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_circular_shift() {\n        let candidate = circular_shift;\n        assert_eq!(candidate(100, 2), String::from(\"001\"));\n        assert_eq!(candidate(12, 2), String::from(\"12\"));\n        assert_eq!(candidate(97, 8), String::from(\"79\"));\n        assert_eq!(candidate(12, 1), String::from(\"21\"));\n        assert_eq!(candidate(11, 101), String::from(\"11\"));\n\n    }\n}\n", "entry_point": "circular_shift", "instruction": "Write an idiomatic Rust function `circular_shift(x: isize, shift: isize) -> String` to solve the following problem:\nCircular shift the digits of the integer x, shift the digits right by shift and return the result as a string. If shift > number of digits, return digits reversed. \n\nIn the following are some examples of how to use the function:\n>>> circular_shift(12, 1)\nString::from(\"21\")\n>>> circular_shift(12, 2)\nString::from(\"12\")\n"}
{"task_id": "Rust/66", "prompt": "/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digit_sum(String::from(\"\"))\n/// 0\n/// >>> digit_sum(String::from(\"abAB\"))\n/// 131\n/// >>> digit_sum(String::from(\"abcCd\"))\n/// 67\n/// >>> digit_sum(String::from(\"helloE\"))\n/// 69\n/// >>> digit_sum(String::from(\"woArBld\"))\n/// 131\n/// >>> digit_sum(String::from(\"aAaaaXa\"))\n/// 153\nfn digit_sum(s: String) -> isize {\n", "canonical_solution": "\n    return s.chars().into_iter().filter(|c:&char| c.is_uppercase()).map(|c:char| c as i32).sum();\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_digit_sum() {\n        let candidate = digit_sum;\n        assert_eq!(candidate(String::from(\"\")), 0);\n        assert_eq!(candidate(String::from(\"abAB\")), 131);\n        assert_eq!(candidate(String::from(\"abcCd\")), 67);\n        assert_eq!(candidate(String::from(\"helloE\")), 69);\n        assert_eq!(candidate(String::from(\"woArBld\")), 131);\n        assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n        assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n        assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\n    }\n}\n", "entry_point": "digit_sum", "instruction": "Write an idiomatic Rust function `digit_sum(s: String) -> isize` to solve the following problem:\nTask Write a function that takes a string as input and returns the sum of the upper characters only' ASCII codes. \n\nIn the following are some examples of how to use the function:\n>>> digit_sum(String::from(\"\"))\n0\n>>> digit_sum(String::from(\"abAB\"))\n131\n>>> digit_sum(String::from(\"abcCd\"))\n67\n>>> digit_sum(String::from(\"helloE\"))\n69\n>>> digit_sum(String::from(\"woArBld\"))\n131\n>>> digit_sum(String::from(\"aAaaaXa\"))\n153\n"}
{"task_id": "Rust/67", "prompt": "/// In this task, you will be given a string that represents a number of apples and oranges \n/// that are distributed in a basket of fruit this basket contains \n/// apples, oranges, and mango fruits. Given the string that represents the total number of \n/// the oranges and apples and an integer that represent the total number of the fruits \n/// in the basket return the number of the mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n: isize) -> isize {\n", "canonical_solution": "\n    let sub:i32 = s.split_ascii_whitespace().into_iter().filter(|c| c.parse::<i32>().is_ok()).map(|c| c.parse::<i32>().unwrap()).sum();\n    return n-sub;\n}\n\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_fruit_distribution() {\n        let candidate = fruit_distribution;\n        assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n        assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n        assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n        assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n        assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n        assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n        assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n\n    }\n}\n", "entry_point": "fruit_distribution", "instruction": "Write an idiomatic Rust function `fruit_distribution(s: String, n: isize) -> isize` to solve the following problem:\nIn this task, you will be given a string that represents a number of apples and oranges  that are distributed in a basket of fruit this basket contains  apples, oranges, and mango fruits. Given the string that represents the total number of  the oranges and apples and an integer that represent the total number of the fruits  in the basket return the number of the mango fruits in the basket. for examble: \n\nIn the following are some examples of how to use the function:\n>>> fruit_distribution(String::from(\"5 apples and 6 oranges\"), 19)\n8\n>>> fruit_distribution(String::from(\"0 apples and 1 oranges\"), 3)\n2\n>>> fruit_distribution(String::from(\"2 apples and 3 oranges\"), 100)\n95\n>>> fruit_distribution(String::from(\"100 apples and 1 oranges\"), 120)\n19\n"}
{"task_id": "Rust/68", "prompt": "/// \"Given a vector representing a branch of a tree that has non-negative integer nodes\n/// your task is to pluck one of the nodes and return it.\n/// The plucked node should be the node with the smallest even value.\n/// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n/// The plucked node should be returned in a vector, [ smalest_value, its index ],\n/// If there are no even values or the given vector is empty, return [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n/// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n/// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n/// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n/// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>) -> Vec<isize> {\n", "canonical_solution": "\n    let mut out:Vec<i32> = vec![];\n\n    for i in 0.. arr.len(){\n        if arr[i]%2 == 0 && (out.len() == 0 || arr[i]<out[0]){\n        out = vec![arr[i], i as i32];\n        }\n       \n    }\n    return out;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_pluck() {\n        let candidate = pluck;\n        assert_eq!(candidate(vec![4, 2, 3]), vec![2, 1]);\n        assert_eq!(candidate(vec![1, 2, 3]), vec![2, 1]);\n        assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n        assert_eq!(candidate(vec![5, 0, 3, 0, 4, 2]), vec![0, 1]);\n        assert_eq!(candidate(vec![1, 2, 3, 0, 5, 3]), vec![0, 3]);\n        assert_eq!(candidate(vec![5, 4, 8, 4, 8]), vec![4, 1]);\n        assert_eq!(candidate(vec![7, 6, 7, 1]), vec![6, 1]);\n        assert_eq!(candidate(vec![7, 9, 7, 1]), Vec::<isize>::new());\n\n    }\n}\n", "entry_point": "pluck", "instruction": "Write an idiomatic Rust function `pluck(arr: Vec<isize>) -> Vec<isize>` to solve the following problem:\n\"Given a vector representing a branch of a tree that has non-negative integer nodes your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index. The plucked node should be returned in a vector, [ smalest_value, its index ], If there are no even values or the given vector is empty, return []. Example 1: \n\nIn the following are some examples of how to use the function:\n>>> pluck(vec![4, 2, 3])\nvec![2, 1]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\nExample 2:\n>>> pluck(vec![1, 2, 3])\nvec![2, 1]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\nExample 3:\n>>> pluck(vec![])\nVec::<isize>::new()\nExample 4:\n>>> pluck(vec![5, 0, 3, 0, 4, 2])\nvec![0, 1]\nExplanation: 0 is the smallest value, but  there are two zeros,\nso we will choose the first zero, which has the smallest index.\nConstraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value\n"}
{"task_id": "Rust/69", "prompt": "/// You are given a non-empty vector of positive integers. Return the greatest integer that is greater than \n/// zero, and has a frequency greater than or equal to the value of the integer itself. \n/// The frequency of an integer is the number of times it appears in the vector.\n/// If no such a value exist, return -1.\n/// Examples:\n/// >>> search(vec![4, 1, 2, 2, 3, 1])\n/// 2\n/// >>> search(vec![1, 2, 2, 3, 3, 3, 4, 4, 4])\n/// 3\n/// >>> search(vec![5, 5, 4, 4, 4])\n/// -1\nfn search(lst: Vec<isize>) -> isize {\n", "canonical_solution": "\n    let mut freq: Vec<Vec<i32>> = Vec::new();\n    let mut max = -1;\n    for i in 0..lst.len() {\n        let mut has = false;\n        for j in 0..freq.len() {\n            if lst[i] == freq[j][0] {\n                freq[j][1] += 1;\n                has = true;\n                if freq[j][1] >= freq[j][0] && freq[j][0] > max {\n                    max = freq[j][0];\n                }\n            }\n        }\n        if !has {\n            freq.push(vec![lst[i], 1]);\n            if max == -1 && lst[i] == 1 {\n                max = 1;\n            }\n        }\n    }\n    return max;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_search() {\n        let candidate = search;\n        assert_eq!(candidate(vec![5, 5, 5, 5, 1]), 1);\n        assert_eq!(candidate(vec![4, 1, 4, 1, 4, 4]), 4);\n        assert_eq!(candidate(vec![3, 3]), -1);\n        assert_eq!(candidate(vec![8, 8, 8, 8, 8, 8, 8, 8]), 8);\n        assert_eq!(candidate(vec![2, 3, 3, 2, 2]), 2);\n        assert_eq!(candidate(vec![2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]), 1);\n        assert_eq!(candidate(vec![3, 2, 8, 2]), 2);\n        assert_eq!(candidate(vec![6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]), 1);\n        assert_eq!(candidate(vec![8, 8, 3, 6, 5, 6, 4]), -1);\n        assert_eq!(candidate(vec![6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]), 1);\n        assert_eq!(candidate(vec![1, 9, 10, 1, 3]), 1);\n        assert_eq!(candidate(vec![6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]), 5);\n        assert_eq!(candidate(vec![1]), 1);\n        assert_eq!(candidate(vec![8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]), 4);\n        assert_eq!(candidate(vec![2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]), 2);\n        assert_eq!(candidate(vec![1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]), 1);\n        assert_eq!(candidate(vec![9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]), 4);\n        assert_eq!(candidate(vec![2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]), 4);\n        assert_eq!(candidate(vec![9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]), 2);\n        assert_eq!(candidate(vec![5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]), -1);\n        assert_eq!(candidate(vec![10]), -1);\n        assert_eq!(candidate(vec![9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]), 2);\n        assert_eq!(candidate(vec![5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]), 1);\n        assert_eq!(candidate(vec![7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]), 1);\n        assert_eq!(candidate(vec![3, 10, 10, 9, 2]), -1);\n\n    }\n}\n", "entry_point": "search", "instruction": "Write an idiomatic Rust function `search(lst: Vec<isize>) -> isize` to solve the following problem:\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than  zero, and has a frequency greater than or equal to the value of the integer itself.  The frequency of an integer is the number of times it appears in the vector. If no such a value exist, return -1. \n\nIn the following are some examples of how to use the function:\n>>> search(vec![4, 1, 2, 2, 3, 1])\n2\n>>> search(vec![1, 2, 2, 3, 3, 3, 4, 4, 4])\n3\n>>> search(vec![5, 5, 4, 4, 4])\n-1\n"}
{"task_id": "Rust/70", "prompt": "/// Given vector of integers, return vector in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1, 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n/// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\nfn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n", "canonical_solution": "\n    let mut cp:Vec<i32> = lst.clone();\n    let mut res:Vec<i32> = vec![];\n\n    for (indx, _) in lst.iter().enumerate(){\n        if indx%2 == 1 {\n            let max:i32 = *cp.iter().max().unwrap();\n            res.push(max);\n            cp.remove(cp.iter().position(|x| *x == max).unwrap());\n        }\n        else{\n            let min:i32 = *cp.iter().min().unwrap();\n            res.push(min);\n            cp.remove(cp.iter().position(|x| *x == min).unwrap());\n        }\n    }\n    return res;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_strange_sort_list() {\n        let candidate = strange_sort_list;\n        assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n        assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n        assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n        assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n        assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n        assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n        assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n        assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n        assert_eq!(candidate(vec![111111]), vec![111111]);\n\n    }\n}\n", "entry_point": "strange_sort_list", "instruction": "Write an idiomatic Rust function `strange_sort_list(lst: Vec<isize>) -> Vec<isize>` to solve the following problem:\nGiven vector of integers, return vector in strange order. Strange sorting, is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on. \n\nIn the following are some examples of how to use the function:\n>>> strange_sort_list(vec![1, 2, 3, 4])\nvec![1, 4, 2, 3]\n>>> strange_sort_list(vec![5, 5, 5, 5])\nvec![5, 5, 5, 5]\n>>> strange_sort_list(vec![])\nVec::<isize>::new()\n"}
{"task_id": "Rust/71", "prompt": "/// Given the lengths of the three sides of a triangle. Return the area of\n/// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when the sum of any two sides is greater \n/// than the third side.\n/// Example:\n/// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n/// -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n", "canonical_solution": "\n    if a+b<=c || a+c<=b || b+c<=a {return -1.0;}\n    let h:f64=(a+b+c) / 2.0;\n    let mut area:f64;\n    area = f64::powf(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_triangle_area() {\n        let candidate = triangle_area;\n        assert_eq!(candidate(3, 4, 5), 6.0);\n        assert_eq!(candidate(1, 2, 10), -1.0);\n        assert_eq!(candidate(4, 8, 5), 8.18);\n        assert_eq!(candidate(2, 2, 2), 1.73);\n        assert_eq!(candidate(1, 2, 3), -1.0);\n        assert_eq!(candidate(10, 5, 7), 16.25);\n        assert_eq!(candidate(2, 6, 3), -1.0);\n        assert_eq!(candidate(1, 1, 1), 0.43);\n        assert_eq!(candidate(2, 2, 10), -1.0);\n\n    }\n}\n", "entry_point": "triangle_area", "instruction": "Write an idiomatic Rust function `triangle_area(a: isize, b: isize, c: isize) -> f64` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle.  Otherwise return -1 Three sides make a valid triangle when the sum of any two sides is greater  than the third side. Example: \n\nIn the following are some examples of how to use the function:\n>>> triangle_area(3, 4, 5)\n6.0\n>>> triangle_area(1, 2, 10)\n-1.0\n"}
{"task_id": "Rust/72", "prompt": "/// Write a function that returns true if the object q will fly, and false otherwise.\n/// The object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n/// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>> will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n/// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n/// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool {\n", "canonical_solution": "\n    if q.iter().sum::<i32>() > w {\n        return false;\n    }\n    let mut i = 0;\n    let mut j = q.len() - 1;\n\n    while i < j {\n        if q[i] != q[j] {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_will_it_fly() {\n        let candidate = will_it_fly;\n        assert_eq!(candidate(vec![3, 2, 3], 9), true);\n        assert_eq!(candidate(vec![1, 2], 5), false);\n        assert_eq!(candidate(vec![3], 5), true);\n        assert_eq!(candidate(vec![3, 2, 3], 1), false);\n        assert_eq!(candidate(vec![1, 2, 3], 6), false);\n        assert_eq!(candidate(vec![5], 5), true);\n\n    }\n}\n", "entry_point": "will_it_fly", "instruction": "Write an idiomatic Rust function `will_it_fly(q: Vec<isize>, w: isize) -> bool` to solve the following problem:\nWrite a function that returns true if the object q will fly, and false otherwise. The object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w. Example: \n\nIn the following are some examples of how to use the function:\n>>> will_it_fly(vec![1, 2], 5)\nfalse\n# 1+2 is less than the maximum possible weight, but it's unbalanced.\n>>> will_it_fly(vec![3, 2, 3], 1)\nfalse\n# it's balanced, but 3+2+3 is more than the maximum possible weight.\n>>> will_it_fly(vec![3, 2, 3], 9)\ntrue\n# 3+2+3 is less than the maximum possible weight, and it's balanced.\n>>> will_it_fly(vec![3], 5)\ntrue\n# 3 is less than the maximum possible weight, and it's balanced.\n"}
{"task_id": "Rust/73", "prompt": "/// Given a vector arr of integers, find the minimum number of elements that\n/// need to be changed to make the vector palindromic. A palindromic vector is a vector that\n/// is read the same backwards and forwards. In one change, you can change one element to any other element.\n/// For example:\n/// >>> smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1, 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n/// 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n", "canonical_solution": "\n    let mut ans: i32 = 0;\n    for i in 0..arr.len() / 2 {\n        if arr[i] != arr[arr.len() - i - 1] {\n            ans += 1\n        }\n    }\n    return ans;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_smallest_change() {\n        let candidate = smallest_change;\n        assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n        assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n        assert_eq!(candidate(vec![1, 4, 2]), 1);\n        assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n        assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n        assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n        assert_eq!(candidate(vec![1]), 0);\n        assert_eq!(candidate(vec![0, 1]), 1);\n\n    }\n}\n", "entry_point": "smallest_change", "instruction": "Write an idiomatic Rust function `smallest_change(arr: Vec<isize>) -> isize` to solve the following problem:\nGiven a vector arr of integers, find the minimum number of elements that need to be changed to make the vector palindromic. A palindromic vector is a vector that is read the same backwards and forwards. In one change, you can change one element to any other element. \n\nIn the following are some examples of how to use the function:\n>>> smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n4\n>>> smallest_change(vec![1, 2, 3, 4, 3, 2, 2])\n1\n>>> smallest_change(vec![1, 2, 3, 2, 1])\n0\n"}
{"task_id": "Rust/74", "prompt": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n", "canonical_solution": "\n    let total_1: usize = lst1\n        .iter()\n        .fold(0, |acc: usize, str: &&str| acc + str.chars().count());\n    let total_2: usize = lst2\n        .iter()\n        .fold(0, |acc: usize, str: &&str| acc + str.chars().count());\n\n    if total_1 <= total_2 {\n        return lst1.into_iter().map(|x| x.to_string()).collect();\n    } else {\n        return lst2.into_iter().map(|x| x.to_string()).collect();\n    }\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_total_match() {\n        let candidate = total_match;\n        assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n        assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n        assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n        assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n        assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n        assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n        assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n        assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n        assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n\n    }\n}\n", "entry_point": "total_match", "instruction": "Write an idiomatic Rust function `total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>` to solve the following problem:\nWrite a function that accepts two vectors of strings and returns the vector that has  total number of chars in the all strings of the vector less than the other vector. if the two vectors have the same number of chars, return the first vector. \n\nIn the following are some examples of how to use the function:\n>>> total_match(vec![], vec![])\nVec::<String>::new()\n>>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\nvec![String::from(\"hI\"), String::from(\"Hi\")]\n>>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\nvec![String::from(\"hi\"), String::from(\"admin\")]\n>>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\nvec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n>>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\nvec![String::from(\"4\")]\n"}
{"task_id": "Rust/75", "prompt": "/// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool {\n", "canonical_solution": "\n    let mut a1 = a;\n    let mut num = 0;\n    for i in 2..a {\n        while a1 % i == 0 && a1 > i {\n            a1 /= i;\n            num += 1;\n        }\n    }\n    if num == 2 {\n        return true;\n    }\n    return false;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_is_multiply_prime() {\n        let candidate = is_multiply_prime;\n        assert_eq!(candidate(5), false);\n        assert_eq!(candidate(30), true);\n        assert_eq!(candidate(8), true);\n        assert_eq!(candidate(10), false);\n        assert_eq!(candidate(125), true);\n        assert_eq!(candidate(105), true);\n        assert_eq!(candidate(126), false);\n        assert_eq!(candidate(729), false);\n        assert_eq!(candidate(891), false);\n        assert_eq!(candidate(1001), true);\n\n    }\n}\n", "entry_point": "is_multiply_prime", "instruction": "Write an idiomatic Rust function `is_multiply_prime(a: isize) -> bool` to solve the following problem:\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers and false otherwise. Knowing that (a) is less then 100.  Example: \n\nIn the following are some examples of how to use the function:\n>>> is_multiply_prime(30)\ntrue\n30 = 2 * 3 * 5\n"}
{"task_id": "Rust/76", "prompt": "/// Your task is to write a function that returns true if a number x is a simple\n/// power of n and false in other cases.\n/// x is a simple power of n if n**int=x\n/// For example:\n/// >>> is_simple_power(1, 4)\n/// true\n/// >>> is_simple_power(2, 2)\n/// true\n/// >>> is_simple_power(8, 2)\n/// true\n/// >>> is_simple_power(3, 2)\n/// false\n/// >>> is_simple_power(3, 1)\n/// false\n/// >>> is_simple_power(5, 3)\n/// false\nfn is_simple_power(x: isize, n: isize) -> bool {\n", "canonical_solution": "\n    let mut p: i32 = 1;\n    let mut count: i32 = 0;\n\n    while p <= x && count < 100 {\n        if p == x {\n            return true;\n        };\n        p = p * n;\n        count += 1;\n    }\n    return false;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_is_simple_power() {\n        let candidate = is_simple_power;\n        assert_eq!(candidate(16, 2), true);\n        assert_eq!(candidate(143214, 16), false);\n        assert_eq!(candidate(4, 2), true);\n        assert_eq!(candidate(9, 3), true);\n        assert_eq!(candidate(16, 4), true);\n        assert_eq!(candidate(24, 2), false);\n        assert_eq!(candidate(128, 4), false);\n        assert_eq!(candidate(12, 6), false);\n        assert_eq!(candidate(1, 1), true);\n        assert_eq!(candidate(1, 12), true);\n\n    }\n}\n", "entry_point": "is_simple_power", "instruction": "Write an idiomatic Rust function `is_simple_power(x: isize, n: isize) -> bool` to solve the following problem:\nYour task is to write a function that returns true if a number x is a simple power of n and false in other cases. x is a simple power of n if n**int=x \n\nIn the following are some examples of how to use the function:\n>>> is_simple_power(1, 4)\ntrue\n>>> is_simple_power(2, 2)\ntrue\n>>> is_simple_power(8, 2)\ntrue\n>>> is_simple_power(3, 2)\nfalse\n>>> is_simple_power(3, 1)\nfalse\n>>> is_simple_power(5, 3)\nfalse\n"}
{"task_id": "Rust/77", "prompt": "/// Write a function that takes an integer a and returns true \n/// if this ingeger is a cube of some integer number.\n/// Note: you may assume the input is always valid.\n/// Examples:\n/// >>> is_cube(1)\n/// true\n/// >>> is_cube(2)\n/// false\n/// >>> is_cube(-1)\n/// true\n/// >>> is_cube(64)\n/// true\n/// >>> is_cube(0)\n/// true\n/// >>> is_cube(180)\n/// false\nfn is_cube(a: isize) -> bool {\n", "canonical_solution": "\n    let a1: f64 = i32::abs(a) as f64;\n    let sqrt_3 = f64::powf(a1, 1.0 / 3.0).ceil();\n\n    return i32::pow(sqrt_3 as i32, 3) == a1 as i32;\n}\n\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_is_cube() {\n        let candidate = is_cube;\n        assert_eq!(candidate(1), true);\n        assert_eq!(candidate(2), false);\n        assert_eq!(candidate(-1), true);\n        assert_eq!(candidate(64), true);\n        assert_eq!(candidate(180), false);\n        assert_eq!(candidate(1000), true);\n        assert_eq!(candidate(0), true);\n        assert_eq!(candidate(1729), false);\n\n    }\n}\n", "entry_point": "is_cube", "instruction": "Write an idiomatic Rust function `is_cube(a: isize) -> bool` to solve the following problem:\nWrite a function that takes an integer a and returns true  if this ingeger is a cube of some integer number. Note: you may assume the input is always valid. \n\nIn the following are some examples of how to use the function:\n>>> is_cube(1)\ntrue\n>>> is_cube(2)\nfalse\n>>> is_cube(-1)\ntrue\n>>> is_cube(64)\ntrue\n>>> is_cube(0)\ntrue\n>>> is_cube(180)\nfalse\n"}
{"task_id": "Rust/78", "prompt": "/// You have been tasked to write a function that receives \n/// a hexadecimal number as a string and counts the number of hexadecimal \n/// digits that are primes (prime number, or a prime, is a natural number \n/// greater than 1 that is not a product of two smaller natural numbers).\n/// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F are always uppercase.\n/// Examples:\n/// >>> hex_key(String::from(\"AB\"))\n/// 1\n/// >>> hex_key(String::from(\"1077E\"))\n/// 2\n/// >>> hex_key(String::from(\"ABED1A33\"))\n/// 4\n/// >>> hex_key(String::from(\"123456789ABCDEF0\"))\n/// 6\n/// >>> hex_key(String::from(\"2020\"))\n/// 2\nfn hex_key(num: String) -> isize {\n", "canonical_solution": "\n    let primes: Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut total: i32 = 0;\n    for i in 0..num.len() {\n        if primes.contains(&num.get(i..i + 1).unwrap()) {\n            total += 1;\n        }\n    }\n    return total;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_hex_key() {\n        let candidate = hex_key;\n        assert_eq!(candidate(String::from(\"AB\")), 1);\n        assert_eq!(candidate(String::from(\"1077E\")), 2);\n        assert_eq!(candidate(String::from(\"ABED1A33\")), 4);\n        assert_eq!(candidate(String::from(\"2020\")), 2);\n        assert_eq!(candidate(String::from(\"123456789ABCDEF0\")), 6);\n        assert_eq!(candidate(String::from(\"112233445566778899AABBCCDDEEFF00\")), 12);\n\n    }\n}\n", "entry_point": "hex_key", "instruction": "Write an idiomatic Rust function `hex_key(num: String) -> isize` to solve the following problem:\nYou have been tasked to write a function that receives  a hexadecimal number as a string and counts the number of hexadecimal  digits that are primes (prime number, or a prime, is a natural number  greater than 1 that is not a product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 2, 3, 5, 7,  B (=decimal 11), D (=decimal 13). Note: you may assume the input is always correct or empty string,  and symbols A,B,C,D,E,F are always uppercase. \n\nIn the following are some examples of how to use the function:\n>>> hex_key(String::from(\"AB\"))\n1\n>>> hex_key(String::from(\"1077E\"))\n2\n>>> hex_key(String::from(\"ABED1A33\"))\n4\n>>> hex_key(String::from(\"123456789ABCDEF0\"))\n6\n>>> hex_key(String::from(\"2020\"))\n2\n"}
{"task_id": "Rust/79", "prompt": "/// You will be given a number in decimal form and your task is to convert it to\n/// binary format. The function should return a string, with each character representing a binary\n/// number. Each character in the string will be '0' or '1'.\n/// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n/// The extra characters are there to help with the format.\n/// Examples:\n/// >>> decimal_to_binary(15)\n/// String::from(\"db1111db\")\n/// >>> decimal_to_binary(32)\n/// String::from(\"db100000db\")\nfn decimal_to_binary(decimal: isize) -> String {\n", "canonical_solution": "\n    let mut d_cp = decimal;\n    let mut out: String = String::from(\"\");\n    if d_cp == 0 {\n        return \"db0db\".to_string();\n    }\n    while d_cp > 0 {\n        out = (d_cp % 2).to_string() + &out;\n        d_cp = d_cp / 2;\n    }\n    out = \"db\".to_string() + &out + &\"db\".to_string();\n    return out;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_decimal_to_binary() {\n        let candidate = decimal_to_binary;\n        assert_eq!(candidate(0), String::from(\"db0db\"));\n        assert_eq!(candidate(32), String::from(\"db100000db\"));\n        assert_eq!(candidate(103), String::from(\"db1100111db\"));\n        assert_eq!(candidate(15), String::from(\"db1111db\"));\n\n    }\n}\n", "entry_point": "decimal_to_binary", "instruction": "Write an idiomatic Rust function `decimal_to_binary(decimal: isize) -> String` to solve the following problem:\nYou will be given a number in decimal form and your task is to convert it to binary format. The function should return a string, with each character representing a binary number. Each character in the string will be '0' or '1'. There will be an extra couple of characters 'db' at the beginning and at the end of the string. The extra characters are there to help with the format. \n\nIn the following are some examples of how to use the function:\n>>> decimal_to_binary(15)\nString::from(\"db1111db\")\n>>> decimal_to_binary(32)\nString::from(\"db100000db\")\n"}
{"task_id": "Rust/80", "prompt": "/// You are given a string s.\n/// Your task is to check if the string is haprs or not.\n/// A string is haprs if its length is at least 3 and every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(String::from(\"a\"))\n/// false\n/// >>> is_happy(String::from(\"aa\"))\n/// false\n/// >>> is_happy(String::from(\"abcd\"))\n/// true\n/// >>> is_happy(String::from(\"aabb\"))\n/// false\n/// >>> is_happy(String::from(\"adb\"))\n/// true\n/// >>> is_happy(String::from(\"xyy\"))\n/// false\nfn is_happy(s: String) -> bool {\n", "canonical_solution": "\n    let str: Vec<char> = s.chars().into_iter().collect();\n    if str.len() < 3 {\n        return false;\n    }\n    for i in 2..str.len() {\n        if str[i] == str[i - 1] || str[i] == str[i - 2] {\n            return false;\n        }\n    }\n    return true;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_is_happy() {\n        let candidate = is_happy;\n        assert_eq!(candidate(String::from(\"a\")), false);\n        assert_eq!(candidate(String::from(\"aa\")), false);\n        assert_eq!(candidate(String::from(\"abcd\")), true);\n        assert_eq!(candidate(String::from(\"aabb\")), false);\n        assert_eq!(candidate(String::from(\"adb\")), true);\n        assert_eq!(candidate(String::from(\"xyy\")), false);\n        assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n        assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n\n    }\n}\n", "entry_point": "is_happy", "instruction": "Write an idiomatic Rust function `is_happy(s: String) -> bool` to solve the following problem:\nYou are given a string s. Your task is to check if the string is haprs or not. A string is haprs if its length is at least 3 and every 3 consecutive letters are distinct \n\nIn the following are some examples of how to use the function:\n>>> is_happy(String::from(\"a\"))\nfalse\n>>> is_happy(String::from(\"aa\"))\nfalse\n>>> is_happy(String::from(\"abcd\"))\ntrue\n>>> is_happy(String::from(\"aabb\"))\nfalse\n>>> is_happy(String::from(\"adb\"))\ntrue\n>>> is_happy(String::from(\"xyy\"))\nfalse\n"}
{"task_id": "Rust/81", "prompt": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n", "canonical_solution": "\n    let mut res: Vec<String> = vec![];\n    for (i, gpa) in grades.iter().enumerate() {\n        if gpa == &4.0 {\n            res.push(\"A+\".to_string());\n        } else if gpa > &3.7 {\n            res.push(\"A\".to_string());\n        } else if gpa > &3.3 {\n            res.push(\"A-\".to_string());\n        } else if gpa > &3.0 {\n            res.push(\"B+\".to_string());\n        } else if gpa > &2.7 {\n            res.push(\"B\".to_string());\n        } else if gpa > &2.3 {\n            res.push(\"B-\".to_string());\n        } else if gpa > &2.0 {\n            res.push(\"C+\".to_string());\n        } else if gpa > &1.7 {\n            res.push(\"C\".to_string());\n        } else if gpa > &1.3 {\n            res.push(\"C-\".to_string());\n        } else if gpa > &1.0 {\n            res.push(\"D+\".to_string());\n        } else if gpa > &0.7 {\n            res.push(\"D\".to_string());\n        } else if gpa > &0.0 {\n            res.push(\"D-\".to_string());\n        } else {\n            res.push(\"E\".to_string());\n        }\n    }\n    return res;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_numerical_letter_grade() {\n        let candidate = numerical_letter_grade;\n        assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n        assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n        assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n        assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n        assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n        assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n\n    }\n}\n", "entry_point": "numerical_letter_grade", "instruction": "Write an idiomatic Rust function `numerical_letter_grade(grades: Vec<f64>) -> Vec<String>` to solve the following problem:\nIt is the last week of the semester and the teacher has to give the grades to students. The teacher has been making her own algorithm for grading. The only problem is, she has lost the code she used for grading. She has given you a vector of GPAs for some students and you have to write  a function that can output a vector of letter grades using the following table: GPA       |    Letter grade 4.0                A+ > 3.7                A  > 3.3                A-  > 3.0                B+ > 2.7                B  > 2.3                B- > 2.0                C+ > 1.7                C > 1.3                C- > 1.0                D+  > 0.7                D  > 0.0                D- 0.0                E Example: \n\nIn the following are some examples of how to use the function:\n>>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\nvec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\n"}
{"task_id": "Rust/82", "prompt": "/// Write a function that takes a string and returns true if the string\n/// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(String::from(\"Hello\"))\n/// true\n/// >>> prime_length(String::from(\"abcdcba\"))\n/// true\n/// >>> prime_length(String::from(\"kittens\"))\n/// true\n/// >>> prime_length(String::from(\"orange\"))\n/// false\nfn prime_length(string: String) -> bool {\n", "canonical_solution": "\n    let l: usize = str.len();\n    if l == 0 || l == 1 {\n        return false;\n    }\n\n    for i in 2..l {\n        if l % i == 0 {\n            return false;\n        }\n    }\n    return true;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_prime_length() {\n        let candidate = prime_length;\n        assert_eq!(candidate(String::from(\"Hello\")), true);\n        assert_eq!(candidate(String::from(\"abcdcba\")), true);\n        assert_eq!(candidate(String::from(\"kittens\")), true);\n        assert_eq!(candidate(String::from(\"orange\")), false);\n        assert_eq!(candidate(String::from(\"wow\")), true);\n        assert_eq!(candidate(String::from(\"world\")), true);\n        assert_eq!(candidate(String::from(\"MadaM\")), true);\n        assert_eq!(candidate(String::from(\"Wow\")), true);\n        assert_eq!(candidate(String::from(\"\")), false);\n        assert_eq!(candidate(String::from(\"HI\")), true);\n        assert_eq!(candidate(String::from(\"go\")), true);\n        assert_eq!(candidate(String::from(\"gogo\")), false);\n        assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")), false);\n        assert_eq!(candidate(String::from(\"Madam\")), true);\n        assert_eq!(candidate(String::from(\"M\")), false);\n        assert_eq!(candidate(String::from(\"0\")), false);\n\n    }\n}\n", "entry_point": "prime_length", "instruction": "Write an idiomatic Rust function `prime_length(string: String) -> bool` to solve the following problem:\nWrite a function that takes a string and returns true if the string length is a prime number or false otherwise \n\nIn the following are some examples of how to use the function:\n>>> prime_length(String::from(\"Hello\"))\ntrue\n>>> prime_length(String::from(\"abcdcba\"))\ntrue\n>>> prime_length(String::from(\"kittens\"))\ntrue\n>>> prime_length(String::from(\"orange\"))\nfalse\n"}
{"task_id": "Rust/83", "prompt": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n", "canonical_solution": "\n    if n == 1 {\n        return 1;\n    };\n    return 18 * i32::pow(10, (n - 2) as u32);\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_starts_one_ends() {\n        let candidate = starts_one_ends;\n        assert_eq!(candidate(1), 1);\n        assert_eq!(candidate(2), 18);\n        assert_eq!(candidate(3), 180);\n        assert_eq!(candidate(4), 1800);\n        assert_eq!(candidate(5), 18000);\n\n    }\n}\n", "entry_point": "starts_one_ends", "instruction": "Write an idiomatic Rust function `starts_one_ends(n: isize) -> isize` to solve the following problem:\nGiven a positive integer n, return the count of the numbers of n-digit positive integers that start or end with 1. "}
{"task_id": "Rust/84", "prompt": "/// Given a positive integer n, return the total sum of its digits in binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>> solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"1100\")\n/// Variables:\n/// @n integer\n/// Constraints: 0 ≤ n ≤ 10000.\n/// Output:\n/// a string of binary number\nfn solve(n: isize) -> String {\n", "canonical_solution": "\n    let sum: i32 = n\n        .to_string()\n        .chars()\n        .into_iter()\n        .fold(0, |acc, c| acc + c.to_digit(10).unwrap() as i32);\n    return format!(\"{sum:b}\");\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_solve() {\n        let candidate = solve;\n        assert_eq!(candidate(1000), String::from(\"1\"));\n        assert_eq!(candidate(150), String::from(\"110\"));\n        assert_eq!(candidate(147), String::from(\"1100\"));\n        assert_eq!(candidate(333), String::from(\"1001\"));\n        assert_eq!(candidate(963), String::from(\"10010\"));\n\n    }\n}\n", "entry_point": "solve", "instruction": "Write an idiomatic Rust function `solve(n: isize) -> String` to solve the following problem:\nGiven a positive integer n, return the total sum of its digits in binary. Example \n\nIn the following are some examples of how to use the function:\n>>> solve(1000)\nString::from(\"1\")\n>>> solve(150)\nString::from(\"110\")\n>>> solve(147)\nString::from(\"1100\")\nVariables:\n@n integer\nConstraints: 0 ≤ n ≤ 10000.\nOutput:\na string of binary number\n"}
{"task_id": "Rust/85", "prompt": "/// Given a non-empty vector of integers lst. add the even elements that are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\nfn add(lst: Vec<isize>) -> isize {\n", "canonical_solution": "\n    let mut sum: i32 = 0;\n\n    for (indx, elem) in lst.iter().enumerate() {\n        if indx % 2 == 1 {\n            if elem % 2 == 0 {\n                sum += elem\n            }\n        }\n    }\n    return sum;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_add() {\n        let candidate = add;\n        assert_eq!(candidate(vec![4, 88]), 88);\n        assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n        assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n        assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n\n    }\n}\n", "entry_point": "add", "instruction": "Write an idiomatic Rust function `add(lst: Vec<isize>) -> isize` to solve the following problem:\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices.. \n\nIn the following are some examples of how to use the function:\n>>> add(vec![4, 2, 6, 7])\n2\n"}
{"task_id": "Rust/86", "prompt": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n", "canonical_solution": "\n    let mut res: String = String::new();\n\n    for i in s.split_ascii_whitespace() {\n        let mut str: Vec<char> = i.chars().into_iter().collect();\n        str.sort_by(|a, b| (*a as u32).cmp(&(*b as u32)));\n        let str_sorted: String = str.into_iter().collect();\n        res.push_str(&(str_sorted + &\" \".to_string()));\n    }\n    res = res.trim_end().to_string();\n    return res;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_anti_shuffle() {\n        let candidate = anti_shuffle;\n        assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n        assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n        assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n        assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n        assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n        assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n        assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\n    }\n}\n", "entry_point": "anti_shuffle", "instruction": "Write an idiomatic Rust function `anti_shuffle(s: String) -> String` to solve the following problem:\nWrite a function that takes a string and returns an ordered version of it. Ordered version of string, is a string where all words (separated by space) are replaced by a new word where all the characters arranged in ascending order based on ascii value. Note: You should keep the order of words and blank spaces in the sentence. \n\nIn the following are some examples of how to use the function:\n>>> anti_shuffle(String::from(\"Hi\"))\nString::from(\"Hi\")\n>>> anti_shuffle(String::from(\"hello\"))\nString::from(\"ehllo\")\n>>> anti_shuffle(String::from(\"Hello World!!!\"))\nString::from(\"Hello !!!Wdlor\")\n"}
{"task_id": "Rust/87", "prompt": "/// You are given a 2 dimensional data, as a nested vectors,\n/// which is similar to matrix, however, unlike matrices,\n/// each row may contain a different number of columns.\n/// Given lst, and integer x, find integers x in the vector,\n/// and return vector of tuples, [(x1, y1), (x2, y2) ...] such that\n/// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates initially by rows in ascending order.\n/// Also, sort coordinates of the row by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize, isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n/// vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)> {\n", "canonical_solution": "\n    let mut out: Vec<Vec<i32>> = vec![];\n    for (indxi, elem1) in lst.iter().enumerate() {\n        for (indxj, _) in elem1.iter().rev().enumerate() {\n            if lst[indxi][indxj] == x {\n                out.push(vec![indxi as i32, indxj as i32]);\n            }\n        }\n    }\n    return out;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_get_row() {\n        let candidate = get_row;\n        assert_eq!(candidate(vec![vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1), vec![(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]);\n        assert_eq!(candidate(vec![vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6]], 2), vec![(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]);\n        assert_eq!(candidate(vec![vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 1, 3, 4, 5, 6], vec![1, 2, 1, 4, 5, 6], vec![1, 2, 3, 1, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1), vec![(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]);\n        assert_eq!(candidate(Vec::<Vec<isize>>::new(), 1), Vec::<(isize, isize)>::new());\n        assert_eq!(candidate(vec![vec![1]], 2), Vec::<(isize, isize)>::new());\n        assert_eq!(candidate(vec![vec![], vec![1], vec![1, 2, 3]], 3), vec![(2, 2)]);\n\n    }\n}\n", "entry_point": "get_row", "instruction": "Write an idiomatic Rust function `get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>` to solve the following problem:\nYou are given a 2 dimensional data, as a nested vectors, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the vector, and return vector of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order. \n\nIn the following are some examples of how to use the function:\n>>> get_row(vec![vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\nvec![(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n>>> get_row(vec![], 1)\nVec::<(isize, isize)>::new()\n>>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\nvec![(2, 2)]\n"}
{"task_id": "Rust/88", "prompt": "/// Given a vector of non-negative integers, return a cors of the given vector after sorting,\n/// you will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\n/// or sort it in descending order if the sum( first index value, last index value) is even.\n/// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n/// Vec::<isize>::new()\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2, 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3, 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>) -> Vec<isize> {\n", "canonical_solution": "\n    let mut res: Vec<i32> = array.clone();\n\n    if array.len() == 0 {\n        return res;\n    }\n\n    if (array[0] + array[array.len() - 1]) % 2 == 0 {\n        res.sort();\n        return res.into_iter().rev().collect();\n    } else {\n        res.sort();\n        return res;\n    }\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_sort_array() {\n        let candidate = sort_array;\n        assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n        assert_eq!(candidate(vec![5]), vec![5]);\n        assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n        assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n        assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n        assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n        assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23, 21, 14, 11]);\n\n    }\n}\n", "entry_point": "sort_array", "instruction": "Write an idiomatic Rust function `sort_array(array: Vec<isize>) -> Vec<isize>` to solve the following problem:\nGiven a vector of non-negative integers, return a cors of the given vector after sorting, you will sort the given vector in ascending order if the sum( first index value, last index value) is odd, or sort it in descending order if the sum( first index value, last index value) is even. Note: * don't change the given vector. \n\nIn the following are some examples of how to use the function:\n>>> sort_array(vec![])\nVec::<isize>::new()\n>>> sort_array(vec![5])\nvec![5]\n>>> sort_array(vec![2, 4, 3, 0, 1, 5])\nvec![0, 1, 2, 3, 4, 5]\n>>> sort_array(vec![2, 4, 3, 0, 1, 5, 6])\nvec![6, 5, 4, 3, 2, 1, 0]\n"}
{"task_id": "Rust/89", "prompt": "/// Create a function encrypt that takes a string as an argument and\n/// returns a string encrypted with the alphabet being rotated. \n/// The alphabet should be rotated in a manner such that the letters \n/// shift down by two multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n/// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s: String) -> String {\n", "canonical_solution": "\n    let d: Vec<char> = \"abcdefghijklmnopqrstuvwxyz\"\n        .to_string()\n        .chars()\n        .into_iter()\n        .collect();\n    let mut out: String = String::new();\n    for c in s.chars() {\n        if d.contains(&c) {\n            let indx: usize = (d.iter().position(|x| c == *x).unwrap() + 2 * 2) % 26;\n            out += &d[indx].to_string();\n        } else {\n            out += &c.to_string();\n        }\n    }\n\n    return out;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_encrypt() {\n        let candidate = encrypt;\n        assert_eq!(candidate(String::from(\"hi\")), String::from(\"lm\"));\n        assert_eq!(candidate(String::from(\"asdfghjkl\")), String::from(\"ewhjklnop\"));\n        assert_eq!(candidate(String::from(\"gf\")), String::from(\"kj\"));\n        assert_eq!(candidate(String::from(\"et\")), String::from(\"ix\"));\n        assert_eq!(candidate(String::from(\"faewfawefaewg\")), String::from(\"jeiajeaijeiak\"));\n        assert_eq!(candidate(String::from(\"hellomyfriend\")), String::from(\"lippsqcjvmirh\"));\n        assert_eq!(candidate(String::from(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")), String::from(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n        assert_eq!(candidate(String::from(\"a\")), String::from(\"e\"));\n\n    }\n}\n", "entry_point": "encrypt", "instruction": "Write an idiomatic Rust function `encrypt(s: String) -> String` to solve the following problem:\nCreate a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated.  The alphabet should be rotated in a manner such that the letters  shift down by two multiplied to two places. \n\nIn the following are some examples of how to use the function:\n>>> encrypt(String::from(\"hi\"))\nString::from(\"lm\")\n>>> encrypt(String::from(\"asdfghjkl\"))\nString::from(\"ewhjklnop\")\n>>> encrypt(String::from(\"gf\"))\nString::from(\"kj\")\n>>> encrypt(String::from(\"et\"))\nString::from(\"ix\")\n"}
{"task_id": "Rust/90", "prompt": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n", "canonical_solution": "\n    let mut res = 0;\n    let mut lst_cp = lst.clone();\n    let mut first: i32 = 0;\n    let mut second: i32 = 0;\n\n    if lst.iter().min() == None {\n        res = -1;\n    } else {\n        if lst.iter().min() != None {\n            first = *lst.iter().min().unwrap();\n            let indx = lst.iter().position(|x| *x == first).unwrap();\n            lst_cp.remove(indx);\n\n            if lst_cp.iter().min() != None {\n                second = *lst_cp.iter().min().unwrap();\n            }\n            if first != second {\n                res = second;\n            } else {\n                res = -1;\n            }\n        }\n    }\n    return res;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_next_smallest() {\n        let candidate = next_smallest;\n        assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n        assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n        assert_eq!(candidate(Vec::<isize>::new()), None);\n        assert_eq!(candidate(vec![1, 1]), None);\n        assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n        assert_eq!(candidate(vec![1, 1]), None);\n        assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\n    }\n}\n", "entry_point": "next_smallest", "instruction": "Write an idiomatic Rust function `next_smallest(lst: Vec<isize>) -> Option<isize>` to solve the following problem:\nYou are given a vector of integers. Write a function next_smallest() that returns the 2nd smallest element of the vector. Return None if there is no such element. \n\nIn the following are some examples of how to use the function:\n>>> next_smallest(vec![1, 2, 3, 4, 5])\nSome(2)\n>>> next_smallest(vec![5, 1, 4, 3, 2])\nSome(2)\n>>> next_smallest(vec![])\nNone\n>>> next_smallest(vec![1, 1])\nNone\n"}
{"task_id": "Rust/91", "prompt": "/// You'll be given a string of words, and your task is to count the number\n/// of boredoms. A boredom is a sentence that starts with the word \"I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun is shining. I love this weather\"))\n/// 1\nfn is_bored(s: String) -> isize {\n", "canonical_solution": "\n    let mut count = 0;\n    let regex = Regex::new(r\"[.?!]\\s*\").expect(\"Invalid regex\");\n    let sqn: Vec<&str> = regex.split(s).into_iter().collect();\n    for s in sqn {\n        if s.starts_with(\"I \") {\n            count += 1;\n        }\n    }\n    return count;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_is_bored() {\n        let candidate = is_bored;\n        assert_eq!(candidate(String::from(\"Hello world\")), 0);\n        assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n        assert_eq!(candidate(String::from(\"I love It !\")), 1);\n        assert_eq!(candidate(String::from(\"bIt\")), 0);\n        assert_eq!(candidate(String::from(\"I feel good today. I will be productive. will kill It\")), 2);\n        assert_eq!(candidate(String::from(\"You and I are going for a walk\")), 0);\n\n    }\n}\n", "entry_point": "is_bored", "instruction": "Write an idiomatic Rust function `is_bored(s: String) -> isize` to solve the following problem:\nYou'll be given a string of words, and your task is to count the number of boredoms. A boredom is a sentence that starts with the word \"I\". Sentences are delimited by '.', '?' or '!'. \n\nIn the following are some examples of how to use the function:\n>>> is_bored(String::from(\"Hello world\"))\n0\n>>> is_bored(String::from(\"The sky is blue. The sun is shining. I love this weather\"))\n1\n"}
{"task_id": "Rust/92", "prompt": "/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n/// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n/// true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z: f64) -> bool {\n", "canonical_solution": "\n    if a.fract() == 0.0 && b.fract() == 0.0 && c.fract() == 0.0 {\n        return a + b == c || a + c == b || b + c == a;\n    } else {\n        return false;\n    }\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_any_int() {\n        let candidate = any_int;\n        assert_eq!(candidate(2.0, 3.0, 1.0), true);\n        assert_eq!(candidate(2.5, 2.0, 3.0), false);\n        assert_eq!(candidate(1.5, 5.0, 3.5), false);\n        assert_eq!(candidate(2.0, 6.0, 2.0), false);\n        assert_eq!(candidate(4.0, 2.0, 2.0), true);\n        assert_eq!(candidate(2.2, 2.2, 2.2), false);\n        assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n        assert_eq!(candidate(2.0, 1.0, 1.0), true);\n        assert_eq!(candidate(3.0, 4.0, 7.0), true);\n        assert_eq!(candidate(3.0, 4.0, 7.0), false);\n\n    }\n}\n", "entry_point": "any_int", "instruction": "Write an idiomatic Rust function `any_int(x: f64, y: f64, z: f64) -> bool` to solve the following problem:\nCreate a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases. \n\nIn the following are some examples of how to use the function:\n>>> any_int(5, 2, 7)\ntrue\n>>> any_int(3, 2, 2)\nfalse\n>>> any_int(3, -2, 1)\ntrue\n>>> any_int(3.6, -2.2, 2)\nfalse\n"}
{"task_id": "Rust/93", "prompt": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n", "canonical_solution": "\n    let mut res: String = String::new();\n    let v: Vec<char> = \"aeiouAEIOU\".to_string().chars().into_iter().collect();\n    let d: Vec<char> = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        .to_string()\n        .chars()\n        .into_iter()\n        .collect();\n\n    for (indx, elem) in message.chars().into_iter().enumerate() {\n        let mut c = elem.to_string();\n\n        if v.contains(&elem) {\n            let indx: usize = d.iter().position(|x| &elem == x).unwrap();\n            c = d[indx + 2 as usize].to_string();\n        }\n\n        if elem.is_uppercase() {\n            c = c.to_lowercase().to_string();\n        } else {\n            c = c.to_uppercase().to_string();\n        }\n        res.push_str(&c);\n    }\n    return res;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_encode() {\n        let candidate = encode;\n        assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n        assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n        assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n        assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n        assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\n    }\n}\n", "entry_point": "encode", "instruction": "Write an idiomatic Rust function `encode(message: String) -> String` to solve the following problem:\nWrite a function that takes a message, and encodes in such a  way that it swaps case of all letters, replaces all vowels in  the message with the letter that appears 2 places ahead of that  vowel in the english alphabet.  Assume only letters.  \n\nIn the following are some examples of how to use the function:\n>>> encode(String::from(\"test\"))\nString::from(\"TGST\")\n>>> encode(String::from(\"This is a message\"))\nString::from(\"tHKS KS C MGSSCGG\")\n"}
{"task_id": "Rust/94", "prompt": "/// You are given a vector of integers.\n/// You need to find the largest prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n/// 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn skjkasdkd(lst: Vec<isize>) -> isize {\n", "canonical_solution": "\n    let mut largest = 0;\n    for i in 0..lst.len() {\n        if lst[i] > largest {\n            let mut prime = true;\n            let mut j = 2;\n            while j * j <= lst[i] {\n                if lst[i] % j == 0 {\n                    prime = false;\n                }\n                j += 1;\n            }\n\n            if prime {\n                largest = lst[i];\n            }\n        }\n    }\n    let mut sum: i32 = 0;\n    let mut s: String = String::new();\n    s = largest.to_string();\n\n    for n in s.chars().into_iter() {\n        sum += n.to_digit(10).unwrap() as i32;\n    }\n    return sum;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_skjkasdkd() {\n        let candidate = skjkasdkd;\n        assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n        assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n        assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n        assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n        assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n        assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n        assert_eq!(candidate(vec![8191]), 19);\n        assert_eq!(candidate(vec![8191, 123456, 127, 7]), 19);\n        assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\n    }\n}\n", "entry_point": "skjkasdkd", "instruction": "Write an idiomatic Rust function `skjkasdkd(lst: Vec<isize>) -> isize` to solve the following problem:\nYou are given a vector of integers. You need to find the largest prime value and return the sum of its digits. \n\nIn the following are some examples of how to use the function:\n>>> skjkasdkd(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n10\n>>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n25\n>>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n13\n>>> skjkasdkd(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n11\n>>> skjkasdkd(vec![0, 81, 12, 3, 1, 21])\n3\n>>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n7\n"}
{"task_id": "Rust/95", "prompt": "use std::collections::HashMap;\n\n/// Given a HashMap, return true if all keys are strings in lower \n/// case or all keys are strings in upper case, else return false.\n/// The function should return false is the given HashMap is empty.\n/// Examples:\n/// >>> check_dict_case(HashMap::from([(String::from(\"a\"), String::from(\"apple\")), (String::from(\"b\"), String::from(\"banana\"))]))\n/// true\n/// >>> check_dict_case(HashMap::from([(String::from(\"a\"), String::from(\"apple\")), (String::from(\"A\"), String::from(\"banana\")), (String::from(\"B\"), String::from(\"banana\"))]))\n/// false\n/// >>> check_dict_case(HashMap::from([(String::from(\"a\"), String::from(\"apple\")), (8, String::from(\"banana\")), (String::from(\"a\"), String::from(\"apple\"))]))\n/// false\n/// >>> check_dict_case(HashMap::from([(String::from(\"Name\"), String::from(\"John\")), (String::from(\"Age\"), String::from(\"36\")), (String::from(\"City\"), String::from(\"Houston\"))]))\n/// false\n/// >>> check_dict_case(HashMap::from([(String::from(\"STATE\"), String::from(\"NC\")), (String::from(\"ZIP\"), String::from(\"12345\"))]))\n/// true\nfn check_dict_case(dict: HashMap<String, String>) -> bool {\n", "canonical_solution": "\n    if dict.is_empty() {\n        return false;\n    }\n    let string_lower: fn(str: &str) -> bool = |str: &str| {\n        return str.chars().into_iter().all(|c| c.is_ascii_lowercase());\n    };\n    let string_upper: fn(str: &str) -> bool = |str: &str| {\n        return str.chars().into_iter().all(|c| c.is_ascii_uppercase());\n    };\n\n    let lower: bool = dict.keys().into_iter().all(|str| string_lower(str));\n    let upper: bool = dict.keys().into_iter().all(|str| string_upper(str));\n    return lower || upper;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_check_dict_case() {\n        let candidate = check_dict_case;\n        assert_eq!(candidate(HashMap::from([(String::from(\"p\"), String::from(\"pineapple\")), (String::from(\"b\"), String::from(\"banana\"))])), true);\n        assert_eq!(candidate(HashMap::from([(String::from(\"p\"), String::from(\"pineapple\")), (String::from(\"A\"), String::from(\"banana\")), (String::from(\"B\"), String::from(\"banana\"))])), false);\n        assert_eq!(candidate(HashMap::from([(String::from(\"p\"), String::from(\"pineapple\")), (String::from(\"5\"), String::from(\"banana\")), (String::from(\"a\"), String::from(\"apple\"))])), false);\n        assert_eq!(candidate(HashMap::from([(String::from(\"Name\"), String::from(\"John\")), (String::from(\"Age\"), String::from(\"36\")), (String::from(\"City\"), String::from(\"Houston\"))])), false);\n        assert_eq!(candidate(HashMap::from([(String::from(\"STATE\"), String::from(\"NC\")), (String::from(\"ZIP\"), String::from(\"12345\"))])), true);\n        assert_eq!(candidate(HashMap::from([(String::from(\"fruit\"), String::from(\"Orange\")), (String::from(\"taste\"), String::from(\"Sweet\"))])), true);\n        assert_eq!(candidate(HashMap::from([])), false);\n\n    }\n}\n", "entry_point": "check_dict_case", "instruction": "Write an idiomatic Rust function `check_dict_case(dict: HashMap<String, String>) -> bool` to solve the following problem:\n Given a HashMap, return true if all keys are strings in lower  case or all keys are strings in upper case, else return false. The function should return false is the given HashMap is empty. \n\nIn the following are some examples of how to use the function:\n>>> check_dict_case(HashMap::from([(String::from(\"a\"), String::from(\"apple\")), (String::from(\"b\"), String::from(\"banana\"))]))\ntrue\n>>> check_dict_case(HashMap::from([(String::from(\"a\"), String::from(\"apple\")), (String::from(\"A\"), String::from(\"banana\")), (String::from(\"B\"), String::from(\"banana\"))]))\nfalse\n>>> check_dict_case(HashMap::from([(String::from(\"a\"), String::from(\"apple\")), (8, String::from(\"banana\")), (String::from(\"a\"), String::from(\"apple\"))]))\nfalse\n>>> check_dict_case(HashMap::from([(String::from(\"Name\"), String::from(\"John\")), (String::from(\"Age\"), String::from(\"36\")), (String::from(\"City\"), String::from(\"Houston\"))]))\nfalse\n>>> check_dict_case(HashMap::from([(String::from(\"STATE\"), String::from(\"NC\")), (String::from(\"ZIP\"), String::from(\"12345\"))]))\ntrue\n\nUse the following context:\n```rust\nuse std::collections::HashMap;\n```"}
{"task_id": "Rust/96", "prompt": "/// Implement a function that takes an non-negative integer and returns a vector of the first n\n/// integers that are prime numbers and less than n.\n/// for example:\n/// >>> count_up_to(5)\n/// vec![2, 3]\n/// >>> count_up_to(11)\n/// vec![2, 3, 5, 7]\n/// >>> count_up_to(0)\n/// Vec::<isize>::new()\n/// >>> count_up_to(20)\n/// vec![2, 3, 5, 7, 11, 13, 17, 19]\n/// >>> count_up_to(1)\n/// Vec::<isize>::new()\n/// >>> count_up_to(18)\n/// vec![2, 3, 5, 7, 11, 13, 17]\nfn count_up_to(n: isize) -> Vec<isize> {\n", "canonical_solution": "\n    let mut primes: Vec<i32> = vec![];\n\n    for i in 2..n {\n        let mut is_prime: bool = true;\n\n        for j in 2..i {\n            if i % j == 0 {\n                is_prime = false;\n                break;\n            }\n        }\n        if is_prime {\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_count_up_to() {\n        let candidate = count_up_to;\n        assert_eq!(candidate(5), vec![2, 3]);\n        assert_eq!(candidate(6), vec![2, 3, 5]);\n        assert_eq!(candidate(7), vec![2, 3, 5]);\n        assert_eq!(candidate(10), vec![2, 3, 5, 7]);\n        assert_eq!(candidate(0), Vec::<isize>::new());\n        assert_eq!(candidate(22), vec![2, 3, 5, 7, 11, 13, 17, 19]);\n        assert_eq!(candidate(1), Vec::<isize>::new());\n        assert_eq!(candidate(18), vec![2, 3, 5, 7, 11, 13, 17]);\n        assert_eq!(candidate(47), vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]);\n        assert_eq!(candidate(101), vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]);\n\n    }\n}\n", "entry_point": "count_up_to", "instruction": "Write an idiomatic Rust function `count_up_to(n: isize) -> Vec<isize>` to solve the following problem:\nImplement a function that takes an non-negative integer and returns a vector of the first n integers that are prime numbers and less than n. \n\nIn the following are some examples of how to use the function:\n>>> count_up_to(5)\nvec![2, 3]\n>>> count_up_to(11)\nvec![2, 3, 5, 7]\n>>> count_up_to(0)\nVec::<isize>::new()\n>>> count_up_to(20)\nvec![2, 3, 5, 7, 11, 13, 17, 19]\n>>> count_up_to(1)\nVec::<isize>::new()\n>>> count_up_to(18)\nvec![2, 3, 5, 7, 11, 13, 17]\n"}
{"task_id": "Rust/97", "prompt": "/// Complete the function that takes two integers and returns \n/// the product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n/// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>> multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a: isize, b: isize) -> isize {\n", "canonical_solution": "\n    return (i32::abs(a) % 10) * (i32::abs(b) % 10);\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_multiply() {\n        let candidate = multiply;\n        assert_eq!(candidate(148, 412), 16);\n        assert_eq!(candidate(19, 28), 72);\n        assert_eq!(candidate(2020, 1851), 0);\n        assert_eq!(candidate(14, -15), 20);\n        assert_eq!(candidate(76, 67), 42);\n        assert_eq!(candidate(17, 27), 49);\n        assert_eq!(candidate(0, 1), 0);\n        assert_eq!(candidate(0, 0), 0);\n\n    }\n}\n", "entry_point": "multiply", "instruction": "Write an idiomatic Rust function `multiply(a: isize, b: isize) -> isize` to solve the following problem:\nComplete the function that takes two integers and returns  the product of their unit digits. Assume the input is always valid. \n\nIn the following are some examples of how to use the function:\n>>> multiply(148, 412)\n16\n>>> multiply(19, 28)\n72\n>>> multiply(2020, 1851)\n0\n>>> multiply(14, -15)\n20\n"}
{"task_id": "Rust/98", "prompt": "/// Given a string s, count the number of uppercase vowels in even indices.\n/// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>> count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n", "canonical_solution": "\n    let uvowel: &str = \"AEIOU\";\n    let mut count: i32 = 0;\n\n    for (indx, elem) in s.chars().into_iter().enumerate() {\n        if indx % 2 == 0 {\n            if uvowel.contains(elem) {\n                count += 1;\n            }\n        }\n    }\n    return count;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_count_upper() {\n        let candidate = count_upper;\n        assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n        assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n        assert_eq!(candidate(String::from(\"dBBE\")), 0);\n        assert_eq!(candidate(String::from(\"B\")), 0);\n        assert_eq!(candidate(String::from(\"U\")), 1);\n        assert_eq!(candidate(String::from(\"\")), 0);\n        assert_eq!(candidate(String::from(\"EEEE\")), 2);\n\n    }\n}\n", "entry_point": "count_upper", "instruction": "Write an idiomatic Rust function `count_upper(s: String) -> isize` to solve the following problem:\nGiven a string s, count the number of uppercase vowels in even indices. \n\nIn the following are some examples of how to use the function:\n>>> count_upper(String::from(\"aBCdEf\"))\n1\n>>> count_upper(String::from(\"abcdefg\"))\n0\n>>> count_upper(String::from(\"dBBE\"))\n0\n"}
{"task_id": "Rust/99", "prompt": "/// Create a function that takes a value (string) representing a number\n/// and returns the closest integer to it. If the number is equidistant\n/// from two integers, round it away from zero.\n/// Examples\n/// >>> closest_integer(String::from(\"10\"))\n/// 10\n/// >>> closest_integer(String::from(\"15.3\"))\n/// 15\n/// Note:\n/// Rounding away from zero means that if the given number is equidistant\n/// from two integers, the one you should return is the one that is the\n/// farthest from zero. For example closest_integer(\"14.5\") should\n/// return 15 and closest_integer(\"-14.5\") should return -15.\nfn closest_integer(value: String) -> isize {\n", "canonical_solution": "\n    return value.parse::<f64>().unwrap().round() as i32;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_closest_integer() {\n        let candidate = closest_integer;\n        assert_eq!(candidate(String::from(\"10\")), 10);\n        assert_eq!(candidate(String::from(\"14.5\")), 15);\n        assert_eq!(candidate(String::from(\"-15.5\")), -16);\n        assert_eq!(candidate(String::from(\"15.3\")), 15);\n        assert_eq!(candidate(String::from(\"0\")), 0);\n\n    }\n}\n", "entry_point": "closest_integer", "instruction": "Write an idiomatic Rust function `closest_integer(value: String) -> isize` to solve the following problem:\nCreate a function that takes a value (string) representing a number and returns the closest integer to it. If the number is equidistant from two integers, round it away from zero. \n\nIn the following are some examples of how to use the function:\n>>> closest_integer(String::from(\"10\"))\n10\n>>> closest_integer(String::from(\"15.3\"))\n15\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n"}
{"task_id": "Rust/100", "prompt": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n", "canonical_solution": "\n    let mut out: Vec<i32> = vec![n];\n\n    for i in 1..n {\n        out.push(out[out.len() - 1] + 2);\n    }\n\n    return out;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_make_a_pile() {\n        let candidate = make_a_pile;\n        assert_eq!(candidate(3), vec![3, 5, 7]);\n        assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n        assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n        assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n        assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\n    }\n}\n", "entry_point": "make_a_pile", "instruction": "Write an idiomatic Rust function `make_a_pile(n: isize) -> Vec<isize>` to solve the following problem:\nGiven a positive integer n, you have to make a pile of n levels of stones. The first level has n stones. The number of stones in the next level is: - the next odd number if n is odd. - the next even number if n is even. Return the number of stones in each level in a vector, where element at index i represents the number of stones in the level (i+1). \n\nIn the following are some examples of how to use the function:\n>>> make_a_pile(3)\nvec![3, 5, 7]\n"}
{"task_id": "Rust/101", "prompt": "/// You will be given a string of words separated by commas or spaces. Your task is\n/// to split the string into words and return a vector of the words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n", "canonical_solution": "\n    return s\n        .to_string()\n        .split(|c: char| c == ',' || c.is_whitespace())\n        .into_iter()\n        .filter(|x| x != &\"\")\n        .map(|x| x.to_string())\n        .collect();\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_words_string() {\n        let candidate = words_string;\n        assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"John\")]);\n        assert_eq!(candidate(String::from(\"One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n        assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n        assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n        assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n        assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\n    }\n}\n", "entry_point": "words_string", "instruction": "Write an idiomatic Rust function `words_string(s: String) -> Vec<String>` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is to split the string into words and return a vector of the words. \n\nIn the following are some examples of how to use the function:\n>>> words_string(String::from(\"Hi, my name is John\"))\nvec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"John\")]\n>>> words_string(String::from(\"One, two, three, four, five, six\"))\nvec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]\n"}
{"task_id": "Rust/102", "prompt": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n", "canonical_solution": "\n    if y < x {\n        return -1;\n    }\n    if y == x && y % 2 == 1 {\n        return -1;\n    }\n    if y % 2 == 1 {\n        return y - 1;\n    }\n    return y;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_choose_num() {\n        let candidate = choose_num;\n        assert_eq!(candidate(12, 15), 14);\n        assert_eq!(candidate(13, 12), -1);\n        assert_eq!(candidate(33, 12354), 12354);\n        assert_eq!(candidate(5234, 5233), -1);\n        assert_eq!(candidate(6, 29), 28);\n        assert_eq!(candidate(27, 10), -1);\n        assert_eq!(candidate(7, 7), -1);\n        assert_eq!(candidate(546, 546), 546);\n\n    }\n}\n", "entry_point": "choose_num", "instruction": "Write an idiomatic Rust function `choose_num(x: isize, y: isize) -> isize` to solve the following problem:\nThis function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive. If  there's no such number, then the function should return -1. \n\nIn the following are some examples of how to use the function:\n>>> choose_num(12, 15)\n14\n>>> choose_num(13, 12)\n-1\n"}
{"task_id": "Rust/104", "prompt": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n", "canonical_solution": "\n    let mut res: Vec<i32> = vec![];\n    for (_, elem) in x.into_iter().enumerate() {\n        let mut elem_cp: i32 = elem;\n        let mut u: bool = true;\n        if elem == 0 {\n            u = false;\n        }\n        while elem_cp > 0 && u {\n            if elem_cp % 2 == 0 {\n                u = false;\n            }\n            elem_cp = elem_cp / 10;\n        }\n        if u {\n            res.push(elem)\n        };\n    }\n    res.sort();\n    return res;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_unique_digits() {\n        let candidate = unique_digits;\n        assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n        assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n        assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n        assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\n    }\n}\n", "entry_point": "unique_digits", "instruction": "Write an idiomatic Rust function `unique_digits(x: Vec<isize>) -> Vec<isize>` to solve the following problem:\nGiven a vector of positive integers x. return a sorted vector of all  elements that hasn't any even digit. Note: Returned vector should be sorted in increasing order. \n\nIn the following are some examples of how to use the function:\n>>> unique_digits(vec![15, 33, 1422, 1])\nvec![1, 15, 33]\n>>> unique_digits(vec![152, 323, 1422, 10])\nVec::<isize>::new()\n"}
{"task_id": "Rust/105", "prompt": "/// Given a vector of integers, sort the integers that are between 1 and 9 inclusive,\n/// reverse the resulting vector, and then replace each digit by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2, 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty, return an empty vector:\n/// >>> by_length(vec![])\n/// Vec::<String>::new()\n/// If the vector has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n", "canonical_solution": "\n    let mut res: Vec<String> = vec![];\n    let mut arr_cp: Vec<i32> = arr.clone();\n    arr_cp.sort();\n    arr_cp.reverse();\n    let map: HashMap<i32, &str> = HashMap::from([\n        (0, \"Zero\"),\n        (1, \"One\"),\n        (2, \"Two\"),\n        (3, \"Three\"),\n        (4, \"Four\"),\n        (5, \"Five\"),\n        (6, \"Six\"),\n        (7, \"Seven\"),\n        (8, \"Eight\"),\n        (9, \"Nine\"),\n    ]);\n\n    for elem in arr_cp {\n        if elem >= 1 && elem <= 9 {\n            res.push(map.get(&elem).unwrap().to_string());\n        }\n    }\n\n    return res;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_by_length() {\n        let candidate = by_length;\n        assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"One\")]);\n        assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n        assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n        assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"Two\"), String::from(\"One\")]);\n        assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n\n    }\n}\n", "entry_point": "by_length", "instruction": "Write an idiomatic Rust function `by_length(arr: Vec<isize>) -> Vec<String>` to solve the following problem:\nGiven a vector of integers, sort the integers that are between 1 and 9 inclusive, reverse the resulting vector, and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\". \n\nIn the following are some examples of how to use the function:\n>>> by_length(vec![2, 1, 1, 4, 5, 8, 2, 3])\nvec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"One\")]\nIf the vector is empty, return an empty vector:\n>>> by_length(vec![])\nVec::<String>::new()\nIf the vector has any strange number ignore it:\n>>> by_length(vec![1, -1, 55])\nvec![String::from(\"One\")]\n"}
{"task_id": "Rust/106", "prompt": "/// Implement the function f that takes n as a parameter,\n/// and returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts from 1.\n/// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(5)\n/// vec![1, 2, 6, 24, 15]\nfn f(n: isize) -> Vec<isize> {\n", "canonical_solution": "\n    let mut sum: i32 = 0;\n    let mut prod: i32 = 1;\n    let mut out: Vec<i32> = vec![];\n\n    for i in 1..n + 1 {\n        sum += i;\n        prod *= i;\n\n        if i % 2 == 0 {\n            out.push(prod);\n        } else {\n            out.push(sum)\n        };\n    }\n    return out;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_f() {\n        let candidate = f;\n        assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n        assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n        assert_eq!(candidate(1), vec![1]);\n        assert_eq!(candidate(3), vec![1, 2, 6]);\n\n    }\n}\n", "entry_point": "f", "instruction": "Write an idiomatic Rust function `f(n: isize) -> Vec<isize>` to solve the following problem:\nImplement the function f that takes n as a parameter, and returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i). Example: \n\nIn the following are some examples of how to use the function:\n>>> f(5)\nvec![1, 2, 6, 24, 15]\n"}
{"task_id": "Rust/107", "prompt": "/// Given a positive integer n, return a tuple that has the number of even and odd\n/// integer palindromes that fall within the range(1, n), inclusive.\n/// Example 1:\n/// >>> even_odd_palindrome(3)\n/// (1, 2)\n/// Explanation:\n/// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n/// Example 2:\n/// >>> even_odd_palindrome(12)\n/// (4, 6)\n/// Explanation:\n/// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n/// Note:\n/// 1. 1 <= n <= 10^3\n/// 2. returned tuple has the number of even and odd integer palindromes respectively.\nfn even_odd_palindrome(n: isize) -> (isize, isize) {\n", "canonical_solution": "\n    let mut even = 0;\n    let mut odd = 0;\n\n    for i in 1..n + 1 {\n        let mut w: String = i.to_string();\n        let mut p: String = w.chars().rev().collect();\n\n        if w == p && i % 2 == 1 {\n            odd += 1;\n        }\n        if w == p && i % 2 == 0 {\n            even += 1;\n        }\n    }\n    (even, odd)\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_even_odd_palindrome() {\n        let candidate = even_odd_palindrome;\n        assert_eq!(candidate(123), (8, 13));\n        assert_eq!(candidate(12), (4, 6));\n        assert_eq!(candidate(3), (1, 2));\n        assert_eq!(candidate(63), (6, 8));\n        assert_eq!(candidate(25), (5, 6));\n        assert_eq!(candidate(19), (4, 6));\n        assert_eq!(candidate(9), (4, 5));\n        assert_eq!(candidate(1), (0, 1));\n\n    }\n}\n", "entry_point": "even_odd_palindrome", "instruction": "Write an idiomatic Rust function `even_odd_palindrome(n: isize) -> (isize, isize)` to solve the following problem:\nGiven a positive integer n, return a tuple that has the number of even and odd integer palindromes that fall within the range(1, n), inclusive. Example 1: \n\nIn the following are some examples of how to use the function:\n>>> even_odd_palindrome(3)\n(1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\n>>> even_odd_palindrome(12)\n(4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.\n"}
{"task_id": "Rust/108", "prompt": "/// Write a function count_nums which takes a vector of integers and returns\n/// the number of elements which has a sum of digits > 0.\n/// If a number is negative, then its first signed digit will be negative:\n/// e.g. -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1, 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr: Vec<isize>) -> isize {\n", "canonical_solution": "\n    let mut num: i32 = 0;\n\n    for nmbr in n {\n        if nmbr > 0 {\n            num += 1;\n        } else {\n            let mut sum: i32 = 0;\n            let mut w: i32;\n            w = i32::abs(nmbr);\n\n            while w >= 10 {\n                sum += w % 10;\n                w = w / 10;\n            }\n            sum -= w;\n            if sum > 0 {\n                num += 1;\n            }\n        }\n    }\n    return num;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_count_nums() {\n        let candidate = count_nums;\n        assert_eq!(candidate(Vec::<isize>::new()), 0);\n        assert_eq!(candidate(vec![-1, -2, 0]), 0);\n        assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n        assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n        assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n        assert_eq!(candidate(vec![12, 23, 34, -45, -56, 0]), 5);\n        assert_eq!(candidate(vec![0, 1]), 1);\n        assert_eq!(candidate(vec![1]), 1);\n\n    }\n}\n", "entry_point": "count_nums", "instruction": "Write an idiomatic Rust function `count_nums(arr: Vec<isize>) -> isize` to solve the following problem:\nWrite a function count_nums which takes a vector of integers and returns the number of elements which has a sum of digits > 0. If a number is negative, then its first signed digit will be negative: e.g. -123 has signed digits -1, 2, and 3. \n\nIn the following are some examples of how to use the function:\n>>> count_nums(vec![])\n0\n>>> count_nums(vec![-1, 11, -11])\n1\n>>> count_nums(vec![1, 1, 2])\n3\n"}
{"task_id": "Rust/109", "prompt": "/// We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n/// numbers in the vector will be randomly ordered. Your task is to determine if\n/// it is possible to get a vector sorted in non-decreasing order by performing \n/// the following operation on the given vector:\n/// You are allowed to perform right shift operation any number of times.\n/// One right shift operation means shifting all elements of the vector by one\n/// position in the right direction. The last element of the vector will be moved to\n/// the starting position in the vector i.e. 0th index. \n/// If it is possible to obtain the sorted vector by performing the above operation\n/// then return true else return false.\n/// If the given vector is empty then return true.\n/// Note: The given vector is guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(vec![3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations, non-decreasing order can\n/// be achieved for the given vector.\n/// >>> move_one_ball(vec![3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing order for the given\n/// vector by performing any number of right shift operations.\nfn move_one_ball(arr: Vec<isize>) -> bool {\n", "canonical_solution": "\n    let mut num = 0;\n    if arr.len() == 0 {\n        return true;\n    }\n    for i in 1..arr.len() {\n        if arr[i] < arr[i - 1] {\n            num += 1;\n        }\n    }\n    if arr[arr.len() - 1] > arr[0] {\n        num += 1;\n    }\n    if num < 2 {\n        return true;\n    }\n    return false;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_move_one_ball() {\n        let candidate = move_one_ball;\n        assert_eq!(candidate(vec![3, 4, 5, 1, 2]), true);\n        assert_eq!(candidate(vec![3, 5, 10, 1, 2]), true);\n        assert_eq!(candidate(vec![4, 3, 1, 2]), false);\n        assert_eq!(candidate(vec![3, 5, 4, 1, 2]), false);\n        assert_eq!(candidate(Vec::<isize>::new()), true);\n\n    }\n}\n", "entry_point": "move_one_ball", "instruction": "Write an idiomatic Rust function `move_one_ball(arr: Vec<isize>) -> bool` to solve the following problem:\nWe have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The numbers in the vector will be randomly ordered. Your task is to determine if it is possible to get a vector sorted in non-decreasing order by performing  the following operation on the given vector: You are allowed to perform right shift operation any number of times. One right shift operation means shifting all elements of the vector by one position in the right direction. The last element of the vector will be moved to the starting position in the vector i.e. 0th index.  If it is possible to obtain the sorted vector by performing the above operation then return true else return false. If the given vector is empty then return true. Note: The given vector is guaranteed to have unique elements. For Example: \n\nIn the following are some examples of how to use the function:\n>>> move_one_ball(vec![3, 4, 5, 1, 2])\ntrue\nExplanation: By performin 2 right shift operations, non-decreasing order can\nbe achieved for the given vector.\n>>> move_one_ball(vec![3, 5, 4, 1, 2])\nfalse\nExplanation:It is not possible to get non-decreasing order for the given\nvector by performing any number of right shift operations.\n"}
{"task_id": "Rust/110", "prompt": "/// In this problem, you will implement a function that takes two vectors of numbers,\n/// and determines whether it is possible to perform an exchange of elements\n/// between them to make lst1 a vector of only even numbers.\n/// There is no limit on the number of exchanged elements between lst1 and lst2.\n/// If it is possible to exchange elements between the lst1 and lst2 to make\n/// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return \"NO\".\n/// For example:\n/// >>> exchange(vec![1, 2, 3, 4], vec![1, 2, 3, 4])\n/// String::from(\"YES\")\n/// >>> exchange(vec![1, 2, 3, 4], vec![1, 5, 3, 4])\n/// String::from(\"NO\")\n/// It is assumed that the input vectors will be non-empty.\nfn exchange(lst1: Vec<isize>, lst2: Vec<isize>) -> String {\n", "canonical_solution": "\n    let mut num = 0;\n    for i in 0..lst1.len() {\n        if lst1[i] % 2 == 0 {\n            num += 1;\n        }\n    }\n    for i in 0..lst2.len() {\n        if lst2[i] % 2 == 0 {\n            num += 1;\n        }\n    }\n    if num >= lst1.len() {\n        return \"YES\".to_string();\n    }\n    return \"NO\".to_string();\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_exchange() {\n        let candidate = exchange;\n        assert_eq!(candidate(vec![1, 2, 3, 4], vec![1, 2, 3, 4]), String::from(\"YES\"));\n        assert_eq!(candidate(vec![1, 2, 3, 4], vec![1, 5, 3, 4]), String::from(\"NO\"));\n        assert_eq!(candidate(vec![1, 2, 3, 4], vec![2, 1, 4, 3]), String::from(\"YES\"));\n        assert_eq!(candidate(vec![5, 7, 3], vec![2, 6, 4]), String::from(\"YES\"));\n        assert_eq!(candidate(vec![5, 7, 3], vec![2, 6, 3]), String::from(\"NO\"));\n        assert_eq!(candidate(vec![3, 2, 6, 1, 8, 9], vec![3, 5, 5, 1, 1, 1]), String::from(\"NO\"));\n        assert_eq!(candidate(vec![100, 200], vec![200, 200]), String::from(\"YES\"));\n\n    }\n}\n", "entry_point": "exchange", "instruction": "Write an idiomatic Rust function `exchange(lst1: Vec<isize>, lst2: Vec<isize>) -> String` to solve the following problem:\nIn this problem, you will implement a function that takes two vectors of numbers, and determines whether it is possible to perform an exchange of elements between them to make lst1 a vector of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\". \n\nIn the following are some examples of how to use the function:\n>>> exchange(vec![1, 2, 3, 4], vec![1, 2, 3, 4])\nString::from(\"YES\")\n>>> exchange(vec![1, 2, 3, 4], vec![1, 5, 3, 4])\nString::from(\"NO\")\nIt is assumed that the input vectors will be non-empty.\n"}
{"task_id": "Rust/111", "prompt": "use std::collections::HashMap;\n\n/// Given a string representing a space separated lowercase letters, return a HashMap\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(String::from(\"a b c\"))\n/// HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1)])\n/// >>> histogram(String::from(\"a b b a\"))\n/// HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)])\n/// >>> histogram(String::from(\"a b c a b\"))\n/// HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)])\n/// >>> histogram(String::from(\"b b b b a\"))\n/// HashMap::from([(String::from(\"b\"), 4)])\n/// >>> histogram(String::from(\"\"))\n/// HashMap::from([])\nfn histogram(test: String) -> HashMap<String, isize> {\n", "canonical_solution": "\n    let mut res: HashMap<char, i32> = HashMap::new();\n    if test == \"\" {\n        return res;\n    }\n    for c in test.split_ascii_whitespace() {\n        if res.contains_key(&c.chars().next().unwrap()) {\n            res.entry(c.chars().next().unwrap()).and_modify(|n| {\n                *n += 1;\n            });\n        } else {\n            res.insert(c.chars().next().unwrap(), 1);\n        }\n    }\n    let max: i32 = *res.values().max().unwrap();\n    let non_maxs: Vec<char> = res\n        .keys()\n        .filter(|k: &&char| *res.get(k).unwrap() != max)\n        .map(|c| *c)\n        .collect();\n    non_maxs.iter().for_each(|c| {\n        res.remove(c);\n    });\n\n    return res;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_histogram() {\n        let candidate = histogram;\n        assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n        assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n        assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"), 1)]));\n        assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n        assert_eq!(candidate(String::from(\"b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n        assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n        assert_eq!(candidate(String::from(\"\")), HashMap::from([]));\n        assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"a\"), 1)]));\n\n    }\n}\n", "entry_point": "histogram", "instruction": "Write an idiomatic Rust function `histogram(test: String) -> HashMap<String, isize>` to solve the following problem:\n Given a string representing a space separated lowercase letters, return a HashMap of the letter with the most repetition and containing the corresponding count. If several letters have the same occurrence, return all of them. Example: \n\nIn the following are some examples of how to use the function:\n>>> histogram(String::from(\"a b c\"))\nHashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1)])\n>>> histogram(String::from(\"a b b a\"))\nHashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)])\n>>> histogram(String::from(\"a b c a b\"))\nHashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)])\n>>> histogram(String::from(\"b b b b a\"))\nHashMap::from([(String::from(\"b\"), 4)])\n>>> histogram(String::from(\"\"))\nHashMap::from([])\n\nUse the following context:\n```rust\nuse std::collections::HashMap;\n```"}
{"task_id": "Rust/112", "prompt": "/// Task\n/// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n/// then check if the result string is palindrome.\n/// A string is called palindrome if it reads the same backward as forward.\n/// You should return a tuple containing the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(String::from(\"abcde\"), String::from(\"ae\"))\n/// (String::from(\"bcd\"), false)\n/// >>> reverse_delete(String::from(\"abcdef\"), String::from(\"b\"))\n/// (String::from(\"acdef\"), false)\n/// >>> reverse_delete(String::from(\"abcdedcba\"), String::from(\"ab\"))\n/// (String::from(\"cdedc\"), true)\nfn reverse_delete(s: String, c: String) -> (String, bool) {\n", "canonical_solution": "\n    let mut n = String::new();\n    for i in 0..s.len() {\n        if !c.contains(s.chars().nth(i).unwrap()) {\n            n.push(s.chars().nth(i).unwrap());\n        }\n    }\n    if n.len() == 0 {\n        return vec![n, \"True\".to_string()];\n    }\n    let w: String = n.chars().rev().collect();\n    if w == n {\n        return vec![n, \"True\".to_string()];\n    }\n    return vec![n, \"False\".to_string()];\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_reverse_delete() {\n        let candidate = reverse_delete;\n        assert_eq!(candidate(String::from(\"abcde\"), String::from(\"ae\")), (String::from(\"bcd\"), false));\n        assert_eq!(candidate(String::from(\"abcdef\"), String::from(\"b\")), (String::from(\"acdef\"), false));\n        assert_eq!(candidate(String::from(\"abcdedcba\"), String::from(\"ab\")), (String::from(\"cdedc\"), true));\n        assert_eq!(candidate(String::from(\"dwik\"), String::from(\"w\")), (String::from(\"dik\"), false));\n        assert_eq!(candidate(String::from(\"a\"), String::from(\"a\")), (String::from(\"\"), true));\n        assert_eq!(candidate(String::from(\"abcdedcba\"), String::from(\"\")), (String::from(\"abcdedcba\"), true));\n        assert_eq!(candidate(String::from(\"abcdedcba\"), String::from(\"v\")), (String::from(\"abcdedcba\"), true));\n        assert_eq!(candidate(String::from(\"vabba\"), String::from(\"v\")), (String::from(\"abba\"), true));\n        assert_eq!(candidate(String::from(\"mamma\"), String::from(\"mia\")), (String::from(\"\"), true));\n\n    }\n}\n", "entry_point": "reverse_delete", "instruction": "Write an idiomatic Rust function `reverse_delete(s: String, c: String) -> (String, bool)` to solve the following problem:\nTask We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple containing the result string and true/false for the check. Example \n\nIn the following are some examples of how to use the function:\n>>> reverse_delete(String::from(\"abcde\"), String::from(\"ae\"))\n(String::from(\"bcd\"), false)\n>>> reverse_delete(String::from(\"abcdef\"), String::from(\"b\"))\n(String::from(\"acdef\"), false)\n>>> reverse_delete(String::from(\"abcdedcba\"), String::from(\"ab\"))\n(String::from(\"cdedc\"), true)\n"}
{"task_id": "Rust/113", "prompt": "/// Given a vector of strings, where each string consists of only digits, return a vector.\n/// Each element i of the output should be \"the number of odd elements in the\n/// string i of the input.\" where all the i's should be replaced by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n", "canonical_solution": "\n    let mut out: Vec<String> = Vec::new();\n    for i in 0..lst.len() {\n        let mut sum = 0;\n        for j in 0..lst[i].len() {\n            if lst[i].chars().nth(j).unwrap() >= '0'\n                && lst[i].chars().nth(j).unwrap() <= '9'\n                && lst[i].chars().nth(j).unwrap().to_digit(10).unwrap() % 2 == 1\n            {\n                sum += 1;\n            }\n        }\n        let mut s = \"the number of odd elements in the string i of the input.\".to_string();\n        let mut s2 = \"\".to_string();\n        for j in 0..s.len() {\n            if s.chars().nth(j).unwrap() == 'i' {\n                s2.push_str(&sum.to_string());\n            } else {\n                s2.push(s.chars().nth(j).unwrap());\n            }\n        }\n        out.push(s2);\n    }\n    return out;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_odd_count() {\n        let candidate = odd_count;\n        assert_eq!(candidate(vec![String::from(\"1234567\")]), vec![String::from(\"the number of odd elements 4n the str4ng 4 of the 4nput.\")]);\n        assert_eq!(candidate(vec![String::from(\"3\"), String::from(\"11111111\")]), vec![String::from(\"the number of odd elements 1n the str1ng 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng 8 of the 8nput.\")]);\n        assert_eq!(candidate(vec![String::from(\"271\"), String::from(\"137\"), String::from(\"314\")]), vec![String::from(\"the number of odd elements 2n the str2ng 2 of the 2nput.\"), String::from(\"the number of odd elements 3n the str3ng 3 of the 3nput.\"), String::from(\"the number of odd elements 2n the str2ng 2 of the 2nput.\")]);\n\n    }\n}\n", "entry_point": "odd_count", "instruction": "Write an idiomatic Rust function `odd_count(lst: Vec<String>) -> Vec<String>` to solve the following problem:\nGiven a vector of strings, where each string consists of only digits, return a vector. Each element i of the output should be \"the number of odd elements in the string i of the input.\" where all the i's should be replaced by the number of odd digits in the i'th string of the input. \n\nIn the following are some examples of how to use the function:\n>>> odd_count(vec![String::from(\"1234567\")])\nvec![String::from(\"the number of odd elements 4n the str4ng 4 of the 4nput.\")]\n>>> odd_count(vec![String::from(\"3\"), String::from(\"11111111\")])\nvec![String::from(\"the number of odd elements 1n the str1ng 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng 8 of the 8nput.\")]\n"}
{"task_id": "Rust/114", "prompt": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> min_sub_array_sum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> min_sub_array_sum(vec![-1, -2, -3])\n/// -6\nfn min_sub_array_sum(nums: Vec<isize>) -> isize {\n", "canonical_solution": "\n    let mut current = nums[0];\n    let mut min = nums[0];\n    for i in 1..nums.len() {\n        if current < 0 {\n            current = current + nums[i];\n        } else {\n            current = nums[i];\n        }\n        if current < min {\n            min = current;\n        }\n    }\n    min\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_min_sub_array_sum() {\n        let candidate = min_sub_array_sum;\n        assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n        assert_eq!(candidate(vec![-1, -2, -3]), -6);\n        assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n        assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n        assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n        assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n        assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n        assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n        assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n        assert_eq!(candidate(vec![-10]), -10);\n        assert_eq!(candidate(vec![7]), 7);\n        assert_eq!(candidate(vec![1, -1]), -1);\n\n    }\n}\n", "entry_point": "min_sub_array_sum", "instruction": "Write an idiomatic Rust function `min_sub_array_sum(nums: Vec<isize>) -> isize` to solve the following problem:\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector of nums. Example \n\nIn the following are some examples of how to use the function:\n>>> min_sub_array_sum(vec![2, 3, 4, 1, 2, 4])\n1\n>>> min_sub_array_sum(vec![-1, -2, -3])\n-6\n"}
{"task_id": "Rust/115", "prompt": "/// You are given a rectangular grid of wells. Each row represents a single well,\n/// and each 1 in a row represents a single unit of water.\n/// Each well has a corresponding bucket that can be used to extract water from it, \n/// and all buckets have the same capacity.\n/// Your task is to use the buckets to empty the wells.\n/// Output the number of times you need to lower the buckets.\n/// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n/// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1 <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n", "canonical_solution": "\n    let mut out: i32 = 0;\n\n    for i in 0..grid.len() {\n        let mut sum: i32 = 0;\n\n        for j in 0..grid[i].len() {\n            sum += grid[i][j];\n        }\n        if sum > 0 {\n            out += (sum - 1) / capacity + 1;\n        }\n    }\n    return out;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_max_fill() {\n        let candidate = max_fill;\n        assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n        assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n        assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n        assert_eq!(candidate(vec![vec![1, 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n        assert_eq!(candidate(vec![vec![1, 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n\n    }\n}\n", "entry_point": "max_fill", "instruction": "Write an idiomatic Rust function `max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize` to solve the following problem:\nYou are given a rectangular grid of wells. Each row represents a single well, and each 1 in a row represents a single unit of water. Each well has a corresponding bucket that can be used to extract water from it,  and all buckets have the same capacity. Your task is to use the buckets to empty the wells. Output the number of times you need to lower the buckets. Example 1: \n\nIn the following are some examples of how to use the function:\n>>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1)\n6\nExample 2:\n>>> max_fill(vec![vec![0, 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n5\nExample 3:\n>>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n0\nConstraints:\n* all wells have the same length\n* 1 <= grid.length <= 10^2\n* 1 <= grid[:,1].length <= 10^2\n* grid[i][j] -> 0 | 1\n* 1 <= capacity <= 10\n"}
{"task_id": "Rust/116", "prompt": "/// In this Kata, you have to sort a vector of non-negative integers according to\n/// number of ones in their binary representation in ascending order.\n/// For similar number of ones, sort based on decimal value.\n/// It must be implemented like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n/// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n/// >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n", "canonical_solution": "\n    let mut arr_cp = arr.clone();\n    let mut bin = vec![];\n    let mut m;\n\n    for i in 0..arr_cp.len() {\n        let mut b = 0;\n        let mut n = arr_cp[i].abs();\n        while n > 0 {\n            b += n % 2;\n            n = n / 2;\n        }\n        bin.push(b);\n    }\n    for i in 0..arr_cp.len() {\n        for j in 1..arr_cp.len() {\n            if bin[j] < bin[j - 1] || (bin[j] == bin[j - 1] && arr_cp[j] < arr_cp[j - 1]) {\n                m = arr_cp[j];\n                arr_cp[j] = arr_cp[j - 1];\n                arr_cp[j - 1] = m;\n                m = bin[j];\n                bin[j] = bin[j - 1];\n                bin[j - 1] = m;\n            }\n        }\n    }\n    return arr_cp;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_sort_array() {\n        let candidate = sort_array;\n        assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n        assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n        assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n        assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n        assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n        assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n        assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n        assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n\n    }\n}\n", "entry_point": "sort_array", "instruction": "Write an idiomatic Rust function `sort_array(arr: Vec<isize>) -> Vec<isize>` to solve the following problem:\nIn this Kata, you have to sort a vector of non-negative integers according to number of ones in their binary representation in ascending order. For similar number of ones, sort based on decimal value. It must be implemented like this: \n\nIn the following are some examples of how to use the function:\n>>> sort_array(vec![1, 5, 2, 3, 4])\nvec![1, 2, 3, 4, 5]\n>>> sort_array(vec![-2, -3, -4, -5, -6])\nvec![-6, -5, -4, -3, -2]\n>>> sort_array(vec![1, 0, 2, 3, 4])\nvec![0, 1, 2, 3, 4]\n"}
{"task_id": "Rust/117", "prompt": "/// Given a string s and a natural number n, you have been tasked to implement \n/// a function that returns a vector of all words from string s that contain exactly \n/// n consonants, in order these words appear in the string s.\n/// If the string s is empty then the function should return an empty vector.\n/// Note: you may assume the input string contains only letters and spaces.\n/// Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n/// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\")]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n/// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n", "canonical_solution": "\n    let vowels = \"aeiouAEIOU\";\n    let mut current = String::new();\n    let mut out = Vec::new();\n    let mut numc = 0;\n    let mut s = s.to_string();\n    s.push(' ');\n    for i in 0..s.len() {\n        if s.chars().nth(i).unwrap() == ' ' {\n            if numc == n {\n                out.push(current);\n            }\n            current = String::new();\n            numc = 0;\n        } else {\n            current.push(s.chars().nth(i).unwrap());\n            if (s.chars().nth(i).unwrap() >= 'A' && s.chars().nth(i).unwrap() <= 'Z')\n                || (s.chars().nth(i).unwrap() >= 'a' && s.chars().nth(i).unwrap() <= 'z')\n            {\n                if !vowels.contains(s.chars().nth(i).unwrap()) {\n                    numc += 1;\n                }\n            }\n        }\n    }\n    out\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_select_words() {\n        let candidate = select_words;\n        assert_eq!(candidate(String::from(\"Mary had a little lamb\"), 4), vec![String::from(\"little\")]);\n        assert_eq!(candidate(String::from(\"Mary had a little lamb\"), 3), vec![String::from(\"Mary\"), String::from(\"lamb\")]);\n        assert_eq!(candidate(String::from(\"simple white space\"), 2), Vec::<String>::new());\n        assert_eq!(candidate(String::from(\"Hello world\"), 4), vec![String::from(\"world\")]);\n        assert_eq!(candidate(String::from(\"Uncle sam\"), 3), vec![String::from(\"Uncle\")]);\n        assert_eq!(candidate(String::from(\"\"), 4), Vec::<String>::new());\n        assert_eq!(candidate(String::from(\"a b c d e f\"), 1), vec![String::from(\"b\"), String::from(\"c\"), String::from(\"d\"), String::from(\"f\")]);\n\n    }\n}\n", "entry_point": "select_words", "instruction": "Write an idiomatic Rust function `select_words(s: String, n: isize) -> Vec<String>` to solve the following problem:\nGiven a string s and a natural number n, you have been tasked to implement  a function that returns a vector of all words from string s that contain exactly  n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty vector. Note: you may assume the input string contains only letters and spaces. \n\nIn the following are some examples of how to use the function:\n>>> select_words(String::from(\"Mary had a little lamb\"), 4)\nvec![String::from(\"little\")]\n>>> select_words(String::from(\"Mary had a little lamb\"), 3)\nvec![String::from(\"Mary\"), String::from(\"lamb\")]\n>>> select_words(String::from(\"simple white space\"), 2)\nVec::<String>::new()\n>>> select_words(String::from(\"Hello world\"), 4)\nvec![String::from(\"world\")]\n>>> select_words(String::from(\"Uncle sam\"), 3)\nvec![String::from(\"Uncle\")]\n"}
{"task_id": "Rust/118", "prompt": "/// You are given a word. Your task is to find the closest vowel that stands between \n/// two consonants from the right side of the word (case sensitive).\n/// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n/// find any vowel met the above condition. \n/// You may assume that the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n/// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n", "canonical_solution": "\n    let vowels = \"AEIOUaeiou\";\n    let mut out = \"\".to_string();\n    for i in (1..word.len() - 1).rev() {\n        if vowels.contains(word.chars().nth(i).unwrap()) {\n            if !vowels.contains(word.chars().nth(i + 1).unwrap()) {\n                if !vowels.contains(word.chars().nth(i - 1).unwrap()) {\n                    out.push(word.chars().nth(i).unwrap());\n                    return out;\n                }\n            }\n        }\n    }\n    out\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_get_closest_vowel() {\n        let candidate = get_closest_vowel;\n        assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"u\"));\n        assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n        assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n        assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n        assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n        assert_eq!(candidate(String::from(\"bad\")), String::from(\"a\"));\n        assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n        assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n        assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n        assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n        assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n        assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n        assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n\n    }\n}\n", "entry_point": "get_closest_vowel", "instruction": "Write an idiomatic Rust function `get_closest_vowel(word: String) -> String` to solve the following problem:\nYou are given a word. Your task is to find the closest vowel that stands between  two consonants from the right side of the word (case sensitive). Vowels in the beginning and ending doesn't count. Return empty string if you didn't find any vowel met the above condition.  You may assume that the given string contains English letter only. Example: \n\nIn the following are some examples of how to use the function:\n>>> get_closest_vowel(String::from(\"yogurt\"))\nString::from(\"u\")\n>>> get_closest_vowel(String::from(\"FULL\"))\nString::from(\"U\")\n>>> get_closest_vowel(String::from(\"quick\"))\nString::from(\"\")\n>>> get_closest_vowel(String::from(\"ab\"))\nString::from(\"\")\n"}
{"task_id": "Rust/119", "prompt": "/// You are given a vector of two strings, both strings consist of open\n/// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if it is possible to concatenate the two strings in\n/// some order, that the resulting string will be good.\n/// A string S is considered to be good if and only if all parentheses in S\n/// are balanced. For example: the string '(())()' is good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\")\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>) -> String {\n", "canonical_solution": "\n    let l1 = lst[0].to_string() + lst[1];\n    let mut count = 0;\n    let mut can = true;\n    for i in 0..l1.len() {\n        if l1.chars().nth(i).unwrap() == '(' {\n            count += 1;\n        }\n        if l1.chars().nth(i).unwrap() == ')' {\n            count -= 1;\n        }\n        if count < 0 {\n            can = false;\n        }\n    }\n    if count != 0 {\n        return \"No\";\n    }\n    if can == true {\n        return \"Yes\";\n    }\n    let l1 = lst[1].to_string() + lst[0];\n    let mut can = true;\n    for i in 0..l1.len() {\n        if l1.chars().nth(i).unwrap() == '(' {\n            count += 1;\n        }\n        if l1.chars().nth(i).unwrap() == ')' {\n            count -= 1;\n        }\n        if count < 0 {\n            can = false;\n        }\n    }\n    if can == true {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_match_parens() {\n        let candidate = match_parens;\n        assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"Yes\"));\n        assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\")]), String::from(\"No\"));\n        assert_eq!(candidate(vec![String::from(\"(()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n        assert_eq!(candidate(vec![String::from(\")())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n        assert_eq!(candidate(vec![String::from(\"(())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n        assert_eq!(candidate(vec![String::from(\"()\"), String::from(\"())\")]), String::from(\"No\"));\n        assert_eq!(candidate(vec![String::from(\"(()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n        assert_eq!(candidate(vec![String::from(\"((((\"), String::from(\"((())\")]), String::from(\"No\"));\n        assert_eq!(candidate(vec![String::from(\")(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n        assert_eq!(candidate(vec![String::from(\")(\"), String::from(\")(\")]), String::from(\"No\"));\n        assert_eq!(candidate(vec![String::from(\"(\"), String::from(\")\")]), String::from(\"Yes\"));\n        assert_eq!(candidate(vec![String::from(\")\"), String::from(\"(\")]), String::from(\"Yes\"));\n\n    }\n}\n", "entry_point": "match_parens", "instruction": "Write an idiomatic Rust function `match_parens(lst: Vec<String>) -> String` to solve the following problem:\nYou are given a vector of two strings, both strings consist of open parentheses '(' or close parentheses ')' only. Your job is to check if it is possible to concatenate the two strings in some order, that the resulting string will be good. A string S is considered to be good if and only if all parentheses in S \n\nIn the following are some examples of how to use the function:\n'())' is not.\nReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\nExamples:\n>>> match_parens(vec![String::from(\"()(\"), String::from(\")\")])\nString::from(\"Yes\")\n>>> match_parens(vec![String::from(\")\"), String::from(\")\")])\nString::from(\"No\")\n"}
{"task_id": "Rust/120", "prompt": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n", "canonical_solution": "\n    let mut arr = arr;\n    arr.sort();\n    let mut arr_res: Vec<i32> = arr.iter().rev().take(k as usize).cloned().collect();\n    arr_res.sort();\n    return arr_res;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_maximum() {\n        let candidate = maximum;\n        assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n        assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n        assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n        assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n        assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n        assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n        assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n        assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n        assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n        assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n        assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\n    }\n}\n", "entry_point": "maximum", "instruction": "Write an idiomatic Rust function `maximum(arr: Vec<isize>, k: isize) -> Vec<isize>` to solve the following problem:\nGiven a vector arr of integers and a positive integer k, return a sorted vector  of length k with the maximum k numbers in arr. Example 1: \n\nIn the following are some examples of how to use the function:\n>>> maximum(vec![-3, -4, 5], 3)\nvec![-4, -3, 5]\nExample 2:\n>>> maximum(vec![4, -4, 4], 2)\nvec![4, 4]\nExample 3:\n>>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\nvec![2]\nNote:\n1. The length of the vector will be in the range of [1, 1000].\n2. The elements in the vector will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)\n"}
{"task_id": "Rust/121", "prompt": "/// Given a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5, 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30, 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n", "canonical_solution": "\n    let mut sum = 0;\n    for (indx, elem) in lst.iter().enumerate() {\n        if indx % 2 == 0 {\n            if elem % 2 == 1 {\n                sum += elem;\n            }\n        }\n    }\n    return sum;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_solution() {\n        let candidate = solution;\n        assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n        assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n        assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n        assert_eq!(candidate(vec![5, 9]), 5);\n        assert_eq!(candidate(vec![2, 4, 8]), 0);\n        assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n        assert_eq!(candidate(vec![3, 13, 2, 9]), 3);\n\n    }\n}\n", "entry_point": "solution", "instruction": "Write an idiomatic Rust function `solution(lst: Vec<isize>) -> isize` to solve the following problem:\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions. \n\nIn the following are some examples of how to use the function:\n>>> solution(vec![5, 8, 7, 1])\n12\n>>> solution(vec![3, 3, 3, 3, 3])\n9\n>>> solution(vec![30, 13, 24, 321])\n0\n"}
{"task_id": "Rust/122", "prompt": "/// Given a non-empty vector of integers arr and an integer k, return\n/// the sum of the elements with at most two digits from the first k elements of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n", "canonical_solution": "\n    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] >= -99 && arr[i as usize] <= 99 {\n            sum += arr[i as usize];\n        }\n    }\n    sum\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_add_elements() {\n        let candidate = add_elements;\n        assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n        assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n        assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n        assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n        assert_eq!(candidate(vec![1], 1), 1);\n\n    }\n}\n", "entry_point": "add_elements", "instruction": "Write an idiomatic Rust function `add_elements(arr: Vec<isize>, k: isize) -> isize` to solve the following problem:\nGiven a non-empty vector of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr. Example: \n\nIn the following are some examples of how to use the function:\n>>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n24\nConstraints:\n1. 1 <= len(arr) <= 100\n2. 1 <= k <= len(arr)\n"}
{"task_id": "Rust/123", "prompt": "/// Given a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n/// as follows: start with any positive integer n. Then each term is obtained from the \n/// previous term as follows: if the previous term is even, the next term is one half of \n/// the previous term. If the previous term is odd, the next term is 3 times the previous\n/// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n/// 2. returned vector sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n", "canonical_solution": "\n    let mut out = vec![1];\n    let mut n = n;\n    while n != 1 {\n        if n % 2 == 1 {\n            out.push(n);\n            n = n * 3 + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    out.sort();\n    out\n}\n\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_get_odd_collatz() {\n        let candidate = get_odd_collatz;\n        assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n        assert_eq!(candidate(5), vec![1, 5]);\n        assert_eq!(candidate(12), vec![1, 3, 5]);\n        assert_eq!(candidate(1), vec![1]);\n\n    }\n}\n", "entry_point": "get_odd_collatz", "instruction": "Write an idiomatic Rust function `get_odd_collatz(n: isize) -> Vec<isize>` to solve the following problem:\nGiven a positive integer n, return a sorted vector that has the odd numbers in collatz sequence. The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n. Then each term is obtained from the  previous term as follows: if the previous term is even, the next term is one half of  the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1. Note:  1. Collatz(1) is [1]. 2. returned vector sorted in increasing order. \n\nIn the following are some examples of how to use the function:\nget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n>>> get_odd_collatz(5)\nvec![1, 5]\n"}
{"task_id": "Rust/124", "prompt": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n", "canonical_solution": "\n    let mut mm = 0;\n    let mut dd = 0;\n    let mut yy = 0;\n    let mut i = 0;\n    if date.len() != 10 {\n        return false;\n    }\n    for i in 0..10 {\n        if i == 2 || i == 5 {\n            if date.chars().nth(i).unwrap() != '-' {\n                return false;\n            }\n        } else if date.chars().nth(i).unwrap() < '0' || date.chars().nth(i).unwrap() > '9' {\n            return false;\n        }\n    }\n    mm = date[0..2].parse::<i32>().unwrap();\n    dd = date[3..5].parse::<i32>().unwrap();\n    yy = date[6..10].parse::<i32>().unwrap();\n    if mm < 1 || mm > 12 {\n        return false;\n    }\n    if dd < 1 || dd > 31 {\n        return false;\n    }\n    if dd == 31 && (mm == 4 || mm == 6 || mm == 9 || mm == 11 || mm == 2) {\n        return false;\n    }\n    if dd == 30 && mm == 2 {\n        return false;\n    }\n    return true;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_valid_date() {\n        let candidate = valid_date;\n        assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n        assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n        assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n        assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n        assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n        assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n        assert_eq!(candidate(String::from(\"\")), false);\n        assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n        assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n        assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n        assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n        assert_eq!(candidate(String::from(\"04122003\")), false);\n        assert_eq!(candidate(String::from(\"20030412\")), false);\n        assert_eq!(candidate(String::from(\"2003-04\")), false);\n        assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n        assert_eq!(candidate(String::from(\"04-2003\")), false);\n\n    }\n}\n", "entry_point": "valid_date", "instruction": "Write an idiomatic Rust function `valid_date(date: String) -> bool` to solve the following problem:\nYou have to write a function which validates a given date string and returns true if the date is valid otherwise false. The date is valid if all of the following rules are satisfied: 1. The date string is not empty. 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. 3. The months should not be less than 1 or higher than 12. 4. The date should be in the format: mm-dd-yyyy \n\nIn the following are some examples of how to use the function:\n>>> valid_date(String::from(\"03-11-2000\"))\ntrue\n>>> valid_date(String::from(\"15-01-2012\"))\nfalse\n>>> valid_date(String::from(\"04-0-2040\"))\nfalse\n>>> valid_date(String::from(\"06-04-2020\"))\ntrue\n>>> valid_date(String::from(\"06/04/2020\"))\nfalse\n"}
{"task_id": "Rust/126", "prompt": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n", "canonical_solution": "\n    for i in 1..lst.len() {\n        if lst[i] < lst[i - 1] {\n            return false;\n        }\n        if i >= 2 && lst[i] == lst[i - 1] && lst[i] == lst[i - 2] {\n            return false;\n        }\n    }\n    true\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_is_sorted() {\n        let candidate = is_sorted;\n        assert_eq!(candidate(vec![5]), true);\n        assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n        assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n        assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n        assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n        assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n        assert_eq!(candidate(Vec::<isize>::new()), true);\n        assert_eq!(candidate(vec![1]), true);\n        assert_eq!(candidate(vec![3, 2, 1]), false);\n        assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n        assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n        assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n        assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n\n    }\n}\n", "entry_point": "is_sorted", "instruction": "Write an idiomatic Rust function `is_sorted(lst: Vec<isize>) -> bool` to solve the following problem:\nGiven a vector of numbers, return whether or not they are sorted in ascending order. If vector has more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers. \n\nIn the following are some examples of how to use the function:\n>>> is_sorted(vec![5])\ntrue\n>>> is_sorted(vec![1, 2, 3, 4, 5])\ntrue\n>>> is_sorted(vec![1, 3, 2, 4, 5])\nfalse\n>>> is_sorted(vec![1, 2, 3, 4, 5, 6])\ntrue\n>>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\ntrue\n>>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\nfalse\n>>> is_sorted(vec![1, 2, 2, 3, 3, 4])\ntrue\n>>> is_sorted(vec![1, 2, 2, 2, 3, 4])\nfalse\n"}
{"task_id": "Rust/127", "prompt": "/// You are given two intervals,\n/// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n/// The given intervals are closed which means that the interval (start, end)\n/// includes both start and end.\n/// For each given interval, it is assumed that its start is less or equal its end.\n/// Your task is to determine whether the length of intersection of these two \n/// intervals is a prime number.\n/// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n/// which its length is 1, which not a prime number.\n/// If the length of the intersection is a prime number, return \"YES\",\n/// otherwise, return \"NO\".\n/// If the two intervals don't intersect, return \"NO\".\n/// [input/output] samples:\n/// >>> intersection((1, 2), (2, 3))\n/// String::from(\"NO\")\n/// >>> intersection((-1, 1), (0, 4))\n/// String::from(\"NO\")\n/// >>> intersection((-3, -1), (-5, 5))\n/// String::from(\"YES\")\nfn intersection(interval1: (isize, isize), interval2: (isize, isize)) -> String {\n", "canonical_solution": "\n    let inter1 = std::cmp::max(interval1[0], interval2[0]);\n    let inter2 = std::cmp::min(interval1[1], interval2[1]);\n    let l = inter2 - inter1;\n    if l < 2 {\n        return \"NO\".to_string();\n    }\n    for i in 2..l {\n        if l % i == 0 {\n            return \"NO\".to_string();\n        }\n    }\n    return \"YES\".to_string();\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_intersection() {\n        let candidate = intersection;\n        assert_eq!(candidate((1, 2), (2, 3)), String::from(\"NO\"));\n        assert_eq!(candidate((-1, 1), (0, 4)), String::from(\"NO\"));\n        assert_eq!(candidate((-3, -1), (-5, 5)), String::from(\"YES\"));\n        assert_eq!(candidate((-2, 2), (-4, 0)), String::from(\"YES\"));\n        assert_eq!(candidate((-11, 2), (-1, -1)), String::from(\"NO\"));\n        assert_eq!(candidate((1, 2), (3, 5)), String::from(\"NO\"));\n        assert_eq!(candidate((1, 2), (1, 2)), String::from(\"NO\"));\n        assert_eq!(candidate((-2, -2), (-3, -2)), String::from(\"NO\"));\n\n    }\n}\n", "entry_point": "intersection", "instruction": "Write an idiomatic Rust function `intersection(interval1: (isize, isize), interval2: (isize, isize)) -> String` to solve the following problem:\nYou are given two intervals, \n\nIn the following are some examples of how to use the function:\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n[input/output] samples:\n>>> intersection((1, 2), (2, 3))\nString::from(\"NO\")\n>>> intersection((-1, 1), (0, 4))\nString::from(\"NO\")\n>>> intersection((-3, -1), (-5, 5))\nString::from(\"YES\")\n"}
{"task_id": "Rust/128", "prompt": "/// You are given a vector arr of integers and you need to return\n/// sum of magnitudes of integers multiplied by product of all signs\n/// of each number in the vector, represented by 1, -1 or 0.\n/// Note: return None for empty arr.\n/// Example:\n/// >>> prod_signs(vec![1, 2, 2, -4])\n/// Some(9)\n/// >>> prod_signs(vec![0, 1])\n/// Some(0)\n/// >>> prod_signs(vec![])\n/// None\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n", "canonical_solution": "\n    if arr.is_empty() {\n        return -32768;\n    }\n    let mut sum = 0;\n    let mut prods = 1;\n    for i in arr {\n        sum += i.abs();\n        if i == 0 {\n            prods = 0;\n        }\n        if i < 0 {\n            prods = -prods;\n        }\n    }\n    sum * prods\n}\n\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_prod_signs() {\n        let candidate = prod_signs;\n        assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n        assert_eq!(candidate(vec![0, 1]), Some(0));\n        assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n        assert_eq!(candidate(Vec::<isize>::new()), None);\n        assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n        assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n        assert_eq!(candidate(vec![-1, 1, 1, 1]), Some(-4));\n        assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\n    }\n}\n", "entry_point": "prod_signs", "instruction": "Write an idiomatic Rust function `prod_signs(arr: Vec<isize>) -> Option<isize>` to solve the following problem:\nYou are given a vector arr of integers and you need to return sum of magnitudes of integers multiplied by product of all signs of each number in the vector, represented by 1, -1 or 0. Note: return None for empty arr. Example: \n\nIn the following are some examples of how to use the function:\n>>> prod_signs(vec![1, 2, 2, -4])\nSome(9)\n>>> prod_signs(vec![0, 1])\nSome(0)\n>>> prod_signs(vec![])\nNone\n"}
{"task_id": "Rust/129", "prompt": "/// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n/// each cell of the grid contains a value. Every integer in the range [1, N * N]\n/// inclusive appears exactly once on the cells of the grid.\n/// You have to find the minimum path of length k in the grid. You can start\n/// from any cell, and in each step you can move to any of the neighbor cells,\n/// in other words, you can go to cells which share an edge with you current\n/// cell.\n/// Please note that a path of length k means visiting exactly k cells (not\n/// necessarily distinct).\n/// You CANNOT go off the grid.\n/// A path A (of length k) is considered less than a path B (of length k) if\n/// after making the ordered vectors of the values on the cells that A and B go\n/// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n/// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n/// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n/// lst_A[j] = lst_B[j].\n/// It is guaranteed that the answer is unique.\n/// Return an ordered vector of the values on the cells that the minimum path go through.\n/// Examples:    \n/// >>> min_path(vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]], 3)\n/// vec![1, 2, 1]\n/// >>> min_path(vec![vec![5, 9, 3], vec![4, 1, 6], vec![7, 8, 2]], 1)\n/// vec![1]\nfn min_path(grid: Vec<Vec<isize>>, k: isize) -> Vec<isize> {\n", "canonical_solution": "\n    let mut out: Vec<i32> = vec![];\n    let mut x = 0;\n    let mut y = 0;\n    let mut min: i32 = (grid.len() * grid.len()) as i32;\n    for i in 0..grid.len() {\n        for j in 0..grid[i].len() {\n            if grid[i][j] == 1 {\n                x = i;\n                y = j;\n            }\n        }\n    }\n    if x > 0 && grid[x - 1][y] < min {\n        min = grid[x - 1][y];\n    }\n    if x < grid.len() - 1 && grid[x + 1][y] < min {\n        min = grid[x + 1][y];\n    }\n    if y > 0 && grid[x][y - 1] < min {\n        min = grid[x][y - 1];\n    }\n    if y < grid.len() - 1 && grid[x][y + 1] < min {\n        min = grid[x][y + 1];\n    }\n    let mut out = vec![];\n    for i in 0..k {\n        if i % 2 == 0 {\n            out.push(1);\n        } else {\n            out.push(min);\n        }\n    }\n    out\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_min_path() {\n        let candidate = min_path;\n        assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]], 3), vec![1, 2, 1]);\n        assert_eq!(candidate(vec![vec![5, 9, 3], vec![4, 1, 6], vec![7, 8, 2]], 1), vec![1]);\n        assert_eq!(candidate(vec![vec![1, 2, 3, 4], vec![5, 6, 7, 8], vec![9, 10, 11, 12], vec![13, 14, 15, 16]], 4), vec![1, 2, 1, 2]);\n        assert_eq!(candidate(vec![vec![6, 4, 13, 10], vec![5, 7, 12, 1], vec![3, 16, 11, 15], vec![8, 14, 9, 2]], 7), vec![1, 10, 1, 10, 1, 10, 1]);\n        assert_eq!(candidate(vec![vec![8, 14, 9, 2], vec![6, 4, 13, 15], vec![5, 7, 1, 12], vec![3, 10, 11, 16]], 5), vec![1, 7, 1, 7, 1]);\n        assert_eq!(candidate(vec![vec![11, 8, 7, 2], vec![5, 16, 14, 4], vec![9, 3, 15, 6], vec![12, 13, 10, 1]], 9), vec![1, 6, 1, 6, 1, 6, 1, 6, 1]);\n        assert_eq!(candidate(vec![vec![12, 13, 10, 1], vec![9, 3, 15, 6], vec![5, 16, 14, 4], vec![11, 8, 7, 2]], 12), vec![1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]);\n        assert_eq!(candidate(vec![vec![2, 7, 4], vec![3, 1, 5], vec![6, 8, 9]], 8), vec![1, 3, 1, 3, 1, 3, 1, 3]);\n        assert_eq!(candidate(vec![vec![6, 1, 5], vec![3, 8, 9], vec![2, 7, 4]], 8), vec![1, 5, 1, 5, 1, 5, 1, 5]);\n        assert_eq!(candidate(vec![vec![1, 2], vec![3, 4]], 10), vec![1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\n        assert_eq!(candidate(vec![vec![1, 3], vec![3, 2]], 10), vec![1, 3, 1, 3, 1, 3, 1, 3, 1, 3]);\n\n    }\n}\n", "entry_point": "min_path", "instruction": "Write an idiomatic Rust function `min_path(grid: Vec<Vec<isize>>, k: isize) -> Vec<isize>` to solve the following problem:\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k,  each cell of the grid contains a value. Every integer in the range [1, N * N] inclusive appears exactly once on the cells of the grid. You have to find the minimum path of length k in the grid. You can start from any cell, and in each step you can move to any of the neighbor cells, in other words, you can go to cells which share an edge with you current cell. Please note that a path of length k means visiting exactly k cells (not necessarily distinct). You CANNOT go off the grid. A path A (of length k) is considered less than a path B (of length k) if after making the ordered vectors of the values on the cells that A and B go through (let's call them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other words, there exist an integer index i (1 <= i <= k) such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have lst_A[j] = lst_B[j]. It is guaranteed that the answer is unique. Return an ordered vector of the values on the cells that the minimum path go through. \n\nIn the following are some examples of how to use the function:\n>>> min_path(vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]], 3)\nvec![1, 2, 1]\n>>> min_path(vec![vec![5, 9, 3], vec![4, 1, 6], vec![7, 8, 2]], 1)\nvec![1]\n"}
{"task_id": "Rust/130", "prompt": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n", "canonical_solution": "\n    let mut out = vec![1, 3];\n    if n == 0 {\n        return vec![1];\n    }\n    for i in 2..=n {\n        if i % 2 == 0 {\n            out.push(1 + i / 2);\n        } else {\n            out.push(out[(i - 1) as usize] + out[(i - 2) as usize] + 1 + (i + 1) / 2);\n        }\n    }\n    out\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_tri() {\n        let candidate = tri;\n        assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n        assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n        assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n        assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n        assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n        assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n        assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n        assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n        assert_eq!(candidate(0), vec![1]);\n        assert_eq!(candidate(1), vec![1, 3]);\n\n    }\n}\n", "entry_point": "tri", "instruction": "Write an idiomatic Rust function `tri(n: isize) -> Vec<isize>` to solve the following problem:\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in  the last couple centuries. However, what people don't know is Tribonacci sequence. Tribonacci sequence is defined by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd. \n\nIn the following are some examples of how to use the function:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n= 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\n>>> tri(3)\nvec![1, 3, 2, 8]\n"}
{"task_id": "Rust/131", "prompt": "/// Given a positive integer n, return the product of the odd digits.\n/// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n/// 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize) -> isize {\n", "canonical_solution": "\n    let mut prod: i32 = 1;\n    let mut has = 0;\n    let s = n.to_string();\n    for i in 0..s.len() {\n        if s.chars().nth(i).unwrap().to_digit(10).unwrap() % 2 == 1 {\n            has = 1;\n            prod = prod * (s.chars().nth(i).unwrap().to_digit(10).unwrap()) as i32;\n        }\n    }\n    if has == 0 {\n        return 0;\n    }\n    prod\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_digits() {\n        let candidate = digits;\n        assert_eq!(candidate(5), 5);\n        assert_eq!(candidate(54), 5);\n        assert_eq!(candidate(120), 1);\n        assert_eq!(candidate(5014), 5);\n        assert_eq!(candidate(98765), 315);\n        assert_eq!(candidate(5576543), 2625);\n        assert_eq!(candidate(2468), 0);\n\n    }\n}\n", "entry_point": "digits", "instruction": "Write an idiomatic Rust function `digits(n: isize) -> isize` to solve the following problem:\nGiven a positive integer n, return the product of the odd digits. Return 0 if all digits are even. \n\nIn the following are some examples of how to use the function:\n>>> digits(1)\n1\n>>> digits(4)\n0\n>>> digits(235)\n15\n"}
{"task_id": "Rust/132", "prompt": "/// Create a function that takes a string as input which contains only square brackets.\n/// The function should return true if and only if there is a valid subsequence of brackets \n/// where at least one bracket in the subsequence is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"[]]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n/// false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"[[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\nfn is_nested(string: String) -> bool {\n", "canonical_solution": "\n    let mut count = 0;\n    let mut maxcount = 0;\n    for i in 0..str.len() {\n        if str.chars().nth(i).unwrap() == '[' {\n            count += 1;\n        }\n        if str.chars().nth(i).unwrap() == ']' {\n            count -= 1;\n        }\n        if count < 0 {\n            count = 0;\n        }\n        if count > maxcount {\n            maxcount = count;\n        }\n        if count <= maxcount - 2 {\n            return true;\n        }\n    }\n    return false;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_is_nested() {\n        let candidate = is_nested;\n        assert_eq!(candidate(String::from(\"[[]]\")), true);\n        assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n        assert_eq!(candidate(String::from(\"[][]\")), false);\n        assert_eq!(candidate(String::from(\"[]\")), false);\n        assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n        assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n        assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n        assert_eq!(candidate(String::from(\"[[]\")), false);\n        assert_eq!(candidate(String::from(\"[]]\")), false);\n        assert_eq!(candidate(String::from(\"[[]][[\")), true);\n        assert_eq!(candidate(String::from(\"[[][]]\")), true);\n        assert_eq!(candidate(String::from(\"\")), false);\n        assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n        assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\n    }\n}\n", "entry_point": "is_nested", "instruction": "Write an idiomatic Rust function `is_nested(string: String) -> bool` to solve the following problem:\nCreate a function that takes a string as input which contains only square brackets. The function should return true if and only if there is a valid subsequence of brackets  where at least one bracket in the subsequence is nested. \n\nIn the following are some examples of how to use the function:\n>>> is_nested(String::from(\"[[]]\"))\ntrue\n>>> is_nested(String::from(\"[]]]]]]][[[[[]\"))\nfalse\n>>> is_nested(String::from(\"[][]\"))\nfalse\n>>> is_nested(String::from(\"[]\"))\nfalse\n>>> is_nested(String::from(\"[[][]]\"))\ntrue\n>>> is_nested(String::from(\"[[]][[\"))\ntrue\n"}
{"task_id": "Rust/133", "prompt": "/// You are given a vector of numbers.\n/// You need to return the sum of squared numbers in the given vector,\n/// round each element in the vector to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0, 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4, 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n", "canonical_solution": "\n    let mut sum: f32 = 0.0;\n    for i in 0..lst.len() {\n        sum = sum + (lst[i].ceil() * lst[i].ceil());\n    }\n    sum as i32\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_sum_squares() {\n        let candidate = sum_squares;\n        assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n        assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n        assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n        assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n        assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n        assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n        assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n        assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n        assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n        assert_eq!(candidate(vec![0.0]), 0);\n        assert_eq!(candidate(vec![-1.0]), 1);\n        assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n\n    }\n}\n", "entry_point": "sum_squares", "instruction": "Write an idiomatic Rust function `sum_squares(lst: Vec<f64>) -> isize` to solve the following problem:\nYou are given a vector of numbers. You need to return the sum of squared numbers in the given vector, round each element in the vector to the upper int(Ceiling) first. \n\nIn the following are some examples of how to use the function:\n>>> lst(vec![1.0, 2.0, 3.0])\n14\n>>> lst(vec![1.0, 4.0, 9.0])\n98\n>>> lst(vec![1.0, 3.0, 5.0, 7.0])\n84\n>>> lst(vec![1.4, 4.2, 0.0])\n29\n>>> lst(vec![-2.4, 1.0, 1.0])\n6\n"}
{"task_id": "Rust/134", "prompt": "/// Create a function that returns true if the last character\n/// of a given string is an alphabetical character and is not\n/// a part of a word, and false otherwise.\n/// Note: \"word\" is a group of characters separated by space.\n/// Examples:\n/// >>> check_if_last_char_is_a_letter(String::from(\"apple pie\"))\n/// false\n/// >>> check_if_last_char_is_a_letter(String::from(\"apple pi e\"))\n/// true\n/// >>> check_if_last_char_is_a_letter(String::from(\"apple pi e \"))\n/// false\n/// >>> check_if_last_char_is_a_letter(String::from(\"\"))\n/// false\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n", "canonical_solution": "\n    if txt.len() == 0 {\n        return false;\n    }\n    let chr = txt.chars().last().unwrap();\n    if chr < 'A' || (chr > 'Z' && chr < 'a') || chr > 'z' {\n        return false;\n    }\n    if txt.len() == 1 {\n        return true;\n    }\n    let chr = txt.chars().nth(txt.len() - 2).unwrap();\n    if (chr >= 'A' && chr <= 'Z') || (chr >= 'a' && chr <= 'z') {\n        return false;\n    }\n    true\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_check_if_last_char_is_a_letter() {\n        let candidate = check_if_last_char_is_a_letter;\n        assert_eq!(candidate(String::from(\"apple\")), false);\n        assert_eq!(candidate(String::from(\"apple pi e\")), true);\n        assert_eq!(candidate(String::from(\"eeeee\")), false);\n        assert_eq!(candidate(String::from(\"A\")), true);\n        assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n        assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n        assert_eq!(candidate(String::from(\"\")), false);\n        assert_eq!(candidate(String::from(\"eeeee e \")), false);\n        assert_eq!(candidate(String::from(\"apple pie\")), false);\n        assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\n    }\n}\n", "entry_point": "check_if_last_char_is_a_letter", "instruction": "Write an idiomatic Rust function `check_if_last_char_is_a_letter(txt: String) -> bool` to solve the following problem:\nCreate a function that returns true if the last character of a given string is an alphabetical character and is not a part of a word, and false otherwise. Note: \"word\" is a group of characters separated by space. \n\nIn the following are some examples of how to use the function:\n>>> check_if_last_char_is_a_letter(String::from(\"apple pie\"))\nfalse\n>>> check_if_last_char_is_a_letter(String::from(\"apple pi e\"))\ntrue\n>>> check_if_last_char_is_a_letter(String::from(\"apple pi e \"))\nfalse\n>>> check_if_last_char_is_a_letter(String::from(\"\"))\nfalse\n"}
{"task_id": "Rust/135", "prompt": "/// Create a function which returns the largest index of an element which\n/// is not greater than or equal to the element immediately preceding it. If\n/// no such element exists then return -1. The given vector will not contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n", "canonical_solution": "\n    let mut max: i32 = -1;\n    for i in 0..arr.len() {\n        if arr[i] <= i as i32 {\n            max = i as i32;\n        }\n    }\n    max\n}\n\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_can_arrange() {\n        let candidate = can_arrange;\n        assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n        assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n        assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n        assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n        assert_eq!(candidate(Vec::<isize>::new()), -1);\n\n    }\n}\n", "entry_point": "can_arrange", "instruction": "Write an idiomatic Rust function `can_arrange(arr: Vec<isize>) -> isize` to solve the following problem:\nCreate a function which returns the largest index of an element which is not greater than or equal to the element immediately preceding it. If no such element exists then return -1. The given vector will not contain duplicate values. \n\nIn the following are some examples of how to use the function:\n>>> can_arrange(vec![1, 2, 4, 3, 5])\n3\n>>> can_arrange(vec![1, 2, 3])\n-1\n"}
{"task_id": "Rust/136", "prompt": "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the largest of negative integers, and 'b' is the smallest\n/// of positive integers in a vector.\n/// If there is no negative or positive integers, return them as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3, 5, 7])\n/// (None, Some(1))\n/// >>> largest_smallest_integers(vec![])\n/// (None, None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst: Vec<isize>) -> (Option<isize>, Option<isize>) {\n", "canonical_solution": "\n    let mut maxneg = 0;\n    let mut minpos = 0;\n    for i in 0..lst.len() {\n        if lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg) {\n            maxneg = lst[i];\n        }\n        if lst[i] > 0 && (minpos == 0 || lst[i] < minpos) {\n            minpos = lst[i];\n        }\n    }\n    vec![maxneg, minpos]\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_largest_smallest_integers() {\n        let candidate = largest_smallest_integers;\n        assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n        assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n        assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2), Some(1)));\n        assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7), Some(2)));\n        assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n        assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n        assert_eq!(candidate(vec![0]), (None, None));\n        assert_eq!(candidate(vec![-1, -3, -5, -6]), (Some(-1), None));\n        assert_eq!(candidate(vec![-1, -3, -5, -6, 0]), (Some(-1), None));\n        assert_eq!(candidate(vec![-6, -4, -4, -3, 1]), (Some(-3), Some(1)));\n        assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]), (Some(-3), Some(1)));\n\n    }\n}\n", "entry_point": "largest_smallest_integers", "instruction": "Write an idiomatic Rust function `largest_smallest_integers(lst: Vec<isize>) -> (Option<isize>, Option<isize>)` to solve the following problem:\nCreate a function that returns a tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the smallest of positive integers in a vector. If there is no negative or positive integers, return them as None. \n\nIn the following are some examples of how to use the function:\n>>> largest_smallest_integers(vec![2, 4, 1, 3, 5, 7])\n(None, Some(1))\n>>> largest_smallest_integers(vec![])\n(None, None)\n>>> largest_smallest_integers(vec![0])\n(None, None)\n"}
{"task_id": "Rust/138", "prompt": "/// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n/// Example\n/// >>> is_equal_to_sum_even(4)\n/// false\n/// >>> is_equal_to_sum_even(6)\n/// false\n/// >>> is_equal_to_sum_even(8)\n/// true\nfn is_equal_to_sum_even(n: isize) -> bool {\n", "canonical_solution": "\n    if n % 2 == 0 && n >= 8 {\n        return true;\n    }\n    return false;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_is_equal_to_sum_even() {\n        let candidate = is_equal_to_sum_even;\n        assert_eq!(candidate(4), false);\n        assert_eq!(candidate(6), false);\n        assert_eq!(candidate(8), true);\n        assert_eq!(candidate(10), true);\n        assert_eq!(candidate(11), false);\n        assert_eq!(candidate(12), true);\n        assert_eq!(candidate(13), false);\n        assert_eq!(candidate(16), true);\n\n    }\n}\n", "entry_point": "is_equal_to_sum_even", "instruction": "Write an idiomatic Rust function `is_equal_to_sum_even(n: isize) -> bool` to solve the following problem:\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers Example \n\nIn the following are some examples of how to use the function:\n>>> is_equal_to_sum_even(4)\nfalse\n>>> is_equal_to_sum_even(6)\nfalse\n>>> is_equal_to_sum_even(8)\ntrue\n"}
{"task_id": "Rust/139", "prompt": "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n", "canonical_solution": "\n    let mut fact = 1;\n    let mut bfact: i64 = 1;\n    for i in 1..=n {\n        fact = fact * i;\n        bfact = bfact * fact as i64;\n    }\n    bfact\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_special_factorial() {\n        let candidate = special_factorial;\n        assert_eq!(candidate(4), 288);\n        assert_eq!(candidate(5), 34560);\n        assert_eq!(candidate(7), 125411328000);\n        assert_eq!(candidate(1), 1);\n\n    }\n}\n", "entry_point": "special_factorial", "instruction": "Write an idiomatic Rust function `special_factorial(n: isize) -> isize` to solve the following problem:\nThe Brazilian factorial is defined as: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 \n\nIn the following are some examples of how to use the function:\n>>> special_factorial(4)\n288\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n"}
{"task_id": "Rust/140", "prompt": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n", "canonical_solution": "\n    let mut out = String::new();\n    let mut spacelen = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spacelen += 1;\n        } else {\n            if spacelen == 1 {\n                out.push('_');\n            }\n            if spacelen == 2 {\n                out.push_str(\"__\");\n            }\n            if spacelen > 2 {\n                out.push('-');\n            }\n            spacelen = 0;\n            out.push(c);\n        }\n    }\n    if spacelen == 1 {\n        out.push('_');\n    }\n    if spacelen == 2 {\n        out.push_str(\"__\");\n    }\n    if spacelen > 2 {\n        out.push('-');\n    }\n    out\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_fix_spaces() {\n        let candidate = fix_spaces;\n        assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n        assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n        assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n        assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n        assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n\n    }\n}\n", "entry_point": "fix_spaces", "instruction": "Write an idiomatic Rust function `fix_spaces(text: String) -> String` to solve the following problem:\nGiven a string text, replace all spaces in it with underscores,  and if a string has more than 2 consecutive spaces,  then replace all consecutive spaces with -  \n\nIn the following are some examples of how to use the function:\n>>> fix_spaces(String::from(\" Example\"))\nString::from(\"Example\")\n>>> fix_spaces(String::from(\" Example 1\"))\nString::from(\"Example_1\")\n>>> fix_spaces(String::from(\" Example 2\"))\nString::from(\"_Example_2\")\n>>> fix_spaces(String::from(\" Example 3\"))\nString::from(\"_Example-3\")\n"}
{"task_id": "Rust/141", "prompt": "/// Create a function which takes a string representing a file's name, and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n/// A file's name is considered to be valid if and only if all the following conditions \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in the file's name.\n/// - The file's name contains exactly one dot '.'\n/// - The substring before the dot should not be empty, and it starts with a letter from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>> file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n/// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\")\nfn file_name_check(file_name: String) -> String {\n", "canonical_solution": "\n    let mut numdigit = 0;\n    let mut numdot = 0;\n    if file_name.len() < 5 {\n        return \"No\";\n    }\n    let w = file_name.chars().nth(0).unwrap();\n    if w < 'A' || (w > 'Z' && w < 'a') || w > 'z' {\n        return \"No\";\n    }\n    let last = &file_name[file_name.len() - 4..];\n    if last != \".txt\" && last != \".exe\" && last != \".dll\" {\n        return \"No\";\n    }\n    for c in file_name.chars() {\n        if c >= '0' && c <= '9' {\n            numdigit += 1;\n        }\n        if c == '.' {\n            numdot += 1;\n        }\n    }\n    if numdigit > 3 || numdot != 1 {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_file_name_check() {\n        let candidate = file_name_check;\n        assert_eq!(candidate(String::from(\"example.txt\")), String::from(\"Yes\"));\n        assert_eq!(candidate(String::from(\"1example.dll\")), String::from(\"No\"));\n        assert_eq!(candidate(String::from(\"s1sdf3.asd\")), String::from(\"No\"));\n        assert_eq!(candidate(String::from(\"K.dll\")), String::from(\"Yes\"));\n        assert_eq!(candidate(String::from(\"MY16FILE3.exe\")), String::from(\"Yes\"));\n        assert_eq!(candidate(String::from(\"His12FILE94.exe\")), String::from(\"No\"));\n        assert_eq!(candidate(String::from(\"_Y.txt\")), String::from(\"No\"));\n        assert_eq!(candidate(String::from(\"?aREYA.exe\")), String::from(\"No\"));\n        assert_eq!(candidate(String::from(\"/this_is_valid.dll\")), String::from(\"No\"));\n        assert_eq!(candidate(String::from(\"this_is_valid.wow\")), String::from(\"No\"));\n        assert_eq!(candidate(String::from(\"this_is_valid.txt\")), String::from(\"Yes\"));\n        assert_eq!(candidate(String::from(\"this_is_valid.txtexe\")), String::from(\"No\"));\n        assert_eq!(candidate(String::from(\"#this2_i4s_5valid.ten\")), String::from(\"No\"));\n        assert_eq!(candidate(String::from(\"@this1_is6_valid.exe\")), String::from(\"No\"));\n        assert_eq!(candidate(String::from(\"this_is_12valid.6exe4.txt\")), String::from(\"No\"));\n        assert_eq!(candidate(String::from(\"all.exe.txt\")), String::from(\"No\"));\n        assert_eq!(candidate(String::from(\"I563_No.exe\")), String::from(\"Yes\"));\n        assert_eq!(candidate(String::from(\"Is3youfault.txt\")), String::from(\"Yes\"));\n        assert_eq!(candidate(String::from(\"no_one#knows.dll\")), String::from(\"Yes\"));\n        assert_eq!(candidate(String::from(\"1I563_Yes3.exe\")), String::from(\"No\"));\n        assert_eq!(candidate(String::from(\"I563_Yes3.txtt\")), String::from(\"No\"));\n        assert_eq!(candidate(String::from(\"final..txt\")), String::from(\"No\"));\n        assert_eq!(candidate(String::from(\"final132\")), String::from(\"No\"));\n        assert_eq!(candidate(String::from(\"_f4indsartal132.\")), String::from(\"No\"));\n        assert_eq!(candidate(String::from(\".txt\")), String::from(\"No\"));\n        assert_eq!(candidate(String::from(\"s.\")), String::from(\"No\"));\n\n    }\n}\n", "entry_point": "file_name_check", "instruction": "Write an idiomatic Rust function `file_name_check(file_name: String) -> String` to solve the following problem:\nCreate a function which takes a string representing a file's name, and returns 'Yes' if the the file's name is valid, and returns 'No' otherwise. A file's name is considered to be valid if and only if all the following conditions  are met: - There should not be more than three digits ('0'-'9') in the file's name. - The file's name contains exactly one dot '.' - The substring before the dot should not be empty, and it starts with a letter from  the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dot should be one of these: ['txt', 'exe', 'dll'] \n\nIn the following are some examples of how to use the function:\n>>> file_name_check(String::from(\"example.txt\"))\nString::from(\"Yes\")\n>>> file_name_check(String::from(\"1example.dll\"))\nString::from(\"No\")\n"}
{"task_id": "Rust/142", "prompt": "/// \"\n/// This function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \n/// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n/// change the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1, 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn sum_squares(lst: Vec<isize>) -> isize {\n", "canonical_solution": "\n    let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 3 == 0 {\n            sum += lst[i] * lst[i];\n        } else if i % 4 == 0 {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_sum_squares() {\n        let candidate = sum_squares;\n        assert_eq!(candidate(vec![1, 2, 3]), 6);\n        assert_eq!(candidate(vec![1, 4, 9]), 14);\n        assert_eq!(candidate(Vec::<isize>::new()), 0);\n        assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n        assert_eq!(candidate(vec![-1, -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n        assert_eq!(candidate(vec![0]), 0);\n        assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n        assert_eq!(candidate(vec![-56, -99, 1, 0, -2]), 3030);\n        assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n        assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]), -14196);\n        assert_eq!(candidate(vec![-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n\n    }\n}\n", "entry_point": "sum_squares", "instruction": "Write an idiomatic Rust function `sum_squares(lst: Vec<isize>) -> isize` to solve the following problem:\n\" This function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not  change the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.  \n\nIn the following are some examples of how to use the function:\n>>> lst\nvec![1, 2, 3]\n>>> lst\nvec![]\n>>> lst\nvec![-1, -5, 2, -1, -5]\n"}
{"task_id": "Rust/143", "prompt": "/// You are given a string representing a sentence,\n/// the sentence contains some words separated by a space,\n/// and you have to return a string that contains the words from the original sentence,\n/// whose lengths are prime numbers,\n/// the order of the words in the new string should be the same as the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence: String) -> String {\n", "canonical_solution": "\n    let mut out = String::new();\n    let mut current = String::new();\n    let mut sentence = sentence.to_string();\n    sentence.push(' ');\n\n    for i in 0..sentence.len() {\n        if sentence.chars().nth(i).unwrap() != ' ' {\n            current.push(sentence.chars().nth(i).unwrap());\n        } else {\n            let mut isp = true;\n            let l = current.len();\n            if l < 2 {\n                isp = false;\n            }\n            for j in 2..(l as f64).sqrt() as usize + 1 {\n                if l % j == 0 {\n                    isp = false;\n                }\n            }\n            if isp {\n                out.push_str(&current);\n                out.push(' ');\n            }\n            current = String::new();\n        }\n    }\n    if out.len() > 0 {\n        out.pop();\n    }\n    out\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_words_in_sentence() {\n        let candidate = words_in_sentence;\n        assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"));\n        assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"go for\"));\n        assert_eq!(candidate(String::from(\"there is no place available here\")), String::from(\"there is no place\"));\n        assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n        assert_eq!(candidate(String::from(\"go for it\")), String::from(\"go for it\"));\n        assert_eq!(candidate(String::from(\"here\")), String::from(\"\"));\n        assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"));\n\n    }\n}\n", "entry_point": "words_in_sentence", "instruction": "Write an idiomatic Rust function `words_in_sentence(sentence: String) -> String` to solve the following problem:\nYou are given a string representing a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words from the original sentence, whose lengths are prime numbers, the order of the words in the new string should be the same as the original one. Example 1: \n\nIn the following are some examples of how to use the function:\n>>> words_in_sentence(String::from(\"This is a test\"))\nString::from(\"is\")\nExample 2:\n>>> words_in_sentence(String::from(\"lets go for swimming\"))\nString::from(\"go for\")\nConstraints:\n* 1 <= len(sentence) <= 100\n* sentence contains only letters\n"}
{"task_id": "Rust/144", "prompt": "/// Your task is to implement a function that will simplify the expression\n/// x * n. The function returns true if x * n evaluates to a whole number and false\n/// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n/// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n/// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n/// >>> simplify(String::from(\"1/5\"), String::from(\"5/1\"))\n/// true\n/// >>> simplify(String::from(\"1/6\"), String::from(\"2/1\"))\n/// false\n/// >>> simplify(String::from(\"7/10\"), String::from(\"10/2\"))\n/// false\nfn simplify(x: String, n: String) -> bool {\n", "canonical_solution": "\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut i = 0;\n    for i in 0..x.len() {\n        if x.chars().nth(i).unwrap() == '/' {\n            a = x\n                .chars()\n                .take(i)\n                .collect::<String>()\n                .parse::<i32>()\n                .unwrap();\n            b = x\n                .chars()\n                .skip(i + 1)\n                .collect::<String>()\n                .parse::<i32>()\n                .unwrap();\n        }\n    }\n    for i in 0..n.len() {\n        if n.chars().nth(i).unwrap() == '/' {\n            c = n\n                .chars()\n                .take(i)\n                .collect::<String>()\n                .parse::<i32>()\n                .unwrap();\n            d = n\n                .chars()\n                .skip(i + 1)\n                .collect::<String>()\n                .parse::<i32>()\n                .unwrap();\n        }\n    }\n    if (a * c) % (b * d) == 0 {\n        return true;\n    }\n    return false;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_simplify() {\n        let candidate = simplify;\n        assert_eq!(candidate(String::from(\"1/5\"), String::from(\"5/1\")), true);\n        assert_eq!(candidate(String::from(\"1/6\"), String::from(\"2/1\")), false);\n        assert_eq!(candidate(String::from(\"5/1\"), String::from(\"3/1\")), true);\n        assert_eq!(candidate(String::from(\"7/10\"), String::from(\"10/2\")), false);\n        assert_eq!(candidate(String::from(\"2/10\"), String::from(\"50/10\")), true);\n        assert_eq!(candidate(String::from(\"7/2\"), String::from(\"4/2\")), true);\n        assert_eq!(candidate(String::from(\"11/6\"), String::from(\"6/1\")), true);\n        assert_eq!(candidate(String::from(\"2/3\"), String::from(\"5/2\")), false);\n        assert_eq!(candidate(String::from(\"5/2\"), String::from(\"3/5\")), false);\n        assert_eq!(candidate(String::from(\"2/4\"), String::from(\"8/4\")), true);\n        assert_eq!(candidate(String::from(\"2/4\"), String::from(\"4/2\")), true);\n        assert_eq!(candidate(String::from(\"1/5\"), String::from(\"5/1\")), true);\n        assert_eq!(candidate(String::from(\"1/5\"), String::from(\"1/5\")), false);\n\n    }\n}\n", "entry_point": "simplify", "instruction": "Write an idiomatic Rust function `simplify(x: String, n: String) -> bool` to solve the following problem:\nYour task is to implement a function that will simplify the expression x * n. The function returns true if x * n evaluates to a whole number and false otherwise. Both x and n, are string representation of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers. You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\nIn the following are some examples of how to use the function:\n>>> simplify(String::from(\"1/5\"), String::from(\"5/1\"))\ntrue\n>>> simplify(String::from(\"1/6\"), String::from(\"2/1\"))\nfalse\n>>> simplify(String::from(\"7/10\"), String::from(\"10/2\"))\nfalse\n"}
{"task_id": "Rust/145", "prompt": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n", "canonical_solution": "\n    let mut result = arr.clone();\n    result.sort_by_key(|&x| (sum_of_digits(x)));\n    result\n}\n\npub fn sum_of_digits(n: i32) -> i32 {\n    let mut sum = 0;\n    let mut n = n;\n    if n < 0 {\n        let right = n / 10;\n        let mut left;\n\n        if right != 0 {\n            left = n % 10;\n            left = -1 * left;\n        } else {\n            left = n % 10;\n        }\n        sum = right + left;\n        return sum;\n    }\n\n    while n > 0 {\n        sum += n % 10;\n        n /= 10;\n    }\n    sum\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_order_by_points() {\n        let candidate = order_by_points;\n        assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n        assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n        assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n        assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n        assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n        assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n\n    }\n}\n", "entry_point": "order_by_points", "instruction": "Write an idiomatic Rust function `order_by_points(nums: Vec<isize>) -> Vec<isize>` to solve the following problem:\nWrite a function which sorts the given vector of integers in ascending order according to the sum of their digits. Note: if there are several items with similar sum of their digits, order them based on their index in original vector. \n\nIn the following are some examples of how to use the function:\n>>> order_by_points(vec![1, 11, -1, -11, -12])\nvec![-1, -11, 1, -12, 11]\n>>> order_by_points(vec![])\nVec::<isize>::new()\n"}
{"task_id": "Rust/146", "prompt": "/// Write a function that takes a vector of numbers as input and returns \n/// the number of elements in the vector that are greater than 10 and both \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n/// >>> special_filter(vec![15, -73, 14, -15])\n/// 1\n/// >>> special_filter(vec![33, -2, -3, 45, 21, 109])\n/// 2\nfn special_filter(nums: Vec<isize>) -> isize {\n", "canonical_solution": "\n    let mut num = 0;\n    for i in 0..nums.len() {\n        if nums[i] > 10 {\n            let w = nums[i].to_string();\n            if w.chars().nth(0).unwrap().to_digit(10).unwrap() % 2 == 1\n                && w.chars().last().unwrap().to_digit(10).unwrap() % 2 == 1\n            {\n                num += 1;\n            }\n        }\n    }\n    num\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_special_filter() {\n        let candidate = special_filter;\n        assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n        assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n        assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n        assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n        assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n        assert_eq!(candidate(vec![1]), 0);\n        assert_eq!(candidate(Vec::<isize>::new()), 0);\n\n    }\n}\n", "entry_point": "special_filter", "instruction": "Write an idiomatic Rust function `special_filter(nums: Vec<isize>) -> isize` to solve the following problem:\nWrite a function that takes a vector of numbers as input and returns  the number of elements in the vector that are greater than 10 and both  first and last digits of a number are odd (1, 3, 5, 7, 9). \n\nIn the following are some examples of how to use the function:\n>>> special_filter(vec![15, -73, 14, -15])\n1\n>>> special_filter(vec![33, -2, -3, 45, 21, 109])\n2\n"}
{"task_id": "Rust/147", "prompt": "/// You are given a positive integer n. You have to create an integer vector a of length n.\n/// For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n/// >>> get_matrix_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1, 7, 13).\nfn get_matrix_triples(n: isize) -> isize {\n", "canonical_solution": "\n    let mut a = vec![];\n    let mut sum = vec![vec![0, 0, 0]];\n    let mut sum2 = vec![vec![0, 0, 0]];\n\n    for i in 1..=n {\n        a.push((i * i - i + 1) % 3);\n        sum.push(sum[sum.len() - 1].clone());\n        sum[i as usize][a[i as usize - 1] as usize] += 1;\n    }\n\n    for times in 1..3 {\n        for i in 1..=n {\n            sum2.push(sum2[sum2.len() - 1].clone());\n            if i >= 1 {\n                for j in 0..=2 {\n                    sum2[i as usize][(a[i as usize - 1] + j) as usize % 3] +=\n                        sum[i as usize - 1][j as usize];\n                }\n            }\n        }\n        sum = sum2.clone();\n        sum2 = vec![vec![0, 0, 0]];\n    }\n\n    return sum[n as usize][0];\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_get_matrix_triples() {\n        let candidate = get_matrix_triples;\n        assert_eq!(candidate(5), 1);\n        assert_eq!(candidate(6), 4);\n        assert_eq!(candidate(10), 36);\n        assert_eq!(candidate(100), 53361);\n\n    }\n}\n", "entry_point": "get_matrix_triples", "instruction": "Write an idiomatic Rust function `get_matrix_triples(n: isize) -> isize` to solve the following problem:\nYou are given a positive integer n. You have to create an integer vector a of length n. For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,  and a[i] + a[j] + a[k] is a multiple of 3. Example : \n\nIn the following are some examples of how to use the function:\n>>> get_matrix_triples(5)\n1\nExplanation: \na = [1, 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).\n"}
{"task_id": "Rust/149", "prompt": "/// Write a function that accepts a vector of strings as a parameter,\n/// deletes the strings that have odd lengths from it,\n/// and returns the resulted vector with a sorted order,\n/// The vector is always a vector of strings and never a vector of numbers,\n/// and it may contain duplicates.\n/// The order of the vector should be ascending by length of each word, and you\n/// should return the vector sorted by that rule.\n/// If two words have the same length, sort the vector alphabetically.\n/// The function should return a vector of strings in sorted order.\n/// You may assume that all words will have the same length.\n/// For example:\n/// >>> list_sort(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"aaa\")])\n/// vec![String::from(\"aa\")]\n/// >>> list_sort(vec![String::from(\"ab\"), String::from(\"a\"), String::from(\"aaa\"), String::from(\"cd\")])\n/// vec![String::from(\"ab\"), String::from(\"cd\")]\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n", "canonical_solution": "\n    let mut out: Vec<&str> = Vec::new();\n    for i in 0..lst.len() {\n        if lst[i].len() % 2 == 0 {\n            out.push(lst[i]);\n        }\n    }\n    out.sort();\n    for i in 0..out.len() {\n        for j in 1..out.len() {\n            if out[j].len() < out[j - 1].len() {\n                let mid = out[j];\n                out[j] = out[j - 1];\n                out[j - 1] = mid;\n            }\n        }\n    }\n    return out;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_sorted_list_sum() {\n        let candidate = sorted_list_sum;\n        assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\")]);\n        assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n        assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n        assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\")]);\n        assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"au\")]);\n        assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n        assert_eq!(candidate(vec![String::from(\"aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]), vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"bbbb\")]);\n\n    }\n}\n", "entry_point": "sorted_list_sum", "instruction": "Write an idiomatic Rust function `sorted_list_sum(lst: Vec<String>) -> Vec<String>` to solve the following problem:\nWrite a function that accepts a vector of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted vector with a sorted order, The vector is always a vector of strings and never a vector of numbers, and it may contain duplicates. The order of the vector should be ascending by length of each word, and you should return the vector sorted by that rule. If two words have the same length, sort the vector alphabetically. The function should return a vector of strings in sorted order. You may assume that all words will have the same length. \n\nIn the following are some examples of how to use the function:\n>>> list_sort(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"aaa\")])\nvec![String::from(\"aa\")]\n>>> list_sort(vec![String::from(\"ab\"), String::from(\"a\"), String::from(\"aaa\"), String::from(\"cd\")])\nvec![String::from(\"ab\"), String::from(\"cd\")]\n"}
{"task_id": "Rust/150", "prompt": "/// A simple program which should return the value of x if n is \n/// a prime number and should return the value of y otherwise.\n/// Examples:\n/// >>> x_or_y(7, 34, 12)\n/// 34\n/// >>> x_or_y(15, 8, 5)\n/// 5\nfn x_or_y(n: isize, x: isize, y: isize) -> isize {\n", "canonical_solution": "\n    let mut isp = true;\n    if n < 2 {\n        isp = false;\n    }\n    for i in 2..=n / 2 {\n        if n % i == 0 {\n            isp = false;\n        }\n    }\n    if isp {\n        return x;\n    }\n    return y;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_x_or_y() {\n        let candidate = x_or_y;\n        assert_eq!(candidate(7, 34, 12), 34);\n        assert_eq!(candidate(15, 8, 5), 5);\n        assert_eq!(candidate(3, 33, 5212), 33);\n        assert_eq!(candidate(1259, 3, 52), 3);\n        assert_eq!(candidate(7919, -1, 12), -1);\n        assert_eq!(candidate(3609, 1245, 583), 583);\n        assert_eq!(candidate(91, 56, 129), 129);\n        assert_eq!(candidate(6, 34, 1234), 1234);\n        assert_eq!(candidate(1, 2, 0), 0);\n        assert_eq!(candidate(2, 2, 0), 2);\n\n    }\n}\n", "entry_point": "x_or_y", "instruction": "Write an idiomatic Rust function `x_or_y(n: isize, x: isize, y: isize) -> isize` to solve the following problem:\nA simple program which should return the value of x if n is  a prime number and should return the value of y otherwise. \n\nIn the following are some examples of how to use the function:\n>>> x_or_y(7, 34, 12)\n34\n>>> x_or_y(15, 8, 5)\n5\n"}
{"task_id": "Rust/151", "prompt": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n", "canonical_solution": "\n    let mut sum: i64 = 0;\n    for i in 0..lst.len() {\n        if (lst[i] - lst[i].round()).abs() < 1e-4 {\n            if lst[i] > 0.0 && (lst[i].round() as i64) % 2 == 1 {\n                sum += (lst[i].round() as i64) * (lst[i].round() as i64);\n            }\n        }\n    }\n    return sum;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_double_the_difference() {\n        let candidate = double_the_difference;\n        assert_eq!(candidate(Vec::<f64>::new()), 0);\n        assert_eq!(candidate(vec![5.0, 4.0]), 25);\n        assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n        assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n        assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n        assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n        assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n\n    }\n}\n", "entry_point": "double_the_difference", "instruction": "Write an idiomatic Rust function `double_the_difference(lst: Vec<f64>) -> isize` to solve the following problem:\nGiven a vector of numbers, return the sum of squares of the numbers in the vector that are odd. Ignore numbers that are negative or not integers. \n\nIn the following are some examples of how to use the function:\n>>> double_the_difference(vec![1, 3, 2, 0])\n10\n>>> double_the_difference(vec![-1, -2, 0])\n0\n>>> double_the_difference(vec![9, -2])\n81\n>>> double_the_difference(vec![0])\n0\nIf the input vector is empty, return 0.\n"}
{"task_id": "Rust/152", "prompt": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n", "canonical_solution": "\n    let mut out: Vec<i32> = Vec::new();\n    for i in 0..game.len() {\n        out.push(i32::abs(game[i] - guess[i]));\n    }\n    return out;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_compare() {\n        let candidate = compare;\n        assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n        assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n        assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n        assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n\n    }\n}\n", "entry_point": "compare", "instruction": "Write an idiomatic Rust function `compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>` to solve the following problem:\nI think we all remember that feeling when the result of some long-awaited event is finally known. The feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two vectors of scores and guesses of equal length, where each index shows a match.  Return a vector of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score. \n\nIn the following are some examples of how to use the function:\n>>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\nvec![0, 0, 0, 0, 3, 3]\n>>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\nvec![4, 4, 1, 0, 0, 6]\n"}
{"task_id": "Rust/153", "prompt": "/// You will be given the name of a class (a string) and a vector of extensions.\n/// The extensions are to be used to load additional classes to the class. The\n/// strength of the extension is as follows: Let CAP be the number of the uppercase\n/// letters in the extension's name, and let SM be the number of lowercase letters \n/// in the extension's name, the strength is given by the fraction CAP - SM. \n/// You should find the strongest extension and return a string in this \n/// format: ClassName.StrongestExtensionName.\n/// If there are two or more extensions with the same strength, you should\n/// choose the one that comes first in the vector.\n/// For example, if you are given \"Slices\" as the class and a vector of the\n/// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n/// Example:\n/// >>> strongest_extension(String::from(\"my_class\"), vec![String::from(\"AA\"), String::from(\"Be\"), String::from(\"CC\")])\n/// String::from(\"my_class.AA\")\nfn strongest_extension(class_name: String, extensions: Vec<String>) -> String {\n", "canonical_solution": "\n    let mut strongest = \"\";\n    let mut max = -1000;\n    for i in 0..extensions.len() {\n        let mut strength = 0;\n        for j in 0..extensions[i].len() {\n            let chr = extensions[i].chars().nth(j).unwrap();\n            if chr >= 'A' && chr <= 'Z' {\n                strength += 1;\n            }\n            if chr >= 'a' && chr <= 'z' {\n                strength -= 1;\n            }\n        }\n        if strength > max {\n            max = strength;\n            strongest = extensions[i];\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest)\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_strongest_extension() {\n        let candidate = strongest_extension;\n        assert_eq!(candidate(String::from(\"Watashi\"), vec![String::from(\"tEN\"), String::from(\"niNE\"), String::from(\"eIGHt8OKe\")]), String::from(\"Watashi.eIGHt8OKe\"));\n        assert_eq!(candidate(String::from(\"Boku123\"), vec![String::from(\"nani\"), String::from(\"NazeDa\"), String::from(\"YEs.WeCaNe\"), String::from(\"32145tggg\")]), String::from(\"Boku123.YEs.WeCaNe\"));\n        assert_eq!(candidate(String::from(\"__YESIMHERE\"), vec![String::from(\"t\"), String::from(\"eMptY\"), String::from(\"nothing\"), String::from(\"zeR00\"), String::from(\"NuLl__\"), String::from(\"123NoooneB321\")]), String::from(\"__YESIMHERE.NuLl__\"));\n        assert_eq!(candidate(String::from(\"K\"), vec![String::from(\"Ta\"), String::from(\"TAR\"), String::from(\"t234An\"), String::from(\"cosSo\")]), String::from(\"K.TAR\"));\n        assert_eq!(candidate(String::from(\"__HAHA\"), vec![String::from(\"Tab\"), String::from(\"123\"), String::from(\"781345\"), String::from(\"-_-\")]), String::from(\"__HAHA.123\"));\n        assert_eq!(candidate(String::from(\"YameRore\"), vec![String::from(\"HhAas\"), String::from(\"okIWILL123\"), String::from(\"WorkOut\"), String::from(\"Fails\"), String::from(\"-_-\")]), String::from(\"YameRore.okIWILL123\"));\n        assert_eq!(candidate(String::from(\"finNNalLLly\"), vec![String::from(\"Die\"), String::from(\"NowW\"), String::from(\"Wow\"), String::from(\"WoW\")]), String::from(\"finNNalLLly.WoW\"));\n        assert_eq!(candidate(String::from(\"_\"), vec![String::from(\"Bb\"), String::from(\"91245\")]), String::from(\"_.Bb\"));\n        assert_eq!(candidate(String::from(\"Sp\"), vec![String::from(\"671235\"), String::from(\"Bb\")]), String::from(\"Sp.671235\"));\n\n    }\n}\n", "entry_point": "strongest_extension", "instruction": "Write an idiomatic Rust function `strongest_extension(class_name: String, extensions: Vec<String>) -> String` to solve the following problem:\nYou will be given the name of a class (a string) and a vector of extensions. The extensions are to be used to load additional classes to the class. The strength of the extension is as follows: Let CAP be the number of the uppercase letters in the extension's name, and let SM be the number of lowercase letters  in the extension's name, the strength is given by the fraction CAP - SM.  You should find the strongest extension and return a string in this  format: ClassName.StrongestExtensionName. If there are two or more extensions with the same strength, you should choose the one that comes first in the vector. \n\nIn the following are some examples of how to use the function:\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n(its strength is -1).\nExample:\n>>> strongest_extension(String::from(\"my_class\"), vec![String::from(\"AA\"), String::from(\"Be\"), String::from(\"CC\")])\nString::from(\"my_class.AA\")\n"}
{"task_id": "Rust/154", "prompt": "/// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(String::from(\"abcd\"), String::from(\"abd\"))\n/// false\n/// >>> cycpattern_check(String::from(\"hello\"), String::from(\"ell\"))\n/// true\n/// >>> cycpattern_check(String::from(\"whassup\"), String::from(\"psus\"))\n/// false\n/// >>> cycpattern_check(String::from(\"abab\"), String::from(\"baa\"))\n/// true\n/// >>> cycpattern_check(String::from(\"efef\"), String::from(\"eeff\"))\n/// false\n/// >>> cycpattern_check(String::from(\"himenss\"), String::from(\"simen\"))\n/// true\nfn cycpattern_check(a: String, b: String) -> bool {\n", "canonical_solution": "\n    for i in 0..b.len() {\n        let rotate = format!(\"{}{}\", &b[i..], &b[..i]);\n        if a.contains(&rotate) {\n            return true;\n        }\n    }\n    false\n}\n\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_cycpattern_check() {\n        let candidate = cycpattern_check;\n        assert_eq!(candidate(String::from(\"xyzw\"), String::from(\"xyw\")), false);\n        assert_eq!(candidate(String::from(\"yello\"), String::from(\"ell\")), true);\n        assert_eq!(candidate(String::from(\"whattup\"), String::from(\"ptut\")), false);\n        assert_eq!(candidate(String::from(\"efef\"), String::from(\"fee\")), true);\n        assert_eq!(candidate(String::from(\"abab\"), String::from(\"aabb\")), false);\n        assert_eq!(candidate(String::from(\"winemtt\"), String::from(\"tinem\")), true);\n\n    }\n}\n", "entry_point": "cycpattern_check", "instruction": "Write an idiomatic Rust function `cycpattern_check(a: String, b: String) -> bool` to solve the following problem:\nYou are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word \n\nIn the following are some examples of how to use the function:\n>>> cycpattern_check(String::from(\"abcd\"), String::from(\"abd\"))\nfalse\n>>> cycpattern_check(String::from(\"hello\"), String::from(\"ell\"))\ntrue\n>>> cycpattern_check(String::from(\"whassup\"), String::from(\"psus\"))\nfalse\n>>> cycpattern_check(String::from(\"abab\"), String::from(\"baa\"))\ntrue\n>>> cycpattern_check(String::from(\"efef\"), String::from(\"eeff\"))\nfalse\n>>> cycpattern_check(String::from(\"himenss\"), String::from(\"simen\"))\ntrue\n"}
{"task_id": "Rust/155", "prompt": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n", "canonical_solution": "\n    let w = num.abs().to_string();\n    let mut n1 = 0;\n    let mut n2 = 0;\n    for i in 0..w.len() {\n        if w.chars().nth(i).unwrap().to_digit(10).unwrap() % 2 == 1 {\n            n1 += 1;\n        } else {\n            n2 += 1;\n        }\n    }\n    vec![n2, n1]\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_even_odd_count() {\n        let candidate = even_odd_count;\n        assert_eq!(candidate(7), (0, 1));\n        assert_eq!(candidate(-78), (1, 1));\n        assert_eq!(candidate(3452), (2, 2));\n        assert_eq!(candidate(346211), (3, 3));\n        assert_eq!(candidate(-345821), (3, 3));\n        assert_eq!(candidate(-2), (1, 0));\n        assert_eq!(candidate(-45347), (2, 3));\n        assert_eq!(candidate(0), (1, 0));\n\n    }\n}\n", "entry_point": "even_odd_count", "instruction": "Write an idiomatic Rust function `even_odd_count(num: isize) -> (isize, isize)` to solve the following problem:\nGiven an integer. return a tuple that has the number of even and odd digits respectively. Example: \n\nIn the following are some examples of how to use the function:\n>>> even_odd_count(-12)\n(1, 1)\n>>> even_odd_count(123)\n(1, 2)\n"}
{"task_id": "Rust/156", "prompt": "/// Given a positive integer, obtain its roman numeral equivalent as a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n/// Examples:\n/// >>> int_to_mini_roman(19)\n/// String::from(\"xix\")\n/// >>> int_to_mini_roman(152)\n/// String::from(\"clii\")\n/// >>> int_to_mini_roman(426)\n/// String::from(\"cdxxvi\")\nfn int_to_mini_roman(number: isize) -> String {\n", "canonical_solution": "\n    let mut current = String::new();\n    let mut number = number;\n    let rep = vec![\n        \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\",\n    ];\n    let num = vec![1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let mut pos = 0;\n    while number > 0 {\n        while number >= num[pos] {\n            current.push_str(rep[pos]);\n            number -= num[pos];\n        }\n        if number > 0 {\n            pos += 1;\n        }\n    }\n    current\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_int_to_mini_roman() {\n        let candidate = int_to_mini_roman;\n        assert_eq!(candidate(19), String::from(\"xix\"));\n        assert_eq!(candidate(152), String::from(\"clii\"));\n        assert_eq!(candidate(251), String::from(\"ccli\"));\n        assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n        assert_eq!(candidate(500), String::from(\"d\"));\n        assert_eq!(candidate(1), String::from(\"i\"));\n        assert_eq!(candidate(4), String::from(\"iv\"));\n        assert_eq!(candidate(43), String::from(\"xliii\"));\n        assert_eq!(candidate(90), String::from(\"xc\"));\n        assert_eq!(candidate(94), String::from(\"xciv\"));\n        assert_eq!(candidate(532), String::from(\"dxxxii\"));\n        assert_eq!(candidate(900), String::from(\"cm\"));\n        assert_eq!(candidate(994), String::from(\"cmxciv\"));\n        assert_eq!(candidate(1000), String::from(\"m\"));\n\n    }\n}\n", "entry_point": "int_to_mini_roman", "instruction": "Write an idiomatic Rust function `int_to_mini_roman(number: isize) -> String` to solve the following problem:\nGiven a positive integer, obtain its roman numeral equivalent as a string, and return it in lowercase. Restrictions: 1 <= num <= 1000 \n\nIn the following are some examples of how to use the function:\n>>> int_to_mini_roman(19)\nString::from(\"xix\")\n>>> int_to_mini_roman(152)\nString::from(\"clii\")\n>>> int_to_mini_roman(426)\nString::from(\"cdxxvi\")\n"}
{"task_id": "Rust/157", "prompt": "/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1, 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n", "canonical_solution": "\n    if (a * a + b * b - c * c).abs() < 1e-4\n        || (a * a + c * c - b * b).abs() < 1e-4\n        || (b * b + c * c - a * a).abs() < 1e-4\n    {\n        return true;\n    }\n    return false;\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_right_angle_triangle() {\n        let candidate = right_angle_triangle;\n        assert_eq!(candidate(3, 4, 5), true);\n        assert_eq!(candidate(1, 2, 3), false);\n        assert_eq!(candidate(10, 6, 8), true);\n        assert_eq!(candidate(2, 2, 2), false);\n        assert_eq!(candidate(7, 24, 25), true);\n        assert_eq!(candidate(10, 5, 7), false);\n        assert_eq!(candidate(5, 12, 13), true);\n        assert_eq!(candidate(15, 8, 17), true);\n        assert_eq!(candidate(48, 55, 73), true);\n        assert_eq!(candidate(1, 1, 1), false);\n        assert_eq!(candidate(2, 2, 10), false);\n\n    }\n}\n", "entry_point": "right_angle_triangle", "instruction": "Write an idiomatic Rust function `right_angle_triangle(a: isize, b: isize, c: isize) -> bool` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return true if the three sides form a right-angled triangle, false otherwise. A right-angled triangle is a triangle in which one angle is right angle or  90 degree. Example: \n\nIn the following are some examples of how to use the function:\n>>> right_angle_triangle(3, 4, 5)\ntrue\n>>> right_angle_triangle(1, 2, 3)\nfalse\n"}
{"task_id": "Rust/158", "prompt": "/// Write a function that accepts a vector of strings.\n/// The vector contains different words. Return the word with maximum number\n/// of unique characters. If multiple strings have maximum number of unique\n/// characters, return the one which comes first in lexicographical order.\n/// >>> find_max(vec![String::from(\"name\"), String::from(\"of\"), String::from(\"string\")])\n/// String::from(\"string\")\n/// >>> find_max(vec![String::from(\"name\"), String::from(\"enam\"), String::from(\"game\")])\n/// String::from(\"enam\")\n/// >>> find_max(vec![String::from(\"aaaaaaa\"), String::from(\"bb\"), String::from(\"cc\")])\n/// String::from(\"aaaaaaa\")\nfn find_max(words: Vec<String>) -> String {\n", "canonical_solution": "\n    let mut max = \"\";\n    let mut maxu = 0;\n    for i in 0..words.len() {\n        let mut unique = String::from(\"\");\n        for j in 0..words[i].len() {\n            if !unique.contains(words[i].chars().nth(j).unwrap()) {\n                unique.push(words[i].chars().nth(j).unwrap());\n            }\n        }\n        if unique.len() > maxu || (unique.len() == maxu && words[i] < max) {\n            max = words[i];\n            maxu = unique.len();\n        }\n    }\n    max\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_find_max() {\n        let candidate = find_max;\n        assert_eq!(candidate(vec![String::from(\"name\"), String::from(\"of\"), String::from(\"string\")]), String::from(\"string\"));\n        assert_eq!(candidate(vec![String::from(\"name\"), String::from(\"enam\"), String::from(\"game\")]), String::from(\"enam\"));\n        assert_eq!(candidate(vec![String::from(\"aaaaaaa\"), String::from(\"bb\"), String::from(\"cc\")]), String::from(\"aaaaaaa\"));\n        assert_eq!(candidate(vec![String::from(\"abc\"), String::from(\"cba\")]), String::from(\"abc\"));\n        assert_eq!(candidate(vec![String::from(\"play\"), String::from(\"this\"), String::from(\"game\"), String::from(\"of\"), String::from(\"footbott\")]), String::from(\"footbott\"));\n        assert_eq!(candidate(vec![String::from(\"we\"), String::from(\"are\"), String::from(\"gonna\"), String::from(\"rock\")]), String::from(\"gonna\"));\n        assert_eq!(candidate(vec![String::from(\"we\"), String::from(\"are\"), String::from(\"a\"), String::from(\"mad\"), String::from(\"nation\")]), String::from(\"nation\"));\n        assert_eq!(candidate(vec![String::from(\"this\"), String::from(\"is\"), String::from(\"a\"), String::from(\"prrk\")]), String::from(\"this\"));\n        assert_eq!(candidate(vec![String::from(\"b\")]), String::from(\"b\"));\n        assert_eq!(candidate(vec![String::from(\"play\"), String::from(\"play\"), String::from(\"play\")]), String::from(\"play\"));\n\n    }\n}\n", "entry_point": "find_max", "instruction": "Write an idiomatic Rust function `find_max(words: Vec<String>) -> String` to solve the following problem:\nWrite a function that accepts a vector of strings. The vector contains different words. Return the word with maximum number of unique characters. If multiple strings have maximum number of unique characters, return the one which comes first in lexicographical order. \n\nIn the following are some examples of how to use the function:\n>>> find_max(vec![String::from(\"name\"), String::from(\"of\"), String::from(\"string\")])\nString::from(\"string\")\n>>> find_max(vec![String::from(\"name\"), String::from(\"enam\"), String::from(\"game\")])\nString::from(\"enam\")\n>>> find_max(vec![String::from(\"aaaaaaa\"), String::from(\"bb\"), String::from(\"cc\")])\nString::from(\"aaaaaaa\")\n"}
{"task_id": "Rust/159", "prompt": "/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return a vector of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(5, 6, 10)\n/// vec![11, 4]\n/// >>> eat(4, 8, 9)\n/// vec![12, 1]\n/// >>> eat(1, 10, 10)\n/// vec![11, 0]\n/// >>> eat(2, 11, 5)\n/// vec![7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize, remaining: isize) -> Vec<isize> {\n", "canonical_solution": "\n    if need > remaining {\n        return vec![number + remaining, 0];\n    }\n    return vec![number + need, remaining - need];\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_eat() {\n        let candidate = eat;\n        assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n        assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n        assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n        assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n        assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n        assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n\n    }\n}\n", "entry_point": "eat", "instruction": "Write an idiomatic Rust function `eat(number: isize, need: isize, remaining: isize) -> Vec<isize>` to solve the following problem:\nYou're a hungry rabbit, and you already have eaten a certain number of carrots, but now you need to eat more carrots to complete the day's meals. you should return a vector of [ total number of eaten carrots after your meals, the number of carrots left after your meals ] if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry. Example: \n\nIn the following are some examples of how to use the function:\n>>> eat(5, 6, 10)\nvec![11, 4]\n>>> eat(4, 8, 9)\nvec![12, 1]\n>>> eat(1, 10, 10)\nvec![11, 0]\n>>> eat(2, 11, 5)\nvec![7, 0]\nVariables:\n@number : integer\nthe number of carrots that you have eaten.\n@need : integer\nthe number of carrots that you need to eat.\n@remaining : integer\nthe number of remaining carrots thet exist in stock\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\nHave fun :)\n"}
{"task_id": "Rust/160", "prompt": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n", "canonical_solution": "\n    let mut operand: Vec<i32> = operand;\n    let mut num: Vec<i32> = vec![];\n    let mut posto: Vec<i32> = vec![];\n    for i in 0..operand.len() {\n        posto.push(i as i32);\n    }\n    for i in 0..operato.len() {\n        if operato[i] == \"**\" {\n            while posto[posto[i] as usize] != posto[i] {\n                posto[i] = posto[posto[i] as usize];\n            }\n            while posto[posto[i + 1] as usize] != posto[i + 1] {\n                posto[i + 1] = posto[posto[i + 1] as usize];\n            }\n            operand[posto[i] as usize] =\n                operand[posto[i] as usize].pow(operand[posto[i + 1] as usize] as u32);\n            posto[i + 1] = posto[i];\n        }\n    }\n    for i in 0..operato.len() {\n        if operato[i] == \"*\" || operato[i] == \"//\" {\n            while posto[posto[i] as usize] != posto[i] {\n                posto[i] = posto[posto[i] as usize];\n            }\n            while posto[posto[i + 1] as usize] != posto[i + 1] {\n                posto[i + 1] = posto[posto[i + 1] as usize];\n            }\n            if operato[i] == \"*\" {\n                operand[posto[i] as usize] =\n                    operand[posto[i] as usize] * operand[posto[i + 1] as usize];\n            } else {\n                operand[posto[i] as usize] =\n                    operand[posto[i] as usize] / operand[posto[i + 1] as usize];\n            }\n            posto[i + 1] = posto[i];\n        }\n    }\n    for i in 0..operato.len() {\n        if operato[i] == \"+\" || operato[i] == \"-\" {\n            while posto[posto[i] as usize] != posto[i] {\n                posto[i] = posto[posto[i] as usize];\n            }\n            while posto[posto[i + 1] as usize] != posto[i + 1] {\n                posto[i + 1] = posto[posto[i + 1] as usize];\n            }\n            if operato[i] == \"+\" {\n                operand[posto[i] as usize] =\n                    operand[posto[i] as usize] + operand[posto[i + 1] as usize];\n            } else {\n                operand[posto[i] as usize] =\n                    operand[posto[i] as usize] - operand[posto[i + 1] as usize];\n            }\n            posto[i + 1] = posto[i];\n        }\n    }\n    operand[0]\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_do_algebra() {\n        let candidate = do_algebra;\n        assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n        assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n        assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n\n    }\n}\n", "entry_point": "do_algebra", "instruction": "Write an idiomatic Rust function `do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize` to solve the following problem:\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and  the second vector is a vector of integers. Use the two given vectors to build the algebric  expression and return the evaluation of this expression. The basic algebra operations: Addition ( + )  Subtraction ( - )  Multiplication ( * )  Floor division ( // )  Exponentiation ( ** )  Example: operator['+', '*', '-'] vector = [2, 3, 4, 5] result = 2 + 3 * 4 - 5 => result = 9 Note: The length of operator vector is equal to the length of operand vector minus one. Operand is a vector of of non-negative integers. Operator vector has at least one operator, and operand vector has at least two operands. "}
{"task_id": "Rust/161", "prompt": "/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(String::from(\"1234\"))\n/// String::from(\"4321\")\n/// >>> solve(String::from(\"ab\"))\n/// String::from(\"AB\")\n/// >>> solve(String::from(\"#a@C\"))\n/// String::from(\"#A@c\")\nfn solve(s: String) -> String {\n", "canonical_solution": "\n    let mut nletter = 0;\n    let mut out = String::new();\n    for c in s.chars() {\n        let mut w = c;\n        if w >= 'A' && w <= 'Z' {\n            w = w.to_ascii_lowercase();\n        } else if w >= 'a' && w <= 'z' {\n            w = w.to_ascii_uppercase();\n        } else {\n            nletter += 1;\n        }\n        out.push(w);\n    }\n    if nletter == s.len() {\n        out.chars().rev().collect()\n    } else {\n        out\n    }\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_solve() {\n        let candidate = solve;\n        assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"aSdF\"));\n        assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"));\n        assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n        assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n        assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"));\n        assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n        assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n        assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\n    }\n}\n", "entry_point": "solve", "instruction": "Write an idiomatic Rust function `solve(s: String) -> String` to solve the following problem:\nYou are given a string s. if s[i] is a letter, reverse its case from lower to upper or vise versa,  otherwise keep it as it is. If the string contains no letters, reverse the string. The function should return the resulted string. \n\nIn the following are some examples of how to use the function:\n>>> solve(String::from(\"1234\"))\nString::from(\"4321\")\n>>> solve(String::from(\"ab\"))\nString::from(\"AB\")\n>>> solve(String::from(\"#a@C\"))\nString::from(\"#A@c\")\n"}
{"task_id": "Rust/162", "prompt": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n", "canonical_solution": "\n    if text.is_empty() {\n        return \"None\".to_string();\n    }\n\n    let digest = md5::compute(text.as_bytes());\n    return format!(\"{:x}\", digest);\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_string_to_md5() {\n        let candidate = string_to_md5;\n        assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n        assert_eq!(candidate(String::from(\"\")), None);\n        assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n        assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n\n    }\n}\n", "entry_point": "string_to_md5", "instruction": "Write an idiomatic Rust function `string_to_md5(text: String) -> Option<String>` to solve the following problem:\nGiven a string 'text', return its md5 hash equivalent string. If 'text' is an empty string, return None. \n\nIn the following are some examples of how to use the function:\n>>> string_to_md5(String::from(\"Hello world\"))\nSome(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n"}
{"task_id": "Rust/163", "prompt": "/// Given two positive integers a and b, return the even digits between a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2, 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a: isize, b: isize) -> Vec<isize> {\n", "canonical_solution": "\n    let mut a = a;\n    let mut b = b;\n    let mut m;\n\n    if b < a {\n        m = a;\n        a = b;\n        b = m;\n    }\n\n    let mut out = vec![];\n    for i in a..=b {\n        if i < 10 && i % 2 == 0 {\n            out.push(i);\n        }\n    }\n    out\n}\n", "test": "\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_generate_integers() {\n        let candidate = generate_integers;\n        assert_eq!(candidate(2, 10), vec![2, 4, 6, 8]);\n        assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n        assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n        assert_eq!(candidate(17, 89), Vec::<isize>::new());\n\n    }\n}\n", "entry_point": "generate_integers", "instruction": "Write an idiomatic Rust function `generate_integers(a: isize, b: isize) -> Vec<isize>` to solve the following problem:\nGiven two positive integers a and b, return the even digits between a and b, in ascending order. \n\nIn the following are some examples of how to use the function:\n>>> generate_integers(2, 8)\nvec![2, 4, 6, 8]\n>>> generate_integers(8, 2)\nvec![2, 4, 6, 8]\n>>> generate_integers(10, 14)\nVec::<isize>::new()\n"}
